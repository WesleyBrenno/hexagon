{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"The Hexagon toolkit is meant to provide abstraction from underlying technologies (data storage, HTTP server engines, etc.) to be able to change them with minimum impact. It is designed to fit in applications that conforms to the Hexagonal Architecture (also called Clean Architecture or Ports and Adapters Architecture ). To see some simple examples you can read the Quick Start page. For more information you can check the Developer Guide . You can read the Core or HTTP Server modules documentation. Hello World \u00b6 Simple Hello World HTTP example. import com.hexagonkt.http.httpDate import com.hexagonkt.http.server.Server import com.hexagonkt.http.server.ServerPort import com.hexagonkt.http.server.jetty.JettyServletAdapter import com.hexagonkt.injection.InjectionManager.bindObject /** * Service server. It is created lazily to allow ServerPort injection (set up in main). */ val server : Server by lazy { Server { before { response . setHeader ( \"Date\" , httpDate ()) } get ( \"/hello/{name}\" ) { ok ( \"Hello, ${pathParameters[\" name \"]}!\" , \"text/plain\" ) } } } /** * Start the service from the command line. */ fun main () { bindObject < ServerPort >( JettyServletAdapter ()) // Bind Jetty server to HTTP Server Port server . start () } Features \u00b6 Hexagon's high-level features. Simple to Use : Hexagon is focused in allowing you to use the features you use the most in your daily coding in the easiest way. Easy to Hack : The library is done to be lean and simple so you can tweak it to suit your needs instead relying on third parties. Pluggable Adapters : Adding an adapter is just implementing the port's interface. You can code your own adapters from scratch or tune the existing ones. Kotlin First : The library is coded in Kotlin for coding with Kotlin. No strings attached to Java (as a Language). Properly Tested : Project's coverage is checked in every Pull Request. It is also stress tested at TechEmpower Frameworks Benchmark . Modular : Each feature is isolated in its own module. Use only the modules you need without unneeded dependencies. Architecture \u00b6 How Hexagon fits in your architecture in a picture. Ports \u00b6 Ports with their provided implementations (Adapters). PORT ADAPTERS HTTP Server Jetty , Servlet Templates Pebble Serialization Formats JSON , YAML Settings Environment , Files , Resources","title":"Home"},{"location":"#hello-world","text":"Simple Hello World HTTP example. import com.hexagonkt.http.httpDate import com.hexagonkt.http.server.Server import com.hexagonkt.http.server.ServerPort import com.hexagonkt.http.server.jetty.JettyServletAdapter import com.hexagonkt.injection.InjectionManager.bindObject /** * Service server. It is created lazily to allow ServerPort injection (set up in main). */ val server : Server by lazy { Server { before { response . setHeader ( \"Date\" , httpDate ()) } get ( \"/hello/{name}\" ) { ok ( \"Hello, ${pathParameters[\" name \"]}!\" , \"text/plain\" ) } } } /** * Start the service from the command line. */ fun main () { bindObject < ServerPort >( JettyServletAdapter ()) // Bind Jetty server to HTTP Server Port server . start () }","title":"Hello World"},{"location":"#features","text":"Hexagon's high-level features. Simple to Use : Hexagon is focused in allowing you to use the features you use the most in your daily coding in the easiest way. Easy to Hack : The library is done to be lean and simple so you can tweak it to suit your needs instead relying on third parties. Pluggable Adapters : Adding an adapter is just implementing the port's interface. You can code your own adapters from scratch or tune the existing ones. Kotlin First : The library is coded in Kotlin for coding with Kotlin. No strings attached to Java (as a Language). Properly Tested : Project's coverage is checked in every Pull Request. It is also stress tested at TechEmpower Frameworks Benchmark . Modular : Each feature is isolated in its own module. Use only the modules you need without unneeded dependencies.","title":"Features"},{"location":"#architecture","text":"How Hexagon fits in your architecture in a picture.","title":"Architecture"},{"location":"#ports","text":"Ports with their provided implementations (Adapters). PORT ADAPTERS HTTP Server Jetty , Servlet Templates Pebble Serialization Formats JSON , YAML Settings Environment , Files , Resources","title":"Ports"},{"location":"api/","text":"Modules \u00b6 Core Scheduler Web Ports \u00b6 HTTP Server HTTP Client Store Messaging Templates Adapters \u00b6 HTTP Server \u00b6 Jetty Servlet HTTP Client \u00b6 Async HTTP Client Store \u00b6 MongoDB Messaging \u00b6 RabbitMQ Templates \u00b6 Pebble","title":"API"},{"location":"api/#modules","text":"Core Scheduler Web","title":"Modules"},{"location":"api/#ports","text":"HTTP Server HTTP Client Store Messaging Templates","title":"Ports"},{"location":"api/#adapters","text":"","title":"Adapters"},{"location":"api/#http-server","text":"Jetty Servlet","title":"HTTP Server"},{"location":"api/#http-client","text":"Async HTTP Client","title":"HTTP Client"},{"location":"api/#store","text":"MongoDB","title":"Store"},{"location":"api/#messaging","text":"RabbitMQ","title":"Messaging"},{"location":"api/#templates","text":"Pebble","title":"Templates"},{"location":"create_services/","text":"Cloning a Starter repository \u00b6 To create a new Hexagon service, you can clone a minimum running example using the Gradle Starter or the Maven Starter . From scratch \u00b6 You can write a Gradle project from scratch (Gradle 5.3 or newer is required) using the following build . gradle : plugins { id 'org.jetbrains.kotlin.jvm' version '1.3.50' } apply plugin: 'kotlin' apply plugin: 'application' mainClassName = 'HelloKt' repositories { jcenter () } dependencies { compile ( \"com.hexagonkt:http_server_jetty:$hexagonVersion\" ) } From a template \u00b6 You can create a service from a Lazybones template. To do so type: lazybones create hexagon - service srvName curl -s get.sdkman.io | bash && source ~/.sdkman/bin/sdkman-init.sh sdk i lazybones mkdir ~/.lazybones lazybones config set bintrayRepositories pledbrook/lazybones-templates jamming/maven lazybones create hexagon-service srvName -Pgroup = org.example -Pversion = 0 .1 -Pdescription = Description cd srvName ./gradlew","title":"Create Services"},{"location":"create_services/#cloning-a-starter-repository","text":"To create a new Hexagon service, you can clone a minimum running example using the Gradle Starter or the Maven Starter .","title":"Cloning a Starter repository"},{"location":"create_services/#from-scratch","text":"You can write a Gradle project from scratch (Gradle 5.3 or newer is required) using the following build . gradle : plugins { id 'org.jetbrains.kotlin.jvm' version '1.3.50' } apply plugin: 'kotlin' apply plugin: 'application' mainClassName = 'HelloKt' repositories { jcenter () } dependencies { compile ( \"com.hexagonkt:http_server_jetty:$hexagonVersion\" ) }","title":"From scratch"},{"location":"create_services/#from-a-template","text":"You can create a service from a Lazybones template. To do so type: lazybones create hexagon - service srvName curl -s get.sdkman.io | bash && source ~/.sdkman/bin/sdkman-init.sh sdk i lazybones mkdir ~/.lazybones lazybones config set bintrayRepositories pledbrook/lazybones-templates jamming/maven lazybones create hexagon-service srvName -Pgroup = org.example -Pversion = 0 .1 -Pdescription = Description cd srvName ./gradlew","title":"From a template"},{"location":"developer_guide/","text":"Toolkit Structure \u00b6 The project is composed by modules, each module provide a single functionality. There are three kind of modules: The ones that provide a functionality that does not depend on different implementations, like hexagon_scheduler or hexagon_core . Modules that define a \"Port\": these are interfaces to a feature that may have different implementations (ie: port_http_server or port_store ). They can not be used by themselves and in their place, an adapter implementing them should be added to the list of dependencies. Adapter modules, which are Port implementations for a given tool. store_mongodb and messaging_rabbitmq are examples of this type of modules. All ports are independent from each other. Some modules can depend on several Ports, however dependencies to Adapters won't be allowed. Hexagon Core \u00b6 The Hexagon Core module is used by all other libraries, so it would be added to your project anyway just by using any adapter. The main features it has are: Helpers : JVM information, a logger and other useful utilities. Dependency Injection : bind classes to creation closures or instances and inject them. Instance Serialization : parse/serialize data in different formats to class instances. Configuration Settings : load settings from different data sources and formats. Other Modules \u00b6 The following libraries provide extra features not bound to different implementations. They will not use dependencies outside the Hexagon toolkit. Scheduling : this module allows services to execute tasks periodically using Cron expressions. Toolkit Ports \u00b6 These modules define features that need an specific implementation. You can use many implementations of each port at the same time. You can even provide a custom implementations if you want to optimize a particular use case. These are the implemented ports: HTTP Server : describes how to use HTTP routing and HTML templates for Web services. HTTP Client : documentation to use the HTTP client module to connect to other services. Storage : gives an overview of how to store data using different data stores. Messaging : how to support asynchronous communication with messages through message brokers. Templates : describes how to render pages using template engines.","title":"Developer Guide"},{"location":"developer_guide/#toolkit-structure","text":"The project is composed by modules, each module provide a single functionality. There are three kind of modules: The ones that provide a functionality that does not depend on different implementations, like hexagon_scheduler or hexagon_core . Modules that define a \"Port\": these are interfaces to a feature that may have different implementations (ie: port_http_server or port_store ). They can not be used by themselves and in their place, an adapter implementing them should be added to the list of dependencies. Adapter modules, which are Port implementations for a given tool. store_mongodb and messaging_rabbitmq are examples of this type of modules. All ports are independent from each other. Some modules can depend on several Ports, however dependencies to Adapters won't be allowed.","title":"Toolkit Structure"},{"location":"developer_guide/#hexagon-core","text":"The Hexagon Core module is used by all other libraries, so it would be added to your project anyway just by using any adapter. The main features it has are: Helpers : JVM information, a logger and other useful utilities. Dependency Injection : bind classes to creation closures or instances and inject them. Instance Serialization : parse/serialize data in different formats to class instances. Configuration Settings : load settings from different data sources and formats.","title":"Hexagon Core"},{"location":"developer_guide/#other-modules","text":"The following libraries provide extra features not bound to different implementations. They will not use dependencies outside the Hexagon toolkit. Scheduling : this module allows services to execute tasks periodically using Cron expressions.","title":"Other Modules"},{"location":"developer_guide/#toolkit-ports","text":"These modules define features that need an specific implementation. You can use many implementations of each port at the same time. You can even provide a custom implementations if you want to optimize a particular use case. These are the implemented ports: HTTP Server : describes how to use HTTP routing and HTML templates for Web services. HTTP Client : documentation to use the HTTP client module to connect to other services. Storage : gives an overview of how to store data using different data stores. Messaging : how to support asynchronous communication with messages through message brokers. Templates : describes how to render pages using template engines.","title":"Toolkit Ports"},{"location":"examples/","text":"Benchmark \u00b6 This is an application for checking the TechEmpower Web Framework Benchmarks . It is an internal Hexagon module. You can find the code here . Flyhopper \u00b6 Example REST service using Ryanair's APIs. You can find the repository here . Gradle Starter \u00b6 Hexagon starter project using Gradle as the build tool. The source code is inside this GitHub repository . Maven Starter \u00b6 Hexagon example service built with Maven. The sources are located here .","title":"Examples"},{"location":"examples/#benchmark","text":"This is an application for checking the TechEmpower Web Framework Benchmarks . It is an internal Hexagon module. You can find the code here .","title":"Benchmark"},{"location":"examples/#flyhopper","text":"Example REST service using Ryanair's APIs. You can find the repository here .","title":"Flyhopper"},{"location":"examples/#gradle-starter","text":"Hexagon starter project using Gradle as the build tool. The source code is inside this GitHub repository .","title":"Gradle Starter"},{"location":"examples/#maven-starter","text":"Hexagon example service built with Maven. The sources are located here .","title":"Maven Starter"},{"location":"gradle/","text":"Build Variables \u00b6 The build process and imported build scripts (like the ones documented here) use variables to customize their behaviour. It is possible to add/change variables of a build from the following places: In the project's gradle . properties file. In your user's gradle configuration: ~/ . gradle / gradle . properties . Passing them from the command line with the following switch: - Pkey = val . Defining a project's extra property inside build . gradle . Ie: project . ext . key = 'val' . For examples and reference, check .travis.yml , build.gradle and gradle.properties . Helper scripts \u00b6 These scripts can be added to your build to include a whole new capability to your building logic. To use them, you can import the online versions, or copy them to your gradle directory before importing the script. You can import these scripts by adding add apply from : $ gradleScripts / $ script . gradle to your build . gradle file some of them may require additional plugins inside the plugins section in the root build . gradle . Check toolkit's build . gradle files for examples. Bintray \u00b6 This script setup the project/module for publishing in Bintray . It publishes all artifacts attached to the mavenJava publication (check kotlin.gradle publishing section) at the bare minimum binaries are published. For an Open Source project, you must include sources and javadoc also. To use it apply $ gradleScripts / bintray . gradle and add the id 'com.jfrog.bintray' version 'VERSION' plugin to the root build . gradle . To setup this script's parameters, check the build variables section . This helper settings are: bintrayKey (REQUIRED): if not defined will try to load BINTRAY_KEY environment variable. bintrayUser (REQUIRED): or BINTRAY_USER environment variable if not defined. bintrayRepo (REQUIRED): Bintray's repository to upload the artifacts. license (REQUIRED): the license used to publish in Bintray. vcsUrl (REQUIRED): code repository location. Dokka \u00b6 This script setup Dokka tool and add a JAR with the project's code documentation to the published JARs. All modules' Markdown files are added to the documentation and test classes ending in SamplesTest are available to be referenced as samples. To use it apply $ gradleScripts / dokka . gradle and add the id 'org.jetbrains.dokka' version 'VERSION' plugin to the root build . gradle . The format for the generated documentation will be javadoc to make it compatible with current IDEs. Icons \u00b6 Create web icons (favicon and thumbnails for browsers/mobile) from image SVGs (logos). For image rendering you will need rsvg (librsvg2-bin) and imagemagick installed in the development machine. To use it apply $ gradleScripts / icons . gradle to your build . gradle . To setup this script's parameters, check the build variables section . This helper settings are: logoSmall (REQUIRED): SVG file used to render the small logo. Used for the favicon. logoLarge (REQUIRED): SVG file used to render the large logo. logoWide (REQUIRED): SVG file used to render the wide logo. Used for MS Windows tiles. JMH \u00b6 This scripts adds support for running JMH micro benchmarks . To use it apply $ gradleScripts / jmh . gradle and add the id 'me.champeau.gradle.jmh' version 'VERSION' plugin to the root build . gradle . To setup this script's parameters, check the build variables section . This helper settings are: jmhBenchmarkVersion: JMH version. The default is 1.21. iterations (REQUIRED): number of measurement iterations to do. benchmarkModes (REQUIRED): benchmark mode. Available modes are: Throughput/thrpt, AverageTime/avgt, SampleTime/sample, SingleShotTime/ss, All/all batchSize (REQUIRED): number of benchmark method calls per operation (some benchmark modes can ignore this setting). fork (REQUIRED): how many times to forks a single benchmark. Use 0 to disable forking altogether. operationsPerInvocation (REQUIRED): operations per invocation. timeOnIteration (REQUIRED): time to spend at each measurement iteration. warmup (REQUIRED): time to spend at each warmup iteration. warmupBatchSize (REQUIRED): number of benchmark method calls per operation. warmupIterations (REQUIRED): number of warmup iterations to do. Sample benchmark code: import org.openjdk.jmh.annotations.Benchmark open class Benchmark { @Benchmark fun foo () { println ( \"foo bench\" ) Thread . sleep ( 100L ) } @Benchmark fun bar () { println ( \"bar bench\" ) Thread . sleep ( 100L ) } } JUnit \u00b6 Uses JUnit 5 as the test framework. To use it apply $ gradleScripts / junit . gradle to your build . gradle . To setup this script's parameters, check the build variables section . This helper settings are: junitVersion: JUnit version (5+), the default value is: 5.5.1. Kotlin \u00b6 Adds Kotlin's Gradle plugin. It sets up: Java version Repositories Kotlin dependencies Resource processing (replacing build variables) Cleaning (deleting runtime files as logs and dump files) Tests (pass properties, output and mocks) Setup coverage report IDE settings for IntelliJ and Eclipse (download dependencies' sources and API documentation) Published artifacts (binaries, sources and test): sourceJar and testJar tasks Jar with dependencies: jarAll task To use it apply $ gradleScripts / kotlin . gradle and add the id 'org.jetbrains.kotlin.jvm' version 'VERSION' plugin to the root build . gradle . To setup this script's parameters, check the build variables section . This helper settings are: kotlinVersion (REQUIRED): Kotlin version. kotlinCoroutinesVersion (REQUIRED): Kotlin coroutines version. mockkVersion: MockK mocking library version. If no value is supplied, version 1.9.3 is taken. jacocoVersion: Jacoco code coverage tool version. Kotlin JS \u00b6 This script provides the following tasks for compiling Kotlin to JavaScript: jsAll : compiles the project to JavaScript including all of its dependencies. It copies all the resulting files to build / js . assembleWeb : copies all project resources and JavaScript files to build / web . IMPORTANT: This script must be applied at the end of the build script. To use it apply $ gradleScripts / kotlin_js . gradle at the end of the build script, also apply the kotlin2js plugin. And finally, add the id 'org.jetbrains.kotlin.jvm' version 'VERSION' plugin to the root build . gradle . Applying this script at the beginning won't work until it allows dependencies to be merged (a bug). To setup this script's parameters, check the build variables section . This helper settings are: javaScriptDirectory: JavaScript directory inside the web directory. By default it is: \"js\". Service \u00b6 Gradle's script for a service or application. It adds two extra tasks: buildInfo: add configuration file ( service . properties ) with build variables to the package. serve: Run the service in another thread. This allow the possibility to 'watch' source changes. To run the services and watch for changes you need to execute this task with the --continuous ( - t ) Gradle flag. Ie: gw - t serve . To use it apply $ gradleScripts / service . gradle to your build . gradle . JBake \u00b6 Adds support for site generation using JBake . To generate the site execute: gw bake and to test it run: gw bakePreview . The preview site will be served at: http://localhost:8888 . You can change the port defining the sitePort variable inside gradle . properties . To use it apply $ gradleScripts / jbake . gradle and add the id 'org.jbake.site' version 'VERSION' plugin to the root build . gradle . JBake content folder can not be changed (it seems a bug). To generate clean URLs, add the following settings: configuration [ 'uri.noExtension' ] = true configuration [ 'uri.noExtension.prefix' ] = '/' To setup this script's parameters, check the build variables section . This helper settings are: siteHost: site canonical URL, by default it is: \"\". configData: JBake settings map. It is an empty map by default. jbakeVersion: JBake version. By default: \"2.6.4\". sitePort: preview site port for development. It is \"8888\" if not set. SonarQube \u00b6 Set up the project to be analyzed by the SonarQube instance running in the cloud . To use it apply $ gradleScripts / sonarqube . gradle and add the id 'org.sonarqube' version 'VERSION' plugin to the root build . gradle . To setup this script's parameters, check the build variables section . This helper settings are: sonarqubeProject (REQUIRED): ID used to locate the project in SonarQube host. sonarqubeOrganization (REQUIRED): organization owning the project. sonarqubeHost: SonarQube server to be used. By default it is: https : // sonarcloud . io . sonarqubeToken (REQUIRED): If not set, the SONARQUBE_TOKEN environment variable will be used. TestNG \u00b6 Uses TestNG as the test framework. To use it apply $ gradleScripts / testng . gradle to your build . gradle . To setup this script's parameters, check the build variables section . This helper settings are: testngVersion: TestNG version, the default value is: 6.14.3.","title":"Gradle Helpers"},{"location":"gradle/#build-variables","text":"The build process and imported build scripts (like the ones documented here) use variables to customize their behaviour. It is possible to add/change variables of a build from the following places: In the project's gradle . properties file. In your user's gradle configuration: ~/ . gradle / gradle . properties . Passing them from the command line with the following switch: - Pkey = val . Defining a project's extra property inside build . gradle . Ie: project . ext . key = 'val' . For examples and reference, check .travis.yml , build.gradle and gradle.properties .","title":"Build Variables"},{"location":"gradle/#helper-scripts","text":"These scripts can be added to your build to include a whole new capability to your building logic. To use them, you can import the online versions, or copy them to your gradle directory before importing the script. You can import these scripts by adding add apply from : $ gradleScripts / $ script . gradle to your build . gradle file some of them may require additional plugins inside the plugins section in the root build . gradle . Check toolkit's build . gradle files for examples.","title":"Helper scripts"},{"location":"gradle/#bintray","text":"This script setup the project/module for publishing in Bintray . It publishes all artifacts attached to the mavenJava publication (check kotlin.gradle publishing section) at the bare minimum binaries are published. For an Open Source project, you must include sources and javadoc also. To use it apply $ gradleScripts / bintray . gradle and add the id 'com.jfrog.bintray' version 'VERSION' plugin to the root build . gradle . To setup this script's parameters, check the build variables section . This helper settings are: bintrayKey (REQUIRED): if not defined will try to load BINTRAY_KEY environment variable. bintrayUser (REQUIRED): or BINTRAY_USER environment variable if not defined. bintrayRepo (REQUIRED): Bintray's repository to upload the artifacts. license (REQUIRED): the license used to publish in Bintray. vcsUrl (REQUIRED): code repository location.","title":"Bintray"},{"location":"gradle/#dokka","text":"This script setup Dokka tool and add a JAR with the project's code documentation to the published JARs. All modules' Markdown files are added to the documentation and test classes ending in SamplesTest are available to be referenced as samples. To use it apply $ gradleScripts / dokka . gradle and add the id 'org.jetbrains.dokka' version 'VERSION' plugin to the root build . gradle . The format for the generated documentation will be javadoc to make it compatible with current IDEs.","title":"Dokka"},{"location":"gradle/#icons","text":"Create web icons (favicon and thumbnails for browsers/mobile) from image SVGs (logos). For image rendering you will need rsvg (librsvg2-bin) and imagemagick installed in the development machine. To use it apply $ gradleScripts / icons . gradle to your build . gradle . To setup this script's parameters, check the build variables section . This helper settings are: logoSmall (REQUIRED): SVG file used to render the small logo. Used for the favicon. logoLarge (REQUIRED): SVG file used to render the large logo. logoWide (REQUIRED): SVG file used to render the wide logo. Used for MS Windows tiles.","title":"Icons"},{"location":"gradle/#jmh","text":"This scripts adds support for running JMH micro benchmarks . To use it apply $ gradleScripts / jmh . gradle and add the id 'me.champeau.gradle.jmh' version 'VERSION' plugin to the root build . gradle . To setup this script's parameters, check the build variables section . This helper settings are: jmhBenchmarkVersion: JMH version. The default is 1.21. iterations (REQUIRED): number of measurement iterations to do. benchmarkModes (REQUIRED): benchmark mode. Available modes are: Throughput/thrpt, AverageTime/avgt, SampleTime/sample, SingleShotTime/ss, All/all batchSize (REQUIRED): number of benchmark method calls per operation (some benchmark modes can ignore this setting). fork (REQUIRED): how many times to forks a single benchmark. Use 0 to disable forking altogether. operationsPerInvocation (REQUIRED): operations per invocation. timeOnIteration (REQUIRED): time to spend at each measurement iteration. warmup (REQUIRED): time to spend at each warmup iteration. warmupBatchSize (REQUIRED): number of benchmark method calls per operation. warmupIterations (REQUIRED): number of warmup iterations to do. Sample benchmark code: import org.openjdk.jmh.annotations.Benchmark open class Benchmark { @Benchmark fun foo () { println ( \"foo bench\" ) Thread . sleep ( 100L ) } @Benchmark fun bar () { println ( \"bar bench\" ) Thread . sleep ( 100L ) } }","title":"JMH"},{"location":"gradle/#junit","text":"Uses JUnit 5 as the test framework. To use it apply $ gradleScripts / junit . gradle to your build . gradle . To setup this script's parameters, check the build variables section . This helper settings are: junitVersion: JUnit version (5+), the default value is: 5.5.1.","title":"JUnit"},{"location":"gradle/#kotlin","text":"Adds Kotlin's Gradle plugin. It sets up: Java version Repositories Kotlin dependencies Resource processing (replacing build variables) Cleaning (deleting runtime files as logs and dump files) Tests (pass properties, output and mocks) Setup coverage report IDE settings for IntelliJ and Eclipse (download dependencies' sources and API documentation) Published artifacts (binaries, sources and test): sourceJar and testJar tasks Jar with dependencies: jarAll task To use it apply $ gradleScripts / kotlin . gradle and add the id 'org.jetbrains.kotlin.jvm' version 'VERSION' plugin to the root build . gradle . To setup this script's parameters, check the build variables section . This helper settings are: kotlinVersion (REQUIRED): Kotlin version. kotlinCoroutinesVersion (REQUIRED): Kotlin coroutines version. mockkVersion: MockK mocking library version. If no value is supplied, version 1.9.3 is taken. jacocoVersion: Jacoco code coverage tool version.","title":"Kotlin"},{"location":"gradle/#kotlin-js","text":"This script provides the following tasks for compiling Kotlin to JavaScript: jsAll : compiles the project to JavaScript including all of its dependencies. It copies all the resulting files to build / js . assembleWeb : copies all project resources and JavaScript files to build / web . IMPORTANT: This script must be applied at the end of the build script. To use it apply $ gradleScripts / kotlin_js . gradle at the end of the build script, also apply the kotlin2js plugin. And finally, add the id 'org.jetbrains.kotlin.jvm' version 'VERSION' plugin to the root build . gradle . Applying this script at the beginning won't work until it allows dependencies to be merged (a bug). To setup this script's parameters, check the build variables section . This helper settings are: javaScriptDirectory: JavaScript directory inside the web directory. By default it is: \"js\".","title":"Kotlin JS"},{"location":"gradle/#service","text":"Gradle's script for a service or application. It adds two extra tasks: buildInfo: add configuration file ( service . properties ) with build variables to the package. serve: Run the service in another thread. This allow the possibility to 'watch' source changes. To run the services and watch for changes you need to execute this task with the --continuous ( - t ) Gradle flag. Ie: gw - t serve . To use it apply $ gradleScripts / service . gradle to your build . gradle .","title":"Service"},{"location":"gradle/#jbake","text":"Adds support for site generation using JBake . To generate the site execute: gw bake and to test it run: gw bakePreview . The preview site will be served at: http://localhost:8888 . You can change the port defining the sitePort variable inside gradle . properties . To use it apply $ gradleScripts / jbake . gradle and add the id 'org.jbake.site' version 'VERSION' plugin to the root build . gradle . JBake content folder can not be changed (it seems a bug). To generate clean URLs, add the following settings: configuration [ 'uri.noExtension' ] = true configuration [ 'uri.noExtension.prefix' ] = '/' To setup this script's parameters, check the build variables section . This helper settings are: siteHost: site canonical URL, by default it is: \"\". configData: JBake settings map. It is an empty map by default. jbakeVersion: JBake version. By default: \"2.6.4\". sitePort: preview site port for development. It is \"8888\" if not set.","title":"JBake"},{"location":"gradle/#sonarqube","text":"Set up the project to be analyzed by the SonarQube instance running in the cloud . To use it apply $ gradleScripts / sonarqube . gradle and add the id 'org.sonarqube' version 'VERSION' plugin to the root build . gradle . To setup this script's parameters, check the build variables section . This helper settings are: sonarqubeProject (REQUIRED): ID used to locate the project in SonarQube host. sonarqubeOrganization (REQUIRED): organization owning the project. sonarqubeHost: SonarQube server to be used. By default it is: https : // sonarcloud . io . sonarqubeToken (REQUIRED): If not set, the SONARQUBE_TOKEN environment variable will be used.","title":"SonarQube"},{"location":"gradle/#testng","text":"Uses TestNG as the test framework. To use it apply $ gradleScripts / testng . gradle to your build . gradle . To setup this script's parameters, check the build variables section . This helper settings are: testngVersion: TestNG version, the default value is: 6.14.3.","title":"TestNG"},{"location":"help/","text":"Support \u00b6 Please check if your issue already exists at the project board or issues list before creating a new one. To notify bugs create a new bug issue using Github. You can request a new feature using the new feature Github template. If you want to prioritize issues, add the reaction on them. Help \u00b6 You can use Slack for questions, comments, etc. you can also create a Github issue tagged as question.","title":"Help and Support"},{"location":"help/#support","text":"Please check if your issue already exists at the project board or issues list before creating a new one. To notify bugs create a new bug issue using Github. You can request a new feature using the new feature Github template. If you want to prioritize issues, add the reaction on them.","title":"Support"},{"location":"help/#help","text":"You can use Slack for questions, comments, etc. you can also create a Github issue tagged as question.","title":"Help"},{"location":"quick_start/","text":"Simple HTTP service \u00b6 In this guide, we are going to create a sample HTTP service. You can read the Core or HTTP Server modules documentation for more information. You can start by cloning a starter project ( Gradle Starter or Maven Starter ). Or you can create a project from scratch following these steps: Configure Kotlin in Gradle or Maven . Setup the JCenter repository (follow the link and click on the Set me up ! button). Add the dependency in Gradle or Maven : build.gradle implementation ( \"com.hexagonkt:http_server_jetty:$hexagonVersion\" ) pom.xml <dependency> <groupId> com.hexagonkt </groupId> <artifactId> http_server_jetty </artifactId> <version> $hexagonVersion </version> </dependency> Write the code in the src / main / kotlin / Hello . kt file: import com.hexagonkt.http.httpDate import com.hexagonkt.http.server.Server import com.hexagonkt.http.server.ServerPort import com.hexagonkt.http.server.jetty.JettyServletAdapter import com.hexagonkt.injection.InjectionManager.bindObject /** * Service server. It is created lazily to allow ServerPort injection (set up in main). */ val server : Server by lazy { Server { before { response . setHeader ( \"Date\" , httpDate ()) } get ( \"/hello/{name}\" ) { ok ( \"Hello, ${pathParameters[\" name \"]}!\" , \"text/plain\" ) } } } /** * Start the service from the command line. */ fun main () { bindObject < ServerPort >( JettyServletAdapter ()) // Bind Jetty server to HTTP Server Port server . start () } Run the service and view the results at: http://localhost:2010/hello/world You can check the Developer Guide for more details. Or you can clone the Gradle Starter or Maven Starter for a minimal fully working example (including tests). Books Example \u00b6 A simple CRUD example showing how to manage book resources. Here you can check the full test . data class Book ( val author : String , val title : String ) private val books : MutableMap < Int , Book > = linkedMapOf ( 100 to Book ( \"Miguel de Cervantes\" , \"Don Quixote\" ), 101 to Book ( \"William Shakespeare\" , \"Hamlet\" ), 102 to Book ( \"Homer\" , \"The Odyssey\" ) ) val server : Server by lazy { Server ( adapter ) { post ( \"/books\" ) { // Require fails if parameter does not exists val author = queryParameters . require ( \"author\" ). first () val title = queryParameters . require ( \"title\" ). first () val id = ( books . keys . max () ?: 0 ) + 1 books += id to Book ( author , title ) send ( 201 , id ) } get ( \"/books/{id}\" ) { // Path parameters *must* exist an error is thrown if they are not present val bookId = pathParameters [ \"id\" ]. toInt () val book = books [ bookId ] if ( book != null ) // ok() is a shortcut to send(200) ok ( \"Title: ${book.title}, Author: ${book.author}\" ) else send ( 404 , \"Book not found\" ) } put ( \"/books/{id}\" ) { val bookId = pathParameters [ \"id\" ]. toInt () val book = books [ bookId ] if ( book != null ) { books += bookId to book . copy ( author = queryParameters [ \"author\" ] ?. first () ?: book . author , title = queryParameters [ \"title\" ] ?. first () ?: book . title ) ok ( \"Book with id '$bookId' updated\" ) } else { send ( 404 , \"Book not found\" ) } } delete ( \"/books/{id}\" ) { val bookId = pathParameters [ \"id\" ]. toInt () val book = books [ bookId ] books -= bookId if ( book != null ) ok ( \"Book with id '$bookId' deleted\" ) else send ( 404 , \"Book not found\" ) } // Matches path's requests with *any* HTTP method as a fallback (return 404 instead 405) any ( \"/books/{id}\" ) { send ( 405 ) } get ( \"/books\" ) { ok ( books . keys . joinToString ( \" \" , transform = Int :: toString )) } } } Session Example \u00b6 Example showing how to use sessions. Here you can check the full test . val server : Server by lazy { Server ( adapter ) { path ( \"/session\" ) { get ( \"/id\" ) { ok ( session . id ?: \"null\" ) } get ( \"/access\" ) { ok ( session . lastAccessedTime ?. toString () ?: \"null\" ) } get ( \"/new\" ) { ok ( session . isNew ()) } path ( \"/inactive\" ) { get { ok ( session . maxInactiveInterval ?: \"null\" ) } put ( \"/{time}\" ) { session . maxInactiveInterval = pathParameters [ \"time\" ]. toInt () } } get ( \"/creation\" ) { ok ( session . creationTime ?: \"null\" ) } post ( \"/invalidate\" ) { session . invalidate () } path ( \"/{key}\" ) { put ( \"/{value}\" ) { session . set ( pathParameters [ \"key\" ], pathParameters [ \"value\" ]) } get { ok ( session . get ( pathParameters [ \"key\" ]). toString ()) } delete { session . remove ( pathParameters [ \"key\" ]) } } get { val attributes = session . attributes val attributeTexts = attributes . entries . map { it . key + \" : \" + it . value } response . setHeader ( \"attributes\" , attributeTexts . joinToString ( \", \" )) response . setHeader ( \"attribute values\" , attributes . values . joinToString ( \", \" )) response . setHeader ( \"attribute names\" , attributes . keys . joinToString ( \", \" )) response . setHeader ( \"creation\" , session . creationTime . toString ()) response . setHeader ( \"id\" , session . id ?: \"\" ) response . setHeader ( \"last access\" , session . lastAccessedTime . toString ()) response . status = 200 } } } } Cookies Example \u00b6 Demo server to show the use of cookies. Here you can check the full test . val server : Server by lazy { Server ( adapter ) { post ( \"/assertNoCookies\" ) { if ( request . cookies . isNotEmpty ()) halt ( 500 ) } post ( \"/addCookie\" ) { val name = queryParameters [ \"cookieName\" ] ?. first () val value = queryParameters [ \"cookieValue\" ] ?. first () response . addCookie ( HttpCookie ( name , value )) } post ( \"/assertHasCookie\" ) { val cookieName = queryParameters . require ( \"cookieName\" ). first () val cookieValue = request . cookies [ cookieName ] ?. value if ( queryParameters [ \"cookieValue\" ] ?. first () != cookieValue ) halt ( 500 ) } post ( \"/removeCookie\" ) { response . removeCookie ( queryParameters . require ( \"cookieName\" ). first ()) } } } Error Handling Example \u00b6 Code to show how to handle callback exceptions and HTTP error codes. Here you can check the full test . class CustomException : IllegalArgumentException () val server : Server by lazy { Server ( adapter ) { error ( UnsupportedOperationException :: class ) { response . setHeader ( \"error\" , it . message ?: it . javaClass . name ) send ( 599 , \"Unsupported\" ) } error ( IllegalArgumentException :: class ) { response . setHeader ( \"runtimeError\" , it . message ?: it . javaClass . name ) send ( 598 , \"Runtime\" ) } // Catching `Exception` handles any unhandled exception before (it has to be the last) error ( Exception :: class ) { send ( 500 , \"Root handler\" ) } // It is possible to execute a handler upon a given status code before returning error ( 588 ) { send ( 578 , \"588 -> 578\" ) } get ( \"/exception\" ) { throw UnsupportedOperationException ( \"error message\" ) } get ( \"/baseException\" ) { throw CustomException () } get ( \"/unhandledException\" ) { error ( \"error message\" ) } get ( \"/halt\" ) { halt ( \"halted\" ) } get ( \"/588\" ) { halt ( 588 ) } } } Filters Example \u00b6 This example shows how to add filters before and after route execution. Here you can check the full test . private val users : Map < String , String > = mapOf ( \"Turing\" to \"London\" , \"Dijkstra\" to \"Rotterdam\" ) private val server : Server by lazy { Server ( adapter ) { before { attributes [ \"start\" ] = nanoTime () } before ( \"/protected/*\" ) { val authorization = request . headers [ \"Authorization\" ] ?: halt ( 401 , \"Unauthorized\" ) val credentials = authorization . first (). removePrefix ( \"Basic \" ) val userPassword = String ( Base64 . getDecoder (). decode ( credentials )). split ( \":\" ) // Parameters set in call attributes are accessible in other filters and routes attributes [ \"username\" ] = userPassword [ 0 ] attributes [ \"password\" ] = userPassword [ 1 ] } // All matching filters are run in order unless call is halted before ( \"/protected/*\" ) { if ( users [ attributes [ \"username\" ]] != attributes [ \"password\" ]) halt ( 403 , \"Forbidden\" ) } get ( \"/protected/hi\" ) { ok ( \"Hello ${attributes[\" username \"]}!\" ) } // After filters are ran even if request was halted before after { response . setHeader ( \"time\" , nanoTime () - attributes [ \"start\" ] as Long ) } } } Files Example \u00b6 The following code shows how to serve resources and receive files. Here you can check the full test . private val server : Server by lazy { Server ( adapter ) { get ( \"/html/*\" , Resource ( \"assets\" )) // Serve `assets` resources on `/html/*` get ( \"/pub/*\" , File ( directory )) // Serve `test` folder on `/pub/*` get ( Resource ( \"public\" )) // Serve `public` resources folder on `/*` post ( \"/multipart\" ) { ok ( request . parts . keys . joinToString ( \":\" )) } post ( \"/file\" ) { val part = request . parts . values . first () val content = part . inputStream . reader (). readText () ok ( content ) } post ( \"/form\" ) { fun serializeMap ( map : Map < String , List < String >>): List < String > = listOf ( map . map { \"${it.key}:${it.value.joinToString(\" , \")}}\" }. joinToString ( \"\\n\" ) ) val queryParams = serializeMap ( queryParameters ) val formParams = serializeMap ( formParameters ) val params = serializeMap ( parameters ) response . headers [ \"queryParams\" ] = queryParams response . headers [ \"formParams\" ] = formParams response . headers [ \"params\" ] = params } } }","title":"Quick Start"},{"location":"quick_start/#simple-http-service","text":"In this guide, we are going to create a sample HTTP service. You can read the Core or HTTP Server modules documentation for more information. You can start by cloning a starter project ( Gradle Starter or Maven Starter ). Or you can create a project from scratch following these steps: Configure Kotlin in Gradle or Maven . Setup the JCenter repository (follow the link and click on the Set me up ! button). Add the dependency in Gradle or Maven : build.gradle implementation ( \"com.hexagonkt:http_server_jetty:$hexagonVersion\" ) pom.xml <dependency> <groupId> com.hexagonkt </groupId> <artifactId> http_server_jetty </artifactId> <version> $hexagonVersion </version> </dependency> Write the code in the src / main / kotlin / Hello . kt file: import com.hexagonkt.http.httpDate import com.hexagonkt.http.server.Server import com.hexagonkt.http.server.ServerPort import com.hexagonkt.http.server.jetty.JettyServletAdapter import com.hexagonkt.injection.InjectionManager.bindObject /** * Service server. It is created lazily to allow ServerPort injection (set up in main). */ val server : Server by lazy { Server { before { response . setHeader ( \"Date\" , httpDate ()) } get ( \"/hello/{name}\" ) { ok ( \"Hello, ${pathParameters[\" name \"]}!\" , \"text/plain\" ) } } } /** * Start the service from the command line. */ fun main () { bindObject < ServerPort >( JettyServletAdapter ()) // Bind Jetty server to HTTP Server Port server . start () } Run the service and view the results at: http://localhost:2010/hello/world You can check the Developer Guide for more details. Or you can clone the Gradle Starter or Maven Starter for a minimal fully working example (including tests).","title":"Simple HTTP service"},{"location":"quick_start/#books-example","text":"A simple CRUD example showing how to manage book resources. Here you can check the full test . data class Book ( val author : String , val title : String ) private val books : MutableMap < Int , Book > = linkedMapOf ( 100 to Book ( \"Miguel de Cervantes\" , \"Don Quixote\" ), 101 to Book ( \"William Shakespeare\" , \"Hamlet\" ), 102 to Book ( \"Homer\" , \"The Odyssey\" ) ) val server : Server by lazy { Server ( adapter ) { post ( \"/books\" ) { // Require fails if parameter does not exists val author = queryParameters . require ( \"author\" ). first () val title = queryParameters . require ( \"title\" ). first () val id = ( books . keys . max () ?: 0 ) + 1 books += id to Book ( author , title ) send ( 201 , id ) } get ( \"/books/{id}\" ) { // Path parameters *must* exist an error is thrown if they are not present val bookId = pathParameters [ \"id\" ]. toInt () val book = books [ bookId ] if ( book != null ) // ok() is a shortcut to send(200) ok ( \"Title: ${book.title}, Author: ${book.author}\" ) else send ( 404 , \"Book not found\" ) } put ( \"/books/{id}\" ) { val bookId = pathParameters [ \"id\" ]. toInt () val book = books [ bookId ] if ( book != null ) { books += bookId to book . copy ( author = queryParameters [ \"author\" ] ?. first () ?: book . author , title = queryParameters [ \"title\" ] ?. first () ?: book . title ) ok ( \"Book with id '$bookId' updated\" ) } else { send ( 404 , \"Book not found\" ) } } delete ( \"/books/{id}\" ) { val bookId = pathParameters [ \"id\" ]. toInt () val book = books [ bookId ] books -= bookId if ( book != null ) ok ( \"Book with id '$bookId' deleted\" ) else send ( 404 , \"Book not found\" ) } // Matches path's requests with *any* HTTP method as a fallback (return 404 instead 405) any ( \"/books/{id}\" ) { send ( 405 ) } get ( \"/books\" ) { ok ( books . keys . joinToString ( \" \" , transform = Int :: toString )) } } }","title":"Books Example"},{"location":"quick_start/#session-example","text":"Example showing how to use sessions. Here you can check the full test . val server : Server by lazy { Server ( adapter ) { path ( \"/session\" ) { get ( \"/id\" ) { ok ( session . id ?: \"null\" ) } get ( \"/access\" ) { ok ( session . lastAccessedTime ?. toString () ?: \"null\" ) } get ( \"/new\" ) { ok ( session . isNew ()) } path ( \"/inactive\" ) { get { ok ( session . maxInactiveInterval ?: \"null\" ) } put ( \"/{time}\" ) { session . maxInactiveInterval = pathParameters [ \"time\" ]. toInt () } } get ( \"/creation\" ) { ok ( session . creationTime ?: \"null\" ) } post ( \"/invalidate\" ) { session . invalidate () } path ( \"/{key}\" ) { put ( \"/{value}\" ) { session . set ( pathParameters [ \"key\" ], pathParameters [ \"value\" ]) } get { ok ( session . get ( pathParameters [ \"key\" ]). toString ()) } delete { session . remove ( pathParameters [ \"key\" ]) } } get { val attributes = session . attributes val attributeTexts = attributes . entries . map { it . key + \" : \" + it . value } response . setHeader ( \"attributes\" , attributeTexts . joinToString ( \", \" )) response . setHeader ( \"attribute values\" , attributes . values . joinToString ( \", \" )) response . setHeader ( \"attribute names\" , attributes . keys . joinToString ( \", \" )) response . setHeader ( \"creation\" , session . creationTime . toString ()) response . setHeader ( \"id\" , session . id ?: \"\" ) response . setHeader ( \"last access\" , session . lastAccessedTime . toString ()) response . status = 200 } } } }","title":"Session Example"},{"location":"quick_start/#cookies-example","text":"Demo server to show the use of cookies. Here you can check the full test . val server : Server by lazy { Server ( adapter ) { post ( \"/assertNoCookies\" ) { if ( request . cookies . isNotEmpty ()) halt ( 500 ) } post ( \"/addCookie\" ) { val name = queryParameters [ \"cookieName\" ] ?. first () val value = queryParameters [ \"cookieValue\" ] ?. first () response . addCookie ( HttpCookie ( name , value )) } post ( \"/assertHasCookie\" ) { val cookieName = queryParameters . require ( \"cookieName\" ). first () val cookieValue = request . cookies [ cookieName ] ?. value if ( queryParameters [ \"cookieValue\" ] ?. first () != cookieValue ) halt ( 500 ) } post ( \"/removeCookie\" ) { response . removeCookie ( queryParameters . require ( \"cookieName\" ). first ()) } } }","title":"Cookies Example"},{"location":"quick_start/#error-handling-example","text":"Code to show how to handle callback exceptions and HTTP error codes. Here you can check the full test . class CustomException : IllegalArgumentException () val server : Server by lazy { Server ( adapter ) { error ( UnsupportedOperationException :: class ) { response . setHeader ( \"error\" , it . message ?: it . javaClass . name ) send ( 599 , \"Unsupported\" ) } error ( IllegalArgumentException :: class ) { response . setHeader ( \"runtimeError\" , it . message ?: it . javaClass . name ) send ( 598 , \"Runtime\" ) } // Catching `Exception` handles any unhandled exception before (it has to be the last) error ( Exception :: class ) { send ( 500 , \"Root handler\" ) } // It is possible to execute a handler upon a given status code before returning error ( 588 ) { send ( 578 , \"588 -> 578\" ) } get ( \"/exception\" ) { throw UnsupportedOperationException ( \"error message\" ) } get ( \"/baseException\" ) { throw CustomException () } get ( \"/unhandledException\" ) { error ( \"error message\" ) } get ( \"/halt\" ) { halt ( \"halted\" ) } get ( \"/588\" ) { halt ( 588 ) } } }","title":"Error Handling Example"},{"location":"quick_start/#filters-example","text":"This example shows how to add filters before and after route execution. Here you can check the full test . private val users : Map < String , String > = mapOf ( \"Turing\" to \"London\" , \"Dijkstra\" to \"Rotterdam\" ) private val server : Server by lazy { Server ( adapter ) { before { attributes [ \"start\" ] = nanoTime () } before ( \"/protected/*\" ) { val authorization = request . headers [ \"Authorization\" ] ?: halt ( 401 , \"Unauthorized\" ) val credentials = authorization . first (). removePrefix ( \"Basic \" ) val userPassword = String ( Base64 . getDecoder (). decode ( credentials )). split ( \":\" ) // Parameters set in call attributes are accessible in other filters and routes attributes [ \"username\" ] = userPassword [ 0 ] attributes [ \"password\" ] = userPassword [ 1 ] } // All matching filters are run in order unless call is halted before ( \"/protected/*\" ) { if ( users [ attributes [ \"username\" ]] != attributes [ \"password\" ]) halt ( 403 , \"Forbidden\" ) } get ( \"/protected/hi\" ) { ok ( \"Hello ${attributes[\" username \"]}!\" ) } // After filters are ran even if request was halted before after { response . setHeader ( \"time\" , nanoTime () - attributes [ \"start\" ] as Long ) } } }","title":"Filters Example"},{"location":"quick_start/#files-example","text":"The following code shows how to serve resources and receive files. Here you can check the full test . private val server : Server by lazy { Server ( adapter ) { get ( \"/html/*\" , Resource ( \"assets\" )) // Serve `assets` resources on `/html/*` get ( \"/pub/*\" , File ( directory )) // Serve `test` folder on `/pub/*` get ( Resource ( \"public\" )) // Serve `public` resources folder on `/*` post ( \"/multipart\" ) { ok ( request . parts . keys . joinToString ( \":\" )) } post ( \"/file\" ) { val part = request . parts . values . first () val content = part . inputStream . reader (). readText () ok ( content ) } post ( \"/form\" ) { fun serializeMap ( map : Map < String , List < String >>): List < String > = listOf ( map . map { \"${it.key}:${it.value.joinToString(\" , \")}}\" }. joinToString ( \"\\n\" ) ) val queryParams = serializeMap ( queryParameters ) val formParams = serializeMap ( formParameters ) val params = serializeMap ( parameters ) response . headers [ \"queryParams\" ] = queryParams response . headers [ \"formParams\" ] = formParams response . headers [ \"params\" ] = params } } }","title":"Files Example"},{"location":"hexagon_core/","text":"This module holds utilities used in other libraries of the toolkit. Check the packages' documentation for more details. You can find a quick recap of the main features in the sections below. Logger \u00b6 The following code block shows the most common use cases for the Logger class: val classLogger : Logger = Logger ( Runtime :: class ) // Logger for the `Runtime` class val instanceLogger : Logger = Logger ( this ) // Logger for this instance's class logger . info { \"\"\" You can add a quick log without declaring a Logger using 'com.hexagonkt.helpers.logger'. It is a default logger created for the System class (same as `Logger(System::class)`). \"\"\" } classLogger . trace { \"Message only evaluated if trace enabled at ${Jvm.id}\" } classLogger . debug { \"Message only evaluated if debug enabled at ${Jvm.id}\" } classLogger . warn { \"Message only evaluated if warn enabled at ${Jvm.id}\" } classLogger . info { \"Message only evaluated if info enabled at ${Jvm.id}\" } val exception = IllegalStateException ( \"Exception\" ) classLogger . warn ( exception ) { \"Warning with exception\" } classLogger . error ( exception ) { \"Error message with exception\" } classLogger . error { \"Error without an exception\" } classLogger . time ( \"Logs the time used to run the following block of code\" ) { val message = \"Block of code to be timed\" assert ( message . isNotBlank ()) } instanceLogger . flare { \"Prints a log that stands out for ease searching\" } Dependency injection \u00b6 You can take advantage of dependency injection using the InjectionManager object. You can bind supplier functions or objects to classes. If a class is already bound, later calls to bind * methods are ignored. However, you can use the forceBind * methods if you need to override a binding (in tests for example). Check this sample to bind constructor functions or objects to classes, and inject them later: // Bind classes to functions (create a different instance with each `inject` call) InjectionManager . bind < Date > { java . sql . Date ( System . currentTimeMillis ()) } // Bind classes to objects (returns the same instance for all `inject` calls) InjectionManager . bindObject < String >( \"STR\" ) // You can use labels to inject different instances InjectionManager . bind < Date >( \"+1h\" ) { java . sql . Date ( System . currentTimeMillis () + 3 _600_000 ) } InjectionManager . bindObject < String >( \"toolkit\" , \"Hexagon\" ) val currentSqlDate = InjectionManager . inject < Date >() val currentSqlDateInferredType : Date = InjectionManager . inject () // Inject different values for a class using tags (can be any type, not only string) val nextHourSqlDate : Date = InjectionManager . inject ( \"+1h\" ) val nextHourSqlDateInferredType : Date = InjectionManager . inject ( \"+1h\" ) // Injecting classes bound to objects return always the same instance val defaultString = InjectionManager . inject < String >() val taggedString : String = InjectionManager . inject ( \"toolkit\" ) // Overriding previously bound classes is not allowed (ignored) InjectionManager . bindObject < String >( \"STR Ignored\" ) val ignoredBinding = InjectionManager . inject < String >() // You can overwrite previously bound classes using `forceBind*` methods InjectionManager . forceBindObject < String >( \"STR Overridden\" ) val overriddenBinding = InjectionManager . inject < String >() Serialization \u00b6 The core module has utilities to serialize/parse data classes to JSON and YAML. Read the following snippet for details: val jason = Person ( \"Jason\" , \"Jackson\" , LocalDate . of ( 1989 , 12 , 31 )) val jasonJson = jason . serialize ( Json ) // Can also be Yaml or an string: \"application/json\" val parsedJason = jasonJson . parse ( Person :: class ) assert ( jason == parsedJason ) assert ( jason !== parsedJason ) Settings \u00b6 This module helps loading external settings from different sources. You can change the settings sources, the default ones are (bottom sources override top ones): Resource / service . yaml . Environment variables starting with SERVICE_ . System properties starting with service . File . / service . yaml from the application run directory. Resource / service_test . yaml . Below there is a code fragment showing how to add a custom settings source and load its properties: SettingsManager . settingsSources += ObjectSource ( \"stringProperty\" to \"str\" , \"integerProperty\" to 101 , \"booleanProperty\" to true ) assert ( SettingsManager . settings [ \"stringProperty\" ] == \"str\" ) assert ( SettingsManager . settings [ \"integerProperty\" ] == 101 ) assert ( SettingsManager . settings [ \"booleanProperty\" ] == true ) Packages \u00b6 Name Summary com.hexagonkt.helpers JVM information, a logger class and other useful utilities. com.hexagonkt.http HTTP code shared between clients and servers and independent of third party libraries. com.hexagonkt.injection Utilities to bind classes to creation closures or instances, and inject instances of those classes later. com.hexagonkt.serialization Parse/serialize data in different formats to class instances. com.hexagonkt.settings Load settings from different data sources and formats. Index \u00b6 All Types","title":"Core"},{"location":"hexagon_core/#logger","text":"The following code block shows the most common use cases for the Logger class: val classLogger : Logger = Logger ( Runtime :: class ) // Logger for the `Runtime` class val instanceLogger : Logger = Logger ( this ) // Logger for this instance's class logger . info { \"\"\" You can add a quick log without declaring a Logger using 'com.hexagonkt.helpers.logger'. It is a default logger created for the System class (same as `Logger(System::class)`). \"\"\" } classLogger . trace { \"Message only evaluated if trace enabled at ${Jvm.id}\" } classLogger . debug { \"Message only evaluated if debug enabled at ${Jvm.id}\" } classLogger . warn { \"Message only evaluated if warn enabled at ${Jvm.id}\" } classLogger . info { \"Message only evaluated if info enabled at ${Jvm.id}\" } val exception = IllegalStateException ( \"Exception\" ) classLogger . warn ( exception ) { \"Warning with exception\" } classLogger . error ( exception ) { \"Error message with exception\" } classLogger . error { \"Error without an exception\" } classLogger . time ( \"Logs the time used to run the following block of code\" ) { val message = \"Block of code to be timed\" assert ( message . isNotBlank ()) } instanceLogger . flare { \"Prints a log that stands out for ease searching\" }","title":"Logger"},{"location":"hexagon_core/#dependency-injection","text":"You can take advantage of dependency injection using the InjectionManager object. You can bind supplier functions or objects to classes. If a class is already bound, later calls to bind * methods are ignored. However, you can use the forceBind * methods if you need to override a binding (in tests for example). Check this sample to bind constructor functions or objects to classes, and inject them later: // Bind classes to functions (create a different instance with each `inject` call) InjectionManager . bind < Date > { java . sql . Date ( System . currentTimeMillis ()) } // Bind classes to objects (returns the same instance for all `inject` calls) InjectionManager . bindObject < String >( \"STR\" ) // You can use labels to inject different instances InjectionManager . bind < Date >( \"+1h\" ) { java . sql . Date ( System . currentTimeMillis () + 3 _600_000 ) } InjectionManager . bindObject < String >( \"toolkit\" , \"Hexagon\" ) val currentSqlDate = InjectionManager . inject < Date >() val currentSqlDateInferredType : Date = InjectionManager . inject () // Inject different values for a class using tags (can be any type, not only string) val nextHourSqlDate : Date = InjectionManager . inject ( \"+1h\" ) val nextHourSqlDateInferredType : Date = InjectionManager . inject ( \"+1h\" ) // Injecting classes bound to objects return always the same instance val defaultString = InjectionManager . inject < String >() val taggedString : String = InjectionManager . inject ( \"toolkit\" ) // Overriding previously bound classes is not allowed (ignored) InjectionManager . bindObject < String >( \"STR Ignored\" ) val ignoredBinding = InjectionManager . inject < String >() // You can overwrite previously bound classes using `forceBind*` methods InjectionManager . forceBindObject < String >( \"STR Overridden\" ) val overriddenBinding = InjectionManager . inject < String >()","title":"Dependency injection"},{"location":"hexagon_core/#serialization","text":"The core module has utilities to serialize/parse data classes to JSON and YAML. Read the following snippet for details: val jason = Person ( \"Jason\" , \"Jackson\" , LocalDate . of ( 1989 , 12 , 31 )) val jasonJson = jason . serialize ( Json ) // Can also be Yaml or an string: \"application/json\" val parsedJason = jasonJson . parse ( Person :: class ) assert ( jason == parsedJason ) assert ( jason !== parsedJason )","title":"Serialization"},{"location":"hexagon_core/#settings","text":"This module helps loading external settings from different sources. You can change the settings sources, the default ones are (bottom sources override top ones): Resource / service . yaml . Environment variables starting with SERVICE_ . System properties starting with service . File . / service . yaml from the application run directory. Resource / service_test . yaml . Below there is a code fragment showing how to add a custom settings source and load its properties: SettingsManager . settingsSources += ObjectSource ( \"stringProperty\" to \"str\" , \"integerProperty\" to 101 , \"booleanProperty\" to true ) assert ( SettingsManager . settings [ \"stringProperty\" ] == \"str\" ) assert ( SettingsManager . settings [ \"integerProperty\" ] == 101 ) assert ( SettingsManager . settings [ \"booleanProperty\" ] == true )","title":"Settings"},{"location":"hexagon_core/#packages","text":"Name Summary com.hexagonkt.helpers JVM information, a logger class and other useful utilities. com.hexagonkt.http HTTP code shared between clients and servers and independent of third party libraries. com.hexagonkt.injection Utilities to bind classes to creation closures or instances, and inject instances of those classes later. com.hexagonkt.serialization Parse/serialize data in different formats to class instances. com.hexagonkt.settings Load settings from different data sources and formats.","title":"Packages"},{"location":"hexagon_core/#index","text":"All Types","title":"Index"},{"location":"hexagon_core/alltypes/","text":"This module holds utilities used in other libraries of the toolkit. Check the packages' documentation for more details. You can find a quick recap of the main features in the sections below. All Types \u00b6 Name Summary kotlin.Any (extensions in package com.hexagonkt.serialization) com.hexagonkt.helpers.CodedException Exception with a numeric code. kotlin.collections.Collection (extensions in package com.hexagonkt.helpers) com.hexagonkt.settings.CommandLineArgumentsSource com.hexagonkt.serialization.ContentType com.hexagonkt.serialization.Csv java.util.Date (extensions in package com.hexagonkt.helpers) com.hexagonkt.settings.EnvironmentVariablesSource java.io.File (extensions in package com.hexagonkt.serialization) com.hexagonkt.settings.FileSource com.hexagonkt.injection.InjectionManager Generators registry and utilities. This object keep tracks of supplier functions or specific objects bound to classes. Different suppliers can be bound to the same type using 'tags'. java.io.InputStream (extensions in package com.hexagonkt.serialization) kotlin.Int (extensions in package com.hexagonkt.helpers) com.hexagonkt.serialization.Json com.hexagonkt.helpers.Jvm kotlin.collections.List (extensions in package com.hexagonkt.helpers) kotlin.collections.List (extensions in package com.hexagonkt.serialization) java.time.LocalDate (extensions in package com.hexagonkt.helpers) java.time.LocalDateTime (extensions in package com.hexagonkt.helpers) java.time.LocalTime (extensions in package com.hexagonkt.helpers) com.hexagonkt.helpers.Logger Logger class with Kotlin improvements like lazy evaluation. It is backed by a SLF4J compatible logger. kotlin.Long (extensions in package com.hexagonkt.helpers) kotlin.collections.Map (extensions in package com.hexagonkt.helpers) kotlin.collections.Map (extensions in package com.hexagonkt.serialization) com.hexagonkt.http.Method Enum for the supported HTTP methods. com.hexagonkt.helpers.MultipleException Exception with a list of causes. Cause is null as it can't be tell which one of the list is the cause. com.hexagonkt.settings.ObjectSource com.hexagonkt.serialization.ParseException com.hexagonkt.http.Path A path definition. It parses path patterns and extract values for parameters. kotlin.text.Regex (extensions in package com.hexagonkt.helpers) com.hexagonkt.helpers.RequiredKeysMap com.hexagonkt.helpers.Resource Absolute resource (start from root package without starting slash). Ie: foo/bar/res.txt instead /foo/bar/res.txt com.hexagonkt.settings.ResourceSource com.hexagonkt.http.Route com.hexagonkt.serialization.SerializationFormat com.hexagonkt.serialization.SerializationManager TODO com.hexagonkt.settings.SettingsManager com.hexagonkt.settings.SettingsSource kotlin.String (extensions in package com.hexagonkt.helpers) kotlin.String (extensions in package com.hexagonkt.http) kotlin.String (extensions in package com.hexagonkt.serialization) com.hexagonkt.helpers.StringsSamplesTest com.hexagonkt.settings.SystemPropertiesSource kotlin.Throwable (extensions in package com.hexagonkt.helpers) java.net.URL (extensions in package com.hexagonkt.serialization) com.hexagonkt.serialization.Yaml java.time.ZonedDateTime (extensions in package com.hexagonkt.helpers)","title":"Home"},{"location":"hexagon_core/alltypes/#all-types","text":"Name Summary kotlin.Any (extensions in package com.hexagonkt.serialization) com.hexagonkt.helpers.CodedException Exception with a numeric code. kotlin.collections.Collection (extensions in package com.hexagonkt.helpers) com.hexagonkt.settings.CommandLineArgumentsSource com.hexagonkt.serialization.ContentType com.hexagonkt.serialization.Csv java.util.Date (extensions in package com.hexagonkt.helpers) com.hexagonkt.settings.EnvironmentVariablesSource java.io.File (extensions in package com.hexagonkt.serialization) com.hexagonkt.settings.FileSource com.hexagonkt.injection.InjectionManager Generators registry and utilities. This object keep tracks of supplier functions or specific objects bound to classes. Different suppliers can be bound to the same type using 'tags'. java.io.InputStream (extensions in package com.hexagonkt.serialization) kotlin.Int (extensions in package com.hexagonkt.helpers) com.hexagonkt.serialization.Json com.hexagonkt.helpers.Jvm kotlin.collections.List (extensions in package com.hexagonkt.helpers) kotlin.collections.List (extensions in package com.hexagonkt.serialization) java.time.LocalDate (extensions in package com.hexagonkt.helpers) java.time.LocalDateTime (extensions in package com.hexagonkt.helpers) java.time.LocalTime (extensions in package com.hexagonkt.helpers) com.hexagonkt.helpers.Logger Logger class with Kotlin improvements like lazy evaluation. It is backed by a SLF4J compatible logger. kotlin.Long (extensions in package com.hexagonkt.helpers) kotlin.collections.Map (extensions in package com.hexagonkt.helpers) kotlin.collections.Map (extensions in package com.hexagonkt.serialization) com.hexagonkt.http.Method Enum for the supported HTTP methods. com.hexagonkt.helpers.MultipleException Exception with a list of causes. Cause is null as it can't be tell which one of the list is the cause. com.hexagonkt.settings.ObjectSource com.hexagonkt.serialization.ParseException com.hexagonkt.http.Path A path definition. It parses path patterns and extract values for parameters. kotlin.text.Regex (extensions in package com.hexagonkt.helpers) com.hexagonkt.helpers.RequiredKeysMap com.hexagonkt.helpers.Resource Absolute resource (start from root package without starting slash). Ie: foo/bar/res.txt instead /foo/bar/res.txt com.hexagonkt.settings.ResourceSource com.hexagonkt.http.Route com.hexagonkt.serialization.SerializationFormat com.hexagonkt.serialization.SerializationManager TODO com.hexagonkt.settings.SettingsManager com.hexagonkt.settings.SettingsSource kotlin.String (extensions in package com.hexagonkt.helpers) kotlin.String (extensions in package com.hexagonkt.http) kotlin.String (extensions in package com.hexagonkt.serialization) com.hexagonkt.helpers.StringsSamplesTest com.hexagonkt.settings.SystemPropertiesSource kotlin.Throwable (extensions in package com.hexagonkt.helpers) java.net.URL (extensions in package com.hexagonkt.serialization) com.hexagonkt.serialization.Yaml java.time.ZonedDateTime (extensions in package com.hexagonkt.helpers)","title":"All Types"},{"location":"hexagon_core/com.hexagonkt.helpers/","text":"com.hexagonkt.helpers Package com.hexagonkt.helpers \u00b6 JVM information, a logger class and other useful utilities. Types \u00b6 Name Summary Jvm object Jvm Logger class Logger Logger class with Kotlin improvements like lazy evaluation. It is backed by a SLF4J compatible logger. RequiredKeysMap class RequiredKeysMap <K, V> : Map < K , V > Resource class Resource Absolute resource (start from root package without starting slash). Ie: foo/bar/res.txt instead /foo/bar/res.txt StringsSamplesTest class StringsSamplesTest Exceptions \u00b6 Name Summary CodedException class CodedException : RuntimeException Exception with a numeric code. MultipleException class MultipleException : RuntimeException Exception with a list of causes. Cause is null as it can't be tell which one of the list is the cause. Extensions for External Classes \u00b6 Name Summary java.time.LocalDate java.time.LocalDateTime java.time.LocalTime java.time.ZonedDateTime java.util.Date kotlin.collections.Collection kotlin.collections.List kotlin.collections.Map kotlin.Int kotlin.Long kotlin.String kotlin.text.Regex kotlin.Throwable Properties \u00b6 Name Summary eol val eol: String Runtime specific end of line. error val error: Nothing Syntax sugar to throw errors. logger val logger: Logger Default logger when you are lazy to declare one. Functions \u00b6 Name Summary error fun error (): Nothing Syntax sugar to throw errors. notEmpty fun < V > notEmpty ( it : V ): Boolean retry fun < T > retry ( times : Int , delay : Long , func : () -> T ): T Executes a lambda until no exception is thrown or a number of times is reached. utf8 fun utf8 ( vararg bytes : Int ): String","title":"Home"},{"location":"hexagon_core/com.hexagonkt.helpers/#package-comhexagonkthelpers","text":"JVM information, a logger class and other useful utilities.","title":"Package com.hexagonkt.helpers"},{"location":"hexagon_core/com.hexagonkt.helpers/#types","text":"Name Summary Jvm object Jvm Logger class Logger Logger class with Kotlin improvements like lazy evaluation. It is backed by a SLF4J compatible logger. RequiredKeysMap class RequiredKeysMap <K, V> : Map < K , V > Resource class Resource Absolute resource (start from root package without starting slash). Ie: foo/bar/res.txt instead /foo/bar/res.txt StringsSamplesTest class StringsSamplesTest","title":"Types"},{"location":"hexagon_core/com.hexagonkt.helpers/#exceptions","text":"Name Summary CodedException class CodedException : RuntimeException Exception with a numeric code. MultipleException class MultipleException : RuntimeException Exception with a list of causes. Cause is null as it can't be tell which one of the list is the cause.","title":"Exceptions"},{"location":"hexagon_core/com.hexagonkt.helpers/#extensions-for-external-classes","text":"Name Summary java.time.LocalDate java.time.LocalDateTime java.time.LocalTime java.time.ZonedDateTime java.util.Date kotlin.collections.Collection kotlin.collections.List kotlin.collections.Map kotlin.Int kotlin.Long kotlin.String kotlin.text.Regex kotlin.Throwable","title":"Extensions for External Classes"},{"location":"hexagon_core/com.hexagonkt.helpers/#properties","text":"Name Summary eol val eol: String Runtime specific end of line. error val error: Nothing Syntax sugar to throw errors. logger val logger: Logger Default logger when you are lazy to declare one.","title":"Properties"},{"location":"hexagon_core/com.hexagonkt.helpers/#functions","text":"Name Summary error fun error (): Nothing Syntax sugar to throw errors. notEmpty fun < V > notEmpty ( it : V ): Boolean retry fun < T > retry ( times : Int , delay : Long , func : () -> T ): T Executes a lambda until no exception is thrown or a number of times is reached. utf8 fun utf8 ( vararg bytes : Int ): String","title":"Functions"},{"location":"hexagon_core/com.hexagonkt.helpers/eol/","text":"com.hexagonkt.helpers / eol eol \u00b6 val eol: String Runtime specific end of line. Getter Runtime specific end of line.","title":"Eol"},{"location":"hexagon_core/com.hexagonkt.helpers/eol/#eol","text":"val eol: String Runtime specific end of line. Getter Runtime specific end of line.","title":"eol"},{"location":"hexagon_core/com.hexagonkt.helpers/error/","text":"com.hexagonkt.helpers / error error \u00b6 val error: Nothing fun error (): Nothing Syntax sugar to throw errors.","title":"Error"},{"location":"hexagon_core/com.hexagonkt.helpers/error/#error","text":"val error: Nothing fun error (): Nothing Syntax sugar to throw errors.","title":"error"},{"location":"hexagon_core/com.hexagonkt.helpers/logger/","text":"com.hexagonkt.helpers / logger logger \u00b6 val logger: Logger Default logger when you are lazy to declare one.","title":"Logger"},{"location":"hexagon_core/com.hexagonkt.helpers/logger/#logger","text":"val logger: Logger Default logger when you are lazy to declare one.","title":"logger"},{"location":"hexagon_core/com.hexagonkt.helpers/not-empty/","text":"com.hexagonkt.helpers / notEmpty notEmpty \u00b6 fun < V > notEmpty ( it : V ): Boolean","title":"Not empty"},{"location":"hexagon_core/com.hexagonkt.helpers/not-empty/#notempty","text":"fun < V > notEmpty ( it : V ): Boolean","title":"notEmpty"},{"location":"hexagon_core/com.hexagonkt.helpers/retry/","text":"com.hexagonkt.helpers / retry retry \u00b6 fun < T > retry ( times : Int , delay : Long , func : () -> T ): T Executes a lambda until no exception is thrown or a number of times is reached. Parameters \u00b6 times - Number of times to try to execute the callback. Must be greater than 0. delay - Milliseconds to wait to next execution if there was an error. Must be 0 or greater. Exceptions \u00b6 CodedException - if the callback didn't succeed in the given times. Return The callback result if succeed.","title":"Retry"},{"location":"hexagon_core/com.hexagonkt.helpers/retry/#retry","text":"fun < T > retry ( times : Int , delay : Long , func : () -> T ): T Executes a lambda until no exception is thrown or a number of times is reached.","title":"retry"},{"location":"hexagon_core/com.hexagonkt.helpers/retry/#parameters","text":"times - Number of times to try to execute the callback. Must be greater than 0. delay - Milliseconds to wait to next execution if there was an error. Must be 0 or greater.","title":"Parameters"},{"location":"hexagon_core/com.hexagonkt.helpers/retry/#exceptions","text":"CodedException - if the callback didn't succeed in the given times. Return The callback result if succeed.","title":"Exceptions"},{"location":"hexagon_core/com.hexagonkt.helpers/utf8/","text":"com.hexagonkt.helpers / utf8 utf8 \u00b6 fun utf8 ( vararg bytes : Int ): String","title":"Utf8"},{"location":"hexagon_core/com.hexagonkt.helpers/utf8/#utf8","text":"fun utf8 ( vararg bytes : Int ): String","title":"utf8"},{"location":"hexagon_core/com.hexagonkt.helpers/-coded-exception/","text":"com.hexagonkt.helpers / CodedException CodedException \u00b6 class CodedException : RuntimeException Exception with a numeric code. Constructors \u00b6 Name Summary <init> CodedException ( code : Int , message : String = \"\" , cause : Throwable ? = null ) Exception with a numeric code. Properties \u00b6 Name Summary code val code: Int Extension Functions \u00b6 Name Summary convertToMap fun Any .convertToMap (): Map <* , *> filterStackTrace fun Throwable .filterStackTrace ( prefix : String ): Array < out StackTraceElement > Returns the stack trace array of the frames that starts with the given prefix. serialize fun Any .serialize ( format : SerializationFormat = defaultFormat ): String fun Any .serialize ( contentType : String ): String toText fun Throwable .toText ( prefix : String = \"\" ): String Returns this throwable as a text.","title":"Home"},{"location":"hexagon_core/com.hexagonkt.helpers/-coded-exception/#codedexception","text":"class CodedException : RuntimeException Exception with a numeric code.","title":"CodedException"},{"location":"hexagon_core/com.hexagonkt.helpers/-coded-exception/#constructors","text":"Name Summary <init> CodedException ( code : Int , message : String = \"\" , cause : Throwable ? = null ) Exception with a numeric code.","title":"Constructors"},{"location":"hexagon_core/com.hexagonkt.helpers/-coded-exception/#properties","text":"Name Summary code val code: Int","title":"Properties"},{"location":"hexagon_core/com.hexagonkt.helpers/-coded-exception/#extension-functions","text":"Name Summary convertToMap fun Any .convertToMap (): Map <* , *> filterStackTrace fun Throwable .filterStackTrace ( prefix : String ): Array < out StackTraceElement > Returns the stack trace array of the frames that starts with the given prefix. serialize fun Any .serialize ( format : SerializationFormat = defaultFormat ): String fun Any .serialize ( contentType : String ): String toText fun Throwable .toText ( prefix : String = \"\" ): String Returns this throwable as a text.","title":"Extension Functions"},{"location":"hexagon_core/com.hexagonkt.helpers/-coded-exception/-init-/","text":"com.hexagonkt.helpers / CodedException / <init> <init> \u00b6 CodedException ( code : Int , message : String = \"\" , cause : Throwable ? = null ) Exception with a numeric code.","title":" init "},{"location":"hexagon_core/com.hexagonkt.helpers/-coded-exception/-init-/#init","text":"CodedException ( code : Int , message : String = \"\" , cause : Throwable ? = null ) Exception with a numeric code.","title":"&lt;init&gt;"},{"location":"hexagon_core/com.hexagonkt.helpers/-coded-exception/code/","text":"com.hexagonkt.helpers / CodedException / code code \u00b6 val code: Int","title":"Code"},{"location":"hexagon_core/com.hexagonkt.helpers/-coded-exception/code/#code","text":"val code: Int","title":"code"},{"location":"hexagon_core/com.hexagonkt.helpers/-jvm/","text":"com.hexagonkt.helpers / Jvm Jvm \u00b6 object Jvm Properties \u00b6 Name Summary charset val charset: Charset Default character set. cpuCount val cpuCount: Int hostname val hostname: String The hostname of the machine running this program. id val id: String ip val ip: String The IP address of the machine running this program. locale val locale: String name val name: String timeZone val timeZone: TimeZone Default timezone. timezone val timezone: String version val version: String Functions \u00b6 Name Summary initialMemory fun initialMemory (): String systemSetting fun systemSetting ( name : String ): String ? fun systemSetting ( name : String , default : String ): String uptime fun uptime () : String usedMemory fun usedMemory (): String Extension Functions \u00b6 Name Summary convertToMap fun Any .convertToMap (): Map <* , *> serialize fun Any .serialize ( format : SerializationFormat = defaultFormat ): String fun Any .serialize ( contentType : String ): String","title":"Home"},{"location":"hexagon_core/com.hexagonkt.helpers/-jvm/#jvm","text":"object Jvm","title":"Jvm"},{"location":"hexagon_core/com.hexagonkt.helpers/-jvm/#properties","text":"Name Summary charset val charset: Charset Default character set. cpuCount val cpuCount: Int hostname val hostname: String The hostname of the machine running this program. id val id: String ip val ip: String The IP address of the machine running this program. locale val locale: String name val name: String timeZone val timeZone: TimeZone Default timezone. timezone val timezone: String version val version: String","title":"Properties"},{"location":"hexagon_core/com.hexagonkt.helpers/-jvm/#functions","text":"Name Summary initialMemory fun initialMemory (): String systemSetting fun systemSetting ( name : String ): String ? fun systemSetting ( name : String , default : String ): String uptime fun uptime () : String usedMemory fun usedMemory (): String","title":"Functions"},{"location":"hexagon_core/com.hexagonkt.helpers/-jvm/#extension-functions","text":"Name Summary convertToMap fun Any .convertToMap (): Map <* , *> serialize fun Any .serialize ( format : SerializationFormat = defaultFormat ): String fun Any .serialize ( contentType : String ): String","title":"Extension Functions"},{"location":"hexagon_core/com.hexagonkt.helpers/-jvm/charset/","text":"com.hexagonkt.helpers / Jvm / charset charset \u00b6 val charset: Charset Default character set. Getter Default character set.","title":"Charset"},{"location":"hexagon_core/com.hexagonkt.helpers/-jvm/charset/#charset","text":"val charset: Charset Default character set. Getter Default character set.","title":"charset"},{"location":"hexagon_core/com.hexagonkt.helpers/-jvm/cpu-count/","text":"com.hexagonkt.helpers / Jvm / cpuCount cpuCount \u00b6 val cpuCount: Int","title":"Cpu count"},{"location":"hexagon_core/com.hexagonkt.helpers/-jvm/cpu-count/#cpucount","text":"val cpuCount: Int","title":"cpuCount"},{"location":"hexagon_core/com.hexagonkt.helpers/-jvm/hostname/","text":"com.hexagonkt.helpers / Jvm / hostname hostname \u00b6 val hostname: String The hostname of the machine running this program.","title":"Hostname"},{"location":"hexagon_core/com.hexagonkt.helpers/-jvm/hostname/#hostname","text":"val hostname: String The hostname of the machine running this program.","title":"hostname"},{"location":"hexagon_core/com.hexagonkt.helpers/-jvm/id/","text":"com.hexagonkt.helpers / Jvm / id id \u00b6 val id: String","title":"Id"},{"location":"hexagon_core/com.hexagonkt.helpers/-jvm/id/#id","text":"val id: String","title":"id"},{"location":"hexagon_core/com.hexagonkt.helpers/-jvm/initial-memory/","text":"com.hexagonkt.helpers / Jvm / initialMemory initialMemory \u00b6 fun initialMemory (): String","title":"Initial memory"},{"location":"hexagon_core/com.hexagonkt.helpers/-jvm/initial-memory/#initialmemory","text":"fun initialMemory (): String","title":"initialMemory"},{"location":"hexagon_core/com.hexagonkt.helpers/-jvm/ip/","text":"com.hexagonkt.helpers / Jvm / ip ip \u00b6 val ip: String The IP address of the machine running this program.","title":"Ip"},{"location":"hexagon_core/com.hexagonkt.helpers/-jvm/ip/#ip","text":"val ip: String The IP address of the machine running this program.","title":"ip"},{"location":"hexagon_core/com.hexagonkt.helpers/-jvm/locale/","text":"com.hexagonkt.helpers / Jvm / locale locale \u00b6 val locale: String","title":"Locale"},{"location":"hexagon_core/com.hexagonkt.helpers/-jvm/locale/#locale","text":"val locale: String","title":"locale"},{"location":"hexagon_core/com.hexagonkt.helpers/-jvm/name/","text":"com.hexagonkt.helpers / Jvm / name name \u00b6 val name: String","title":"Name"},{"location":"hexagon_core/com.hexagonkt.helpers/-jvm/name/#name","text":"val name: String","title":"name"},{"location":"hexagon_core/com.hexagonkt.helpers/-jvm/system-setting/","text":"com.hexagonkt.helpers / Jvm / systemSetting systemSetting \u00b6 fun systemSetting ( name : String ): String ? fun systemSetting ( name : String , default : String ): String","title":"System setting"},{"location":"hexagon_core/com.hexagonkt.helpers/-jvm/system-setting/#systemsetting","text":"fun systemSetting ( name : String ): String ? fun systemSetting ( name : String , default : String ): String","title":"systemSetting"},{"location":"hexagon_core/com.hexagonkt.helpers/-jvm/time-zone/","text":"com.hexagonkt.helpers / Jvm / timeZone timeZone \u00b6 val timeZone: TimeZone Default timezone.","title":"Time zone"},{"location":"hexagon_core/com.hexagonkt.helpers/-jvm/time-zone/#timezone","text":"val timeZone: TimeZone Default timezone.","title":"timeZone"},{"location":"hexagon_core/com.hexagonkt.helpers/-jvm/timezone/","text":"com.hexagonkt.helpers / Jvm / timezone timezone \u00b6 val timezone: String","title":"Timezone"},{"location":"hexagon_core/com.hexagonkt.helpers/-jvm/timezone/#timezone","text":"val timezone: String","title":"timezone"},{"location":"hexagon_core/com.hexagonkt.helpers/-jvm/uptime/","text":"com.hexagonkt.helpers / Jvm / uptime uptime \u00b6 fun uptime () : String","title":"Uptime"},{"location":"hexagon_core/com.hexagonkt.helpers/-jvm/uptime/#uptime","text":"fun uptime () : String","title":"uptime"},{"location":"hexagon_core/com.hexagonkt.helpers/-jvm/used-memory/","text":"com.hexagonkt.helpers / Jvm / usedMemory usedMemory \u00b6 fun usedMemory (): String","title":"Used memory"},{"location":"hexagon_core/com.hexagonkt.helpers/-jvm/used-memory/#usedmemory","text":"fun usedMemory (): String","title":"usedMemory"},{"location":"hexagon_core/com.hexagonkt.helpers/-jvm/version/","text":"com.hexagonkt.helpers / Jvm / version version \u00b6 val version: String","title":"Version"},{"location":"hexagon_core/com.hexagonkt.helpers/-jvm/version/#version","text":"val version: String","title":"version"},{"location":"hexagon_core/com.hexagonkt.helpers/-logger/","text":"com.hexagonkt.helpers / Logger Logger \u00b6 class Logger Logger class with Kotlin improvements like lazy evaluation. It is backed by a SLF4J compatible logger. Usage example: // logger val classLogger : Logger = Logger ( Runtime :: class ) // Logger for the `Runtime` class val instanceLogger : Logger = Logger ( this ) // Logger for this instance's class logger . info { \"\"\" You can add a quick log without declaring a Logger using 'com.hexagonkt.helpers.logger'. It is a default logger created for the System class (same as `Logger(System::class)`). \"\"\" } classLogger . trace { \"Message only evaluated if trace enabled at ${Jvm.id}\" } classLogger . debug { \"Message only evaluated if debug enabled at ${Jvm.id}\" } classLogger . warn { \"Message only evaluated if warn enabled at ${Jvm.id}\" } classLogger . info { \"Message only evaluated if info enabled at ${Jvm.id}\" } val exception = IllegalStateException ( \"Exception\" ) classLogger . warn ( exception ) { \"Warning with exception\" } classLogger . error ( exception ) { \"Error message with exception\" } classLogger . error { \"Error without an exception\" } classLogger . time ( \"Logs the time used to run the following block of code\" ) { val message = \"Block of code to be timed\" assert ( message . isNotBlank ()) } instanceLogger . flare { \"Prints a log that stands out for ease searching\" } // logger Parameters \u00b6 type - Logger type. It is shown in the logs messages and used for log filtering. Constructors \u00b6 Name Summary <init> Logger ( instance : Any ) `` Logger ( type : KClass <*> ) Logger class with Kotlin improvements like lazy evaluation. It is backed by a SLF4J compatible logger. Functions \u00b6 Name Summary debug fun debug ( message : () -> Any ? ): Unit error fun error ( message : () -> Any ? ): Unit fun < E : Throwable > error ( exception : E , message : ( E ) -> Any ? ): Unit flare fun flare ( message : () -> Any ? = { \"\" } ): Unit info fun info ( message : () -> Any ? ): Unit time fun time ( startNanos : Long , message : () -> Any ? = { \"\" } ): Unit fun < T > time ( message : () -> Any ? = { null } , block : () -> T ): T fun < T > time ( message : Any ? , block : () -> T ): T trace fun trace ( message : () -> Any ? ): Unit warn fun warn ( message : () -> Any ? ): Unit fun < E : Throwable > warn ( exception : E , message : ( E ) -> Any ? ): Unit Extension Functions \u00b6 Name Summary convertToMap fun Any .convertToMap (): Map <* , *> serialize fun Any .serialize ( format : SerializationFormat = defaultFormat ): String fun Any .serialize ( contentType : String ): String","title":"Home"},{"location":"hexagon_core/com.hexagonkt.helpers/-logger/#logger","text":"class Logger Logger class with Kotlin improvements like lazy evaluation. It is backed by a SLF4J compatible logger. Usage example: // logger val classLogger : Logger = Logger ( Runtime :: class ) // Logger for the `Runtime` class val instanceLogger : Logger = Logger ( this ) // Logger for this instance's class logger . info { \"\"\" You can add a quick log without declaring a Logger using 'com.hexagonkt.helpers.logger'. It is a default logger created for the System class (same as `Logger(System::class)`). \"\"\" } classLogger . trace { \"Message only evaluated if trace enabled at ${Jvm.id}\" } classLogger . debug { \"Message only evaluated if debug enabled at ${Jvm.id}\" } classLogger . warn { \"Message only evaluated if warn enabled at ${Jvm.id}\" } classLogger . info { \"Message only evaluated if info enabled at ${Jvm.id}\" } val exception = IllegalStateException ( \"Exception\" ) classLogger . warn ( exception ) { \"Warning with exception\" } classLogger . error ( exception ) { \"Error message with exception\" } classLogger . error { \"Error without an exception\" } classLogger . time ( \"Logs the time used to run the following block of code\" ) { val message = \"Block of code to be timed\" assert ( message . isNotBlank ()) } instanceLogger . flare { \"Prints a log that stands out for ease searching\" } // logger","title":"Logger"},{"location":"hexagon_core/com.hexagonkt.helpers/-logger/#parameters","text":"type - Logger type. It is shown in the logs messages and used for log filtering.","title":"Parameters"},{"location":"hexagon_core/com.hexagonkt.helpers/-logger/#constructors","text":"Name Summary <init> Logger ( instance : Any ) `` Logger ( type : KClass <*> ) Logger class with Kotlin improvements like lazy evaluation. It is backed by a SLF4J compatible logger.","title":"Constructors"},{"location":"hexagon_core/com.hexagonkt.helpers/-logger/#functions","text":"Name Summary debug fun debug ( message : () -> Any ? ): Unit error fun error ( message : () -> Any ? ): Unit fun < E : Throwable > error ( exception : E , message : ( E ) -> Any ? ): Unit flare fun flare ( message : () -> Any ? = { \"\" } ): Unit info fun info ( message : () -> Any ? ): Unit time fun time ( startNanos : Long , message : () -> Any ? = { \"\" } ): Unit fun < T > time ( message : () -> Any ? = { null } , block : () -> T ): T fun < T > time ( message : Any ? , block : () -> T ): T trace fun trace ( message : () -> Any ? ): Unit warn fun warn ( message : () -> Any ? ): Unit fun < E : Throwable > warn ( exception : E , message : ( E ) -> Any ? ): Unit","title":"Functions"},{"location":"hexagon_core/com.hexagonkt.helpers/-logger/#extension-functions","text":"Name Summary convertToMap fun Any .convertToMap (): Map <* , *> serialize fun Any .serialize ( format : SerializationFormat = defaultFormat ): String fun Any .serialize ( contentType : String ): String","title":"Extension Functions"},{"location":"hexagon_core/com.hexagonkt.helpers/-logger/-init-/","text":"com.hexagonkt.helpers / Logger / <init> <init> \u00b6 Logger ( instance : Any ) `` Logger ( type : KClass <*> ) Logger class with Kotlin improvements like lazy evaluation. It is backed by a SLF4J compatible logger. Usage example: // logger val classLogger : Logger = Logger ( Runtime :: class ) // Logger for the `Runtime` class val instanceLogger : Logger = Logger ( this ) // Logger for this instance's class logger . info { \"\"\" You can add a quick log without declaring a Logger using 'com.hexagonkt.helpers.logger'. It is a default logger created for the System class (same as `Logger(System::class)`). \"\"\" } classLogger . trace { \"Message only evaluated if trace enabled at ${Jvm.id}\" } classLogger . debug { \"Message only evaluated if debug enabled at ${Jvm.id}\" } classLogger . warn { \"Message only evaluated if warn enabled at ${Jvm.id}\" } classLogger . info { \"Message only evaluated if info enabled at ${Jvm.id}\" } val exception = IllegalStateException ( \"Exception\" ) classLogger . warn ( exception ) { \"Warning with exception\" } classLogger . error ( exception ) { \"Error message with exception\" } classLogger . error { \"Error without an exception\" } classLogger . time ( \"Logs the time used to run the following block of code\" ) { val message = \"Block of code to be timed\" assert ( message . isNotBlank ()) } instanceLogger . flare { \"Prints a log that stands out for ease searching\" } // logger Parameters \u00b6 type - Logger type. It is shown in the logs messages and used for log filtering.","title":" init "},{"location":"hexagon_core/com.hexagonkt.helpers/-logger/-init-/#init","text":"Logger ( instance : Any ) `` Logger ( type : KClass <*> ) Logger class with Kotlin improvements like lazy evaluation. It is backed by a SLF4J compatible logger. Usage example: // logger val classLogger : Logger = Logger ( Runtime :: class ) // Logger for the `Runtime` class val instanceLogger : Logger = Logger ( this ) // Logger for this instance's class logger . info { \"\"\" You can add a quick log without declaring a Logger using 'com.hexagonkt.helpers.logger'. It is a default logger created for the System class (same as `Logger(System::class)`). \"\"\" } classLogger . trace { \"Message only evaluated if trace enabled at ${Jvm.id}\" } classLogger . debug { \"Message only evaluated if debug enabled at ${Jvm.id}\" } classLogger . warn { \"Message only evaluated if warn enabled at ${Jvm.id}\" } classLogger . info { \"Message only evaluated if info enabled at ${Jvm.id}\" } val exception = IllegalStateException ( \"Exception\" ) classLogger . warn ( exception ) { \"Warning with exception\" } classLogger . error ( exception ) { \"Error message with exception\" } classLogger . error { \"Error without an exception\" } classLogger . time ( \"Logs the time used to run the following block of code\" ) { val message = \"Block of code to be timed\" assert ( message . isNotBlank ()) } instanceLogger . flare { \"Prints a log that stands out for ease searching\" } // logger","title":"&lt;init&gt;"},{"location":"hexagon_core/com.hexagonkt.helpers/-logger/-init-/#parameters","text":"type - Logger type. It is shown in the logs messages and used for log filtering.","title":"Parameters"},{"location":"hexagon_core/com.hexagonkt.helpers/-logger/debug/","text":"com.hexagonkt.helpers / Logger / debug debug \u00b6 fun debug ( message : () -> Any ? ): Unit","title":"Debug"},{"location":"hexagon_core/com.hexagonkt.helpers/-logger/debug/#debug","text":"fun debug ( message : () -> Any ? ): Unit","title":"debug"},{"location":"hexagon_core/com.hexagonkt.helpers/-logger/error/","text":"com.hexagonkt.helpers / Logger / error error \u00b6 fun error ( message : () -> Any ? ): Unit fun < E : Throwable > error ( exception : E , message : ( E ) -> Any ? ): Unit","title":"Error"},{"location":"hexagon_core/com.hexagonkt.helpers/-logger/error/#error","text":"fun error ( message : () -> Any ? ): Unit fun < E : Throwable > error ( exception : E , message : ( E ) -> Any ? ): Unit","title":"error"},{"location":"hexagon_core/com.hexagonkt.helpers/-logger/flare/","text":"com.hexagonkt.helpers / Logger / flare flare \u00b6 fun flare ( message : () -> Any ? = { \"\" } ): Unit","title":"Flare"},{"location":"hexagon_core/com.hexagonkt.helpers/-logger/flare/#flare","text":"fun flare ( message : () -> Any ? = { \"\" } ): Unit","title":"flare"},{"location":"hexagon_core/com.hexagonkt.helpers/-logger/info/","text":"com.hexagonkt.helpers / Logger / info info \u00b6 fun info ( message : () -> Any ? ): Unit","title":"Info"},{"location":"hexagon_core/com.hexagonkt.helpers/-logger/info/#info","text":"fun info ( message : () -> Any ? ): Unit","title":"info"},{"location":"hexagon_core/com.hexagonkt.helpers/-logger/time/","text":"com.hexagonkt.helpers / Logger / time time \u00b6 fun time ( startNanos : Long , message : () -> Any ? = { \"\" } ): Unit fun < T > time ( message : () -> Any ? = { null } , block : () -> T ): T fun < T > time ( message : Any ? , block : () -> T ): T","title":"Time"},{"location":"hexagon_core/com.hexagonkt.helpers/-logger/time/#time","text":"fun time ( startNanos : Long , message : () -> Any ? = { \"\" } ): Unit fun < T > time ( message : () -> Any ? = { null } , block : () -> T ): T fun < T > time ( message : Any ? , block : () -> T ): T","title":"time"},{"location":"hexagon_core/com.hexagonkt.helpers/-logger/trace/","text":"com.hexagonkt.helpers / Logger / trace trace \u00b6 fun trace ( message : () -> Any ? ): Unit","title":"Trace"},{"location":"hexagon_core/com.hexagonkt.helpers/-logger/trace/#trace","text":"fun trace ( message : () -> Any ? ): Unit","title":"trace"},{"location":"hexagon_core/com.hexagonkt.helpers/-logger/warn/","text":"com.hexagonkt.helpers / Logger / warn warn \u00b6 fun warn ( message : () -> Any ? ): Unit fun < E : Throwable > warn ( exception : E , message : ( E ) -> Any ? ): Unit","title":"Warn"},{"location":"hexagon_core/com.hexagonkt.helpers/-logger/warn/#warn","text":"fun warn ( message : () -> Any ? ): Unit fun < E : Throwable > warn ( exception : E , message : ( E ) -> Any ? ): Unit","title":"warn"},{"location":"hexagon_core/com.hexagonkt.helpers/-multiple-exception/","text":"com.hexagonkt.helpers / MultipleException MultipleException \u00b6 class MultipleException : RuntimeException Exception with a list of causes. Cause is null as it can't be tell which one of the list is the cause. A coded multiple exception should be created this way: CodedException(400, \"Many errors\", MultipleException()) To pass a list of causes CodedException (500, \"Error\", *list) Constructors \u00b6 Name Summary <init> MultipleException ( vararg causes : Throwable ) MultipleException ( message : String , causes : List < Throwable > ) MultipleException ( message : String , vararg causes : Throwable ) `` MultipleException ( causes : List < Throwable > , message : String = \"\" ) Exception with a list of causes. Cause is null as it can't be tell which one of the list is the cause. Properties \u00b6 Name Summary causes val causes: List < Throwable > Extension Functions \u00b6 Name Summary convertToMap fun Any .convertToMap (): Map <* , *> filterStackTrace fun Throwable .filterStackTrace ( prefix : String ): Array < out StackTraceElement > Returns the stack trace array of the frames that starts with the given prefix. serialize fun Any .serialize ( format : SerializationFormat = defaultFormat ): String fun Any .serialize ( contentType : String ): String toText fun Throwable .toText ( prefix : String = \"\" ): String Returns this throwable as a text.","title":"Home"},{"location":"hexagon_core/com.hexagonkt.helpers/-multiple-exception/#multipleexception","text":"class MultipleException : RuntimeException Exception with a list of causes. Cause is null as it can't be tell which one of the list is the cause. A coded multiple exception should be created this way: CodedException(400, \"Many errors\", MultipleException()) To pass a list of causes CodedException (500, \"Error\", *list)","title":"MultipleException"},{"location":"hexagon_core/com.hexagonkt.helpers/-multiple-exception/#constructors","text":"Name Summary <init> MultipleException ( vararg causes : Throwable ) MultipleException ( message : String , causes : List < Throwable > ) MultipleException ( message : String , vararg causes : Throwable ) `` MultipleException ( causes : List < Throwable > , message : String = \"\" ) Exception with a list of causes. Cause is null as it can't be tell which one of the list is the cause.","title":"Constructors"},{"location":"hexagon_core/com.hexagonkt.helpers/-multiple-exception/#properties","text":"Name Summary causes val causes: List < Throwable >","title":"Properties"},{"location":"hexagon_core/com.hexagonkt.helpers/-multiple-exception/#extension-functions","text":"Name Summary convertToMap fun Any .convertToMap (): Map <* , *> filterStackTrace fun Throwable .filterStackTrace ( prefix : String ): Array < out StackTraceElement > Returns the stack trace array of the frames that starts with the given prefix. serialize fun Any .serialize ( format : SerializationFormat = defaultFormat ): String fun Any .serialize ( contentType : String ): String toText fun Throwable .toText ( prefix : String = \"\" ): String Returns this throwable as a text.","title":"Extension Functions"},{"location":"hexagon_core/com.hexagonkt.helpers/-multiple-exception/-init-/","text":"com.hexagonkt.helpers / MultipleException / <init> <init> \u00b6 MultipleException ( vararg causes : Throwable ) MultipleException ( message : String , causes : List < Throwable > ) MultipleException ( message : String , vararg causes : Throwable ) `` MultipleException ( causes : List < Throwable > , message : String = \"\" ) Exception with a list of causes. Cause is null as it can't be tell which one of the list is the cause. A coded multiple exception should be created this way: CodedException(400, \"Many errors\", MultipleException()) To pass a list of causes CodedException (500, \"Error\", *list)","title":" init "},{"location":"hexagon_core/com.hexagonkt.helpers/-multiple-exception/-init-/#init","text":"MultipleException ( vararg causes : Throwable ) MultipleException ( message : String , causes : List < Throwable > ) MultipleException ( message : String , vararg causes : Throwable ) `` MultipleException ( causes : List < Throwable > , message : String = \"\" ) Exception with a list of causes. Cause is null as it can't be tell which one of the list is the cause. A coded multiple exception should be created this way: CodedException(400, \"Many errors\", MultipleException()) To pass a list of causes CodedException (500, \"Error\", *list)","title":"&lt;init&gt;"},{"location":"hexagon_core/com.hexagonkt.helpers/-multiple-exception/causes/","text":"com.hexagonkt.helpers / MultipleException / causes causes \u00b6 val causes: List < Throwable >","title":"Causes"},{"location":"hexagon_core/com.hexagonkt.helpers/-multiple-exception/causes/#causes","text":"val causes: List < Throwable >","title":"causes"},{"location":"hexagon_core/com.hexagonkt.helpers/-required-keys-map/","text":"com.hexagonkt.helpers / RequiredKeysMap RequiredKeysMap \u00b6 class RequiredKeysMap <K, V> : Map < K , V > Constructors \u00b6 Name Summary <init> RequiredKeysMap ( map : Map < K , V > ) Functions \u00b6 Name Summary get operator fun get ( key : K ): V Extension Functions \u00b6 Name Summary convertToMap fun Any .convertToMap (): Map <* , *> convertToObject fun < T : Any > Map <* , *> . convertToObject ( type : KClass < T > ): T fun < T : Any > Map <* , *> . convertToObject (): T filterEmpty fun < K , V > Map < K , V > . filterEmpty (): Map < K , V > get operator fun Map <* , *> . get ( vararg keys : Any ): Any ? require fun < K , V > Map < K , V > . require ( name : K ): V requireKeys fun < T : Any > Map <* , *> . requireKeys ( vararg name : Any ): T serialize fun Any .serialize ( format : SerializationFormat = defaultFormat ): String fun Any .serialize ( contentType : String ): String","title":"Home"},{"location":"hexagon_core/com.hexagonkt.helpers/-required-keys-map/#requiredkeysmap","text":"class RequiredKeysMap <K, V> : Map < K , V >","title":"RequiredKeysMap"},{"location":"hexagon_core/com.hexagonkt.helpers/-required-keys-map/#constructors","text":"Name Summary <init> RequiredKeysMap ( map : Map < K , V > )","title":"Constructors"},{"location":"hexagon_core/com.hexagonkt.helpers/-required-keys-map/#functions","text":"Name Summary get operator fun get ( key : K ): V","title":"Functions"},{"location":"hexagon_core/com.hexagonkt.helpers/-required-keys-map/#extension-functions","text":"Name Summary convertToMap fun Any .convertToMap (): Map <* , *> convertToObject fun < T : Any > Map <* , *> . convertToObject ( type : KClass < T > ): T fun < T : Any > Map <* , *> . convertToObject (): T filterEmpty fun < K , V > Map < K , V > . filterEmpty (): Map < K , V > get operator fun Map <* , *> . get ( vararg keys : Any ): Any ? require fun < K , V > Map < K , V > . require ( name : K ): V requireKeys fun < T : Any > Map <* , *> . requireKeys ( vararg name : Any ): T serialize fun Any .serialize ( format : SerializationFormat = defaultFormat ): String fun Any .serialize ( contentType : String ): String","title":"Extension Functions"},{"location":"hexagon_core/com.hexagonkt.helpers/-required-keys-map/-init-/","text":"com.hexagonkt.helpers / RequiredKeysMap / <init> <init> \u00b6 RequiredKeysMap ( map : Map < K , V > )","title":" init "},{"location":"hexagon_core/com.hexagonkt.helpers/-required-keys-map/-init-/#init","text":"RequiredKeysMap ( map : Map < K , V > )","title":"&lt;init&gt;"},{"location":"hexagon_core/com.hexagonkt.helpers/-required-keys-map/get/","text":"com.hexagonkt.helpers / RequiredKeysMap / get get \u00b6 operator fun get ( key : K ): V","title":"Get"},{"location":"hexagon_core/com.hexagonkt.helpers/-required-keys-map/get/#get","text":"operator fun get ( key : K ): V","title":"get"},{"location":"hexagon_core/com.hexagonkt.helpers/-resource/","text":"com.hexagonkt.helpers / Resource Resource \u00b6 class Resource Absolute resource (start from root package without starting slash). Ie: foo/bar/res.txt instead /foo/bar/res.txt Constructors \u00b6 Name Summary <init> Resource ( path : String ) Absolute resource (start from root package without starting slash). Ie: foo/bar/res.txt instead /foo/bar/res.txt Properties \u00b6 Name Summary path val path: String Functions \u00b6 Name Summary readText fun readText (): String ? requireStream fun requireStream (): InputStream requireUrl fun requireUrl (): URL stream fun stream (): InputStream ? url fun url (): URL ? Extension Functions \u00b6 Name Summary convertToMap fun Any .convertToMap (): Map <* , *> parse fun < T : Any > Resource .parse ( type : KClass < T > ): T fun < T : Any > Resource .parse (): T parseObjects fun < T : Any > Resource .parseObjects ( type : KClass < T > ): List < T > fun < T : Any > Resource .parseObjects (): List < T > serialize fun Any .serialize ( format : SerializationFormat = defaultFormat ): String fun Any .serialize ( contentType : String ): String","title":"Home"},{"location":"hexagon_core/com.hexagonkt.helpers/-resource/#resource","text":"class Resource Absolute resource (start from root package without starting slash). Ie: foo/bar/res.txt instead /foo/bar/res.txt","title":"Resource"},{"location":"hexagon_core/com.hexagonkt.helpers/-resource/#constructors","text":"Name Summary <init> Resource ( path : String ) Absolute resource (start from root package without starting slash). Ie: foo/bar/res.txt instead /foo/bar/res.txt","title":"Constructors"},{"location":"hexagon_core/com.hexagonkt.helpers/-resource/#properties","text":"Name Summary path val path: String","title":"Properties"},{"location":"hexagon_core/com.hexagonkt.helpers/-resource/#functions","text":"Name Summary readText fun readText (): String ? requireStream fun requireStream (): InputStream requireUrl fun requireUrl (): URL stream fun stream (): InputStream ? url fun url (): URL ?","title":"Functions"},{"location":"hexagon_core/com.hexagonkt.helpers/-resource/#extension-functions","text":"Name Summary convertToMap fun Any .convertToMap (): Map <* , *> parse fun < T : Any > Resource .parse ( type : KClass < T > ): T fun < T : Any > Resource .parse (): T parseObjects fun < T : Any > Resource .parseObjects ( type : KClass < T > ): List < T > fun < T : Any > Resource .parseObjects (): List < T > serialize fun Any .serialize ( format : SerializationFormat = defaultFormat ): String fun Any .serialize ( contentType : String ): String","title":"Extension Functions"},{"location":"hexagon_core/com.hexagonkt.helpers/-resource/-init-/","text":"com.hexagonkt.helpers / Resource / <init> <init> \u00b6 Resource ( path : String ) Absolute resource (start from root package without starting slash). Ie: foo/bar/res.txt instead /foo/bar/res.txt","title":" init "},{"location":"hexagon_core/com.hexagonkt.helpers/-resource/-init-/#init","text":"Resource ( path : String ) Absolute resource (start from root package without starting slash). Ie: foo/bar/res.txt instead /foo/bar/res.txt","title":"&lt;init&gt;"},{"location":"hexagon_core/com.hexagonkt.helpers/-resource/path/","text":"com.hexagonkt.helpers / Resource / path path \u00b6 val path: String","title":"Path"},{"location":"hexagon_core/com.hexagonkt.helpers/-resource/path/#path","text":"val path: String","title":"path"},{"location":"hexagon_core/com.hexagonkt.helpers/-resource/read-text/","text":"com.hexagonkt.helpers / Resource / readText readText \u00b6 fun readText (): String ?","title":"Read text"},{"location":"hexagon_core/com.hexagonkt.helpers/-resource/read-text/#readtext","text":"fun readText (): String ?","title":"readText"},{"location":"hexagon_core/com.hexagonkt.helpers/-resource/require-stream/","text":"com.hexagonkt.helpers / Resource / requireStream requireStream \u00b6 fun requireStream (): InputStream","title":"Require stream"},{"location":"hexagon_core/com.hexagonkt.helpers/-resource/require-stream/#requirestream","text":"fun requireStream (): InputStream","title":"requireStream"},{"location":"hexagon_core/com.hexagonkt.helpers/-resource/require-url/","text":"com.hexagonkt.helpers / Resource / requireUrl requireUrl \u00b6 fun requireUrl (): URL","title":"Require url"},{"location":"hexagon_core/com.hexagonkt.helpers/-resource/require-url/#requireurl","text":"fun requireUrl (): URL","title":"requireUrl"},{"location":"hexagon_core/com.hexagonkt.helpers/-resource/stream/","text":"com.hexagonkt.helpers / Resource / stream stream \u00b6 fun stream (): InputStream ?","title":"Stream"},{"location":"hexagon_core/com.hexagonkt.helpers/-resource/stream/#stream","text":"fun stream (): InputStream ?","title":"stream"},{"location":"hexagon_core/com.hexagonkt.helpers/-resource/url/","text":"com.hexagonkt.helpers / Resource / url url \u00b6 fun url (): URL ?","title":"Url"},{"location":"hexagon_core/com.hexagonkt.helpers/-resource/url/#url","text":"fun url (): URL ?","title":"url"},{"location":"hexagon_core/com.hexagonkt.helpers/-strings-samples-test/","text":"com.hexagonkt.helpers / StringsSamplesTest StringsSamplesTest \u00b6 class StringsSamplesTest Constructors \u00b6 Name Summary <init> StringsSamplesTest () Functions \u00b6 Name Summary filterVarsExample fun filterVarsExample (): Unit Extension Functions \u00b6 Name Summary convertToMap fun Any .convertToMap (): Map <* , *> serialize fun Any .serialize ( format : SerializationFormat = defaultFormat ): String fun Any .serialize ( contentType : String ): String","title":"Home"},{"location":"hexagon_core/com.hexagonkt.helpers/-strings-samples-test/#stringssamplestest","text":"class StringsSamplesTest","title":"StringsSamplesTest"},{"location":"hexagon_core/com.hexagonkt.helpers/-strings-samples-test/#constructors","text":"Name Summary <init> StringsSamplesTest ()","title":"Constructors"},{"location":"hexagon_core/com.hexagonkt.helpers/-strings-samples-test/#functions","text":"Name Summary filterVarsExample fun filterVarsExample (): Unit","title":"Functions"},{"location":"hexagon_core/com.hexagonkt.helpers/-strings-samples-test/#extension-functions","text":"Name Summary convertToMap fun Any .convertToMap (): Map <* , *> serialize fun Any .serialize ( format : SerializationFormat = defaultFormat ): String fun Any .serialize ( contentType : String ): String","title":"Extension Functions"},{"location":"hexagon_core/com.hexagonkt.helpers/-strings-samples-test/-init-/","text":"com.hexagonkt.helpers / StringsSamplesTest / <init> <init> \u00b6 StringsSamplesTest ()","title":" init "},{"location":"hexagon_core/com.hexagonkt.helpers/-strings-samples-test/-init-/#init","text":"StringsSamplesTest ()","title":"&lt;init&gt;"},{"location":"hexagon_core/com.hexagonkt.helpers/-strings-samples-test/filter-vars-example/","text":"com.hexagonkt.helpers / StringsSamplesTest / filterVarsExample filterVarsExample \u00b6 fun filterVarsExample (): Unit","title":"Filter vars example"},{"location":"hexagon_core/com.hexagonkt.helpers/-strings-samples-test/filter-vars-example/#filtervarsexample","text":"fun filterVarsExample (): Unit","title":"filterVarsExample"},{"location":"hexagon_core/com.hexagonkt.helpers/java.time.-local-date/","text":"com.hexagonkt.helpers / java.time.LocalDate Extensions for java.time.LocalDate \u00b6 Name Summary toDate fun LocalDate . toDate (): Date toNumber fun LocalDate . toNumber (): Int Converts a date to an integer with the following format: YYYYMMDD .","title":"Home"},{"location":"hexagon_core/com.hexagonkt.helpers/java.time.-local-date/#extensions-for-javatimelocaldate","text":"Name Summary toDate fun LocalDate . toDate (): Date toNumber fun LocalDate . toNumber (): Int Converts a date to an integer with the following format: YYYYMMDD .","title":"Extensions for java.time.LocalDate"},{"location":"hexagon_core/com.hexagonkt.helpers/java.time.-local-date/to-date/","text":"com.hexagonkt.helpers / java.time.LocalDate / toDate toDate \u00b6 fun LocalDate . toDate (): Date","title":"To date"},{"location":"hexagon_core/com.hexagonkt.helpers/java.time.-local-date/to-date/#todate","text":"fun LocalDate . toDate (): Date","title":"toDate"},{"location":"hexagon_core/com.hexagonkt.helpers/java.time.-local-date/to-number/","text":"com.hexagonkt.helpers / java.time.LocalDate / toNumber toNumber \u00b6 fun LocalDate . toNumber (): Int Converts a date to an integer with the following format: YYYYMMDD . Receiver The date to be converted to a number. Return Numeric representation of the given date.","title":"To number"},{"location":"hexagon_core/com.hexagonkt.helpers/java.time.-local-date/to-number/#tonumber","text":"fun LocalDate . toNumber (): Int Converts a date to an integer with the following format: YYYYMMDD . Receiver The date to be converted to a number. Return Numeric representation of the given date.","title":"toNumber"},{"location":"hexagon_core/com.hexagonkt.helpers/java.time.-local-date-time/","text":"com.hexagonkt.helpers / java.time.LocalDateTime Extensions for java.time.LocalDateTime \u00b6 Name Summary toDate fun LocalDateTime . toDate (): Date toNumber fun LocalDateTime . toNumber (): Long Converts a date time to a number with the following format: YYYYMMDDHHmmss . withZone fun LocalDateTime . withZone ( zoneId : ZoneId = Jvm . timeZone . toZoneId ()): ZonedDateTime Returns the date time in a given time zone for a local date time.","title":"Home"},{"location":"hexagon_core/com.hexagonkt.helpers/java.time.-local-date-time/#extensions-for-javatimelocaldatetime","text":"Name Summary toDate fun LocalDateTime . toDate (): Date toNumber fun LocalDateTime . toNumber (): Long Converts a date time to a number with the following format: YYYYMMDDHHmmss . withZone fun LocalDateTime . withZone ( zoneId : ZoneId = Jvm . timeZone . toZoneId ()): ZonedDateTime Returns the date time in a given time zone for a local date time.","title":"Extensions for java.time.LocalDateTime"},{"location":"hexagon_core/com.hexagonkt.helpers/java.time.-local-date-time/to-date/","text":"com.hexagonkt.helpers / java.time.LocalDateTime / toDate toDate \u00b6 fun LocalDateTime . toDate (): Date","title":"To date"},{"location":"hexagon_core/com.hexagonkt.helpers/java.time.-local-date-time/to-date/#todate","text":"fun LocalDateTime . toDate (): Date","title":"toDate"},{"location":"hexagon_core/com.hexagonkt.helpers/java.time.-local-date-time/to-number/","text":"com.hexagonkt.helpers / java.time.LocalDateTime / toNumber toNumber \u00b6 fun LocalDateTime . toNumber (): Long Converts a date time to a number with the following format: YYYYMMDDHHmmss . Receiver The date to be converted to a number. Return Numeric representation of the given date.","title":"To number"},{"location":"hexagon_core/com.hexagonkt.helpers/java.time.-local-date-time/to-number/#tonumber","text":"fun LocalDateTime . toNumber (): Long Converts a date time to a number with the following format: YYYYMMDDHHmmss . Receiver The date to be converted to a number. Return Numeric representation of the given date.","title":"toNumber"},{"location":"hexagon_core/com.hexagonkt.helpers/java.time.-local-date-time/with-zone/","text":"com.hexagonkt.helpers / java.time.LocalDateTime / withZone withZone \u00b6 fun LocalDateTime . withZone ( zoneId : ZoneId = Jvm . timeZone . toZoneId ()): ZonedDateTime Returns the date time in a given time zone for a local date time. Parameters \u00b6 zoneId - Id of the target zone of the passed local date time. Receiver The local date time to be moved to another time zone. Return The received date time at the given zoneId .","title":"With zone"},{"location":"hexagon_core/com.hexagonkt.helpers/java.time.-local-date-time/with-zone/#withzone","text":"fun LocalDateTime . withZone ( zoneId : ZoneId = Jvm . timeZone . toZoneId ()): ZonedDateTime Returns the date time in a given time zone for a local date time.","title":"withZone"},{"location":"hexagon_core/com.hexagonkt.helpers/java.time.-local-date-time/with-zone/#parameters","text":"zoneId - Id of the target zone of the passed local date time. Receiver The local date time to be moved to another time zone. Return The received date time at the given zoneId .","title":"Parameters"},{"location":"hexagon_core/com.hexagonkt.helpers/java.time.-local-time/","text":"com.hexagonkt.helpers / java.time.LocalTime Extensions for java.time.LocalTime \u00b6 Name Summary toNumber fun LocalTime . toNumber (): Int Converts a time to an integer with the following format: HHmmssSSS .","title":"Home"},{"location":"hexagon_core/com.hexagonkt.helpers/java.time.-local-time/#extensions-for-javatimelocaltime","text":"Name Summary toNumber fun LocalTime . toNumber (): Int Converts a time to an integer with the following format: HHmmssSSS .","title":"Extensions for java.time.LocalTime"},{"location":"hexagon_core/com.hexagonkt.helpers/java.time.-local-time/to-number/","text":"com.hexagonkt.helpers / java.time.LocalTime / toNumber toNumber \u00b6 fun LocalTime . toNumber (): Int Converts a time to an integer with the following format: HHmmssSSS . Receiver The time to be converted to a number. Return Numeric representation of the given time.","title":"To number"},{"location":"hexagon_core/com.hexagonkt.helpers/java.time.-local-time/to-number/#tonumber","text":"fun LocalTime . toNumber (): Int Converts a time to an integer with the following format: HHmmssSSS . Receiver The time to be converted to a number. Return Numeric representation of the given time.","title":"toNumber"},{"location":"hexagon_core/com.hexagonkt.helpers/java.time.-zoned-date-time/","text":"com.hexagonkt.helpers / java.time.ZonedDateTime Extensions for java.time.ZonedDateTime \u00b6 Name Summary toDate fun ZonedDateTime . toDate (): Date .","title":"Home"},{"location":"hexagon_core/com.hexagonkt.helpers/java.time.-zoned-date-time/#extensions-for-javatimezoneddatetime","text":"Name Summary toDate fun ZonedDateTime . toDate (): Date .","title":"Extensions for java.time.ZonedDateTime"},{"location":"hexagon_core/com.hexagonkt.helpers/java.time.-zoned-date-time/to-date/","text":"com.hexagonkt.helpers / java.time.ZonedDateTime / toDate toDate \u00b6 fun ZonedDateTime . toDate (): Date . Receiver . Return .","title":"To date"},{"location":"hexagon_core/com.hexagonkt.helpers/java.time.-zoned-date-time/to-date/#todate","text":"fun ZonedDateTime . toDate (): Date . Receiver . Return .","title":"toDate"},{"location":"hexagon_core/com.hexagonkt.helpers/java.util.-date/","text":"com.hexagonkt.helpers / java.util.Date Extensions for java.util.Date \u00b6 Name Summary toLocalDate fun Date .toLocalDate (): LocalDate toLocalDateTime fun Date .toLocalDateTime (): LocalDateTime","title":"Home"},{"location":"hexagon_core/com.hexagonkt.helpers/java.util.-date/#extensions-for-javautildate","text":"Name Summary toLocalDate fun Date .toLocalDate (): LocalDate toLocalDateTime fun Date .toLocalDateTime (): LocalDateTime","title":"Extensions for java.util.Date"},{"location":"hexagon_core/com.hexagonkt.helpers/java.util.-date/to-local-date-time/","text":"com.hexagonkt.helpers / java.util.Date / toLocalDateTime toLocalDateTime \u00b6 fun Date .toLocalDateTime (): LocalDateTime","title":"To local date time"},{"location":"hexagon_core/com.hexagonkt.helpers/java.util.-date/to-local-date-time/#tolocaldatetime","text":"fun Date .toLocalDateTime (): LocalDateTime","title":"toLocalDateTime"},{"location":"hexagon_core/com.hexagonkt.helpers/java.util.-date/to-local-date/","text":"com.hexagonkt.helpers / java.util.Date / toLocalDate toLocalDate \u00b6 fun Date .toLocalDate (): LocalDate","title":"To local date"},{"location":"hexagon_core/com.hexagonkt.helpers/java.util.-date/to-local-date/#tolocaldate","text":"fun Date .toLocalDate (): LocalDate","title":"toLocalDate"},{"location":"hexagon_core/com.hexagonkt.helpers/kotlin.-int/","text":"com.hexagonkt.helpers / kotlin.Int Extensions for kotlin.Int \u00b6 Name Summary toLocalDate fun Int .toLocalDate (): LocalDate Parses a date from a formatted integer with this format: YYYYMMDD . toLocalTime fun Int .toLocalTime (): LocalTime Parses a time from a formatted integer with this format: HHmmssSSS .","title":"Home"},{"location":"hexagon_core/com.hexagonkt.helpers/kotlin.-int/#extensions-for-kotlinint","text":"Name Summary toLocalDate fun Int .toLocalDate (): LocalDate Parses a date from a formatted integer with this format: YYYYMMDD . toLocalTime fun Int .toLocalTime (): LocalTime Parses a time from a formatted integer with this format: HHmmssSSS .","title":"Extensions for kotlin.Int"},{"location":"hexagon_core/com.hexagonkt.helpers/kotlin.-int/to-local-date/","text":"com.hexagonkt.helpers / kotlin.Int / toLocalDate toLocalDate \u00b6 fun Int .toLocalDate (): LocalDate Parses a date from a formatted integer with this format: YYYYMMDD . Receiver Number to be converted to a date. Return Local date representation of the given number.","title":"To local date"},{"location":"hexagon_core/com.hexagonkt.helpers/kotlin.-int/to-local-date/#tolocaldate","text":"fun Int .toLocalDate (): LocalDate Parses a date from a formatted integer with this format: YYYYMMDD . Receiver Number to be converted to a date. Return Local date representation of the given number.","title":"toLocalDate"},{"location":"hexagon_core/com.hexagonkt.helpers/kotlin.-int/to-local-time/","text":"com.hexagonkt.helpers / kotlin.Int / toLocalTime toLocalTime \u00b6 fun Int .toLocalTime (): LocalTime Parses a time from a formatted integer with this format: HHmmssSSS . Receiver Number to be converted to a time. Return Local time representation of the given number.","title":"To local time"},{"location":"hexagon_core/com.hexagonkt.helpers/kotlin.-int/to-local-time/#tolocaltime","text":"fun Int .toLocalTime (): LocalTime Parses a time from a formatted integer with this format: HHmmssSSS . Receiver Number to be converted to a time. Return Local time representation of the given number.","title":"toLocalTime"},{"location":"hexagon_core/com.hexagonkt.helpers/kotlin.-long/","text":"com.hexagonkt.helpers / kotlin.Long Extensions for kotlin.Long \u00b6 Name Summary toLocalDateTime fun Long .toLocalDateTime (): LocalDateTime Parses a date time from a formatted number with this format: YYYYMMDDHHmmss .","title":"Home"},{"location":"hexagon_core/com.hexagonkt.helpers/kotlin.-long/#extensions-for-kotlinlong","text":"Name Summary toLocalDateTime fun Long .toLocalDateTime (): LocalDateTime Parses a date time from a formatted number with this format: YYYYMMDDHHmmss .","title":"Extensions for kotlin.Long"},{"location":"hexagon_core/com.hexagonkt.helpers/kotlin.-long/to-local-date-time/","text":"com.hexagonkt.helpers / kotlin.Long / toLocalDateTime toLocalDateTime \u00b6 fun Long .toLocalDateTime (): LocalDateTime Parses a date time from a formatted number with this format: YYYYMMDDHHmmss . Receiver Number to be converted to a date time. Return Local date time representation of the given number.","title":"To local date time"},{"location":"hexagon_core/com.hexagonkt.helpers/kotlin.-long/to-local-date-time/#tolocaldatetime","text":"fun Long .toLocalDateTime (): LocalDateTime Parses a date time from a formatted number with this format: YYYYMMDDHHmmss . Receiver Number to be converted to a date time. Return Local date time representation of the given number.","title":"toLocalDateTime"},{"location":"hexagon_core/com.hexagonkt.helpers/kotlin.-string/","text":"com.hexagonkt.helpers / kotlin.String Extensions for kotlin.String \u00b6 Name Summary banner fun String .banner ( bannerDelimiter : String = \"*\" ): String Formats the string as a banner with a delimiter above and below text. The character used to render the delimiter is defined. camelToSnake fun String .camelToSnake (): String Transforms the target string from camel case to snake case. filter fun String .filter ( prefix : String , suffix : String , vararg parameters : Pair < String , String > ): String filterVars fun String .filterVars ( parameters : Map <* , *> ): String Filters the target string substituting each key by its value. The keys format is: # { key } and all occurrences are replaced by the supplied value. fun String .filterVars ( vararg parameters : Pair <* , *> ): String snakeToCamel fun String .snakeToCamel (): String Transforms the target string from snake case to camel case. stripAccents fun String .stripAccents (): String toStream fun String .toStream (): InputStream","title":"Home"},{"location":"hexagon_core/com.hexagonkt.helpers/kotlin.-string/#extensions-for-kotlinstring","text":"Name Summary banner fun String .banner ( bannerDelimiter : String = \"*\" ): String Formats the string as a banner with a delimiter above and below text. The character used to render the delimiter is defined. camelToSnake fun String .camelToSnake (): String Transforms the target string from camel case to snake case. filter fun String .filter ( prefix : String , suffix : String , vararg parameters : Pair < String , String > ): String filterVars fun String .filterVars ( parameters : Map <* , *> ): String Filters the target string substituting each key by its value. The keys format is: # { key } and all occurrences are replaced by the supplied value. fun String .filterVars ( vararg parameters : Pair <* , *> ): String snakeToCamel fun String .snakeToCamel (): String Transforms the target string from snake case to camel case. stripAccents fun String .stripAccents (): String toStream fun String .toStream (): InputStream","title":"Extensions for kotlin.String"},{"location":"hexagon_core/com.hexagonkt.helpers/kotlin.-string/banner/","text":"com.hexagonkt.helpers / kotlin.String / banner banner \u00b6 fun String .banner ( bannerDelimiter : String = \"*\" ): String Formats the string as a banner with a delimiter above and below text. The character used to render the delimiter is defined. Parameters \u00b6 bannerDelimiter - Delimiter char for banners.","title":"Banner"},{"location":"hexagon_core/com.hexagonkt.helpers/kotlin.-string/banner/#banner","text":"fun String .banner ( bannerDelimiter : String = \"*\" ): String Formats the string as a banner with a delimiter above and below text. The character used to render the delimiter is defined.","title":"banner"},{"location":"hexagon_core/com.hexagonkt.helpers/kotlin.-string/banner/#parameters","text":"bannerDelimiter - Delimiter char for banners.","title":"Parameters"},{"location":"hexagon_core/com.hexagonkt.helpers/kotlin.-string/camel-to-snake/","text":"com.hexagonkt.helpers / kotlin.String / camelToSnake camelToSnake \u00b6 fun String .camelToSnake (): String Transforms the target string from camel case to snake case.","title":"Camel to snake"},{"location":"hexagon_core/com.hexagonkt.helpers/kotlin.-string/camel-to-snake/#cameltosnake","text":"fun String .camelToSnake (): String Transforms the target string from camel case to snake case.","title":"camelToSnake"},{"location":"hexagon_core/com.hexagonkt.helpers/kotlin.-string/filter-vars/","text":"com.hexagonkt.helpers / kotlin.String / filterVars filterVars \u00b6 fun String .filterVars ( parameters : Map <* , *> ): String Filters the target string substituting each key by its value. The keys format is: # { key } and all occurrences are replaced by the supplied value. If a variable does not have a parameter, it is left as it is. val template = \"User #{user}\" val parameters = mapOf < Any , Any >( \"user\" to \"John\" ) assert ( template . filterVars ( parameters ) == \"User John\" ) assert ( template . filterVars () == template ) Parameters \u00b6 parameters - The map with the list of key/value tuples. Return The filtered text or the same string if no values are passed or found in the text. fun String .filterVars ( vararg parameters : Pair <* , *> ): String","title":"Filter vars"},{"location":"hexagon_core/com.hexagonkt.helpers/kotlin.-string/filter-vars/#filtervars","text":"fun String .filterVars ( parameters : Map <* , *> ): String Filters the target string substituting each key by its value. The keys format is: # { key } and all occurrences are replaced by the supplied value. If a variable does not have a parameter, it is left as it is. val template = \"User #{user}\" val parameters = mapOf < Any , Any >( \"user\" to \"John\" ) assert ( template . filterVars ( parameters ) == \"User John\" ) assert ( template . filterVars () == template )","title":"filterVars"},{"location":"hexagon_core/com.hexagonkt.helpers/kotlin.-string/filter-vars/#parameters","text":"parameters - The map with the list of key/value tuples. Return The filtered text or the same string if no values are passed or found in the text. fun String .filterVars ( vararg parameters : Pair <* , *> ): String","title":"Parameters"},{"location":"hexagon_core/com.hexagonkt.helpers/kotlin.-string/filter/","text":"com.hexagonkt.helpers / kotlin.String / filter filter \u00b6 fun String .filter ( prefix : String , suffix : String , vararg parameters : Pair < String , String > ): String","title":"Filter"},{"location":"hexagon_core/com.hexagonkt.helpers/kotlin.-string/filter/#filter","text":"fun String .filter ( prefix : String , suffix : String , vararg parameters : Pair < String , String > ): String","title":"filter"},{"location":"hexagon_core/com.hexagonkt.helpers/kotlin.-string/snake-to-camel/","text":"com.hexagonkt.helpers / kotlin.String / snakeToCamel snakeToCamel \u00b6 fun String .snakeToCamel (): String Transforms the target string from snake case to camel case.","title":"Snake to camel"},{"location":"hexagon_core/com.hexagonkt.helpers/kotlin.-string/snake-to-camel/#snaketocamel","text":"fun String .snakeToCamel (): String Transforms the target string from snake case to camel case.","title":"snakeToCamel"},{"location":"hexagon_core/com.hexagonkt.helpers/kotlin.-string/strip-accents/","text":"com.hexagonkt.helpers / kotlin.String / stripAccents stripAccents \u00b6 fun String .stripAccents (): String","title":"Strip accents"},{"location":"hexagon_core/com.hexagonkt.helpers/kotlin.-string/strip-accents/#stripaccents","text":"fun String .stripAccents (): String","title":"stripAccents"},{"location":"hexagon_core/com.hexagonkt.helpers/kotlin.-string/to-stream/","text":"com.hexagonkt.helpers / kotlin.String / toStream toStream \u00b6 fun String .toStream (): InputStream","title":"To stream"},{"location":"hexagon_core/com.hexagonkt.helpers/kotlin.-string/to-stream/#tostream","text":"fun String .toStream (): InputStream","title":"toStream"},{"location":"hexagon_core/com.hexagonkt.helpers/kotlin.-throwable/","text":"com.hexagonkt.helpers / kotlin.Throwable Extensions for kotlin.Throwable \u00b6 Name Summary filterStackTrace fun Throwable .filterStackTrace ( prefix : String ): Array < out StackTraceElement > Returns the stack trace array of the frames that starts with the given prefix. toText fun Throwable .toText ( prefix : String = \"\" ): String Returns this throwable as a text.","title":"Home"},{"location":"hexagon_core/com.hexagonkt.helpers/kotlin.-throwable/#extensions-for-kotlinthrowable","text":"Name Summary filterStackTrace fun Throwable .filterStackTrace ( prefix : String ): Array < out StackTraceElement > Returns the stack trace array of the frames that starts with the given prefix. toText fun Throwable .toText ( prefix : String = \"\" ): String Returns this throwable as a text.","title":"Extensions for kotlin.Throwable"},{"location":"hexagon_core/com.hexagonkt.helpers/kotlin.-throwable/filter-stack-trace/","text":"com.hexagonkt.helpers / kotlin.Throwable / filterStackTrace filterStackTrace \u00b6 fun Throwable .filterStackTrace ( prefix : String ): Array < out StackTraceElement > Returns the stack trace array of the frames that starts with the given prefix.","title":"Filter stack trace"},{"location":"hexagon_core/com.hexagonkt.helpers/kotlin.-throwable/filter-stack-trace/#filterstacktrace","text":"fun Throwable .filterStackTrace ( prefix : String ): Array < out StackTraceElement > Returns the stack trace array of the frames that starts with the given prefix.","title":"filterStackTrace"},{"location":"hexagon_core/com.hexagonkt.helpers/kotlin.-throwable/to-text/","text":"com.hexagonkt.helpers / kotlin.Throwable / toText toText \u00b6 fun Throwable .toText ( prefix : String = \"\" ): String Returns this throwable as a text.","title":"To text"},{"location":"hexagon_core/com.hexagonkt.helpers/kotlin.-throwable/to-text/#totext","text":"fun Throwable .toText ( prefix : String = \"\" ): String Returns this throwable as a text.","title":"toText"},{"location":"hexagon_core/com.hexagonkt.helpers/kotlin.collections.-collection/","text":"com.hexagonkt.helpers / kotlin.collections.Collection Extensions for kotlin.collections.Collection \u00b6 Name Summary ensureSize fun < Z > Collection < Z > . ensureSize ( count : IntRange ): Collection < Z >","title":"Home"},{"location":"hexagon_core/com.hexagonkt.helpers/kotlin.collections.-collection/#extensions-for-kotlincollectionscollection","text":"Name Summary ensureSize fun < Z > Collection < Z > . ensureSize ( count : IntRange ): Collection < Z >","title":"Extensions for kotlin.collections.Collection"},{"location":"hexagon_core/com.hexagonkt.helpers/kotlin.collections.-collection/ensure-size/","text":"com.hexagonkt.helpers / kotlin.collections.Collection / ensureSize ensureSize \u00b6 fun < Z > Collection < Z > . ensureSize ( count : IntRange ): Collection < Z >","title":"Ensure size"},{"location":"hexagon_core/com.hexagonkt.helpers/kotlin.collections.-collection/ensure-size/#ensuresize","text":"fun < Z > Collection < Z > . ensureSize ( count : IntRange ): Collection < Z >","title":"ensureSize"},{"location":"hexagon_core/com.hexagonkt.helpers/kotlin.collections.-list/","text":"com.hexagonkt.helpers / kotlin.collections.List Extensions for kotlin.collections.List \u00b6 Name Summary filterEmpty fun < V > List < V > . filterEmpty (): List < V >","title":"Home"},{"location":"hexagon_core/com.hexagonkt.helpers/kotlin.collections.-list/#extensions-for-kotlincollectionslist","text":"Name Summary filterEmpty fun < V > List < V > . filterEmpty (): List < V >","title":"Extensions for kotlin.collections.List"},{"location":"hexagon_core/com.hexagonkt.helpers/kotlin.collections.-list/filter-empty/","text":"com.hexagonkt.helpers / kotlin.collections.List / filterEmpty filterEmpty \u00b6 fun < V > List < V > . filterEmpty (): List < V >","title":"Filter empty"},{"location":"hexagon_core/com.hexagonkt.helpers/kotlin.collections.-list/filter-empty/#filterempty","text":"fun < V > List < V > . filterEmpty (): List < V >","title":"filterEmpty"},{"location":"hexagon_core/com.hexagonkt.helpers/kotlin.collections.-map/","text":"com.hexagonkt.helpers / kotlin.collections.Map Extensions for kotlin.collections.Map \u00b6 Name Summary filterEmpty fun < K , V > Map < K , V > . filterEmpty (): Map < K , V > get operator fun Map <* , *> . get ( vararg keys : Any ): Any ? require fun < K , V > Map < K , V > . require ( name : K ): V requireKeys fun < T : Any > Map <* , *> . requireKeys ( vararg name : Any ): T","title":"Home"},{"location":"hexagon_core/com.hexagonkt.helpers/kotlin.collections.-map/#extensions-for-kotlincollectionsmap","text":"Name Summary filterEmpty fun < K , V > Map < K , V > . filterEmpty (): Map < K , V > get operator fun Map <* , *> . get ( vararg keys : Any ): Any ? require fun < K , V > Map < K , V > . require ( name : K ): V requireKeys fun < T : Any > Map <* , *> . requireKeys ( vararg name : Any ): T","title":"Extensions for kotlin.collections.Map"},{"location":"hexagon_core/com.hexagonkt.helpers/kotlin.collections.-map/filter-empty/","text":"com.hexagonkt.helpers / kotlin.collections.Map / filterEmpty filterEmpty \u00b6 fun < K , V > Map < K , V > . filterEmpty (): Map < K , V >","title":"Filter empty"},{"location":"hexagon_core/com.hexagonkt.helpers/kotlin.collections.-map/filter-empty/#filterempty","text":"fun < K , V > Map < K , V > . filterEmpty (): Map < K , V >","title":"filterEmpty"},{"location":"hexagon_core/com.hexagonkt.helpers/kotlin.collections.-map/get/","text":"com.hexagonkt.helpers / kotlin.collections.Map / get get \u00b6 operator fun Map <* , *> . get ( vararg keys : Any ): Any ?","title":"Get"},{"location":"hexagon_core/com.hexagonkt.helpers/kotlin.collections.-map/get/#get","text":"operator fun Map <* , *> . get ( vararg keys : Any ): Any ?","title":"get"},{"location":"hexagon_core/com.hexagonkt.helpers/kotlin.collections.-map/require-keys/","text":"com.hexagonkt.helpers / kotlin.collections.Map / requireKeys requireKeys \u00b6 fun < T : Any > Map <* , *> . requireKeys ( vararg name : Any ): T","title":"Require keys"},{"location":"hexagon_core/com.hexagonkt.helpers/kotlin.collections.-map/require-keys/#requirekeys","text":"fun < T : Any > Map <* , *> . requireKeys ( vararg name : Any ): T","title":"requireKeys"},{"location":"hexagon_core/com.hexagonkt.helpers/kotlin.collections.-map/require/","text":"com.hexagonkt.helpers / kotlin.collections.Map / require require \u00b6 fun < K , V > Map < K , V > . require ( name : K ): V","title":"Require"},{"location":"hexagon_core/com.hexagonkt.helpers/kotlin.collections.-map/require/#require","text":"fun < K , V > Map < K , V > . require ( name : K ): V","title":"require"},{"location":"hexagon_core/com.hexagonkt.helpers/kotlin.text.-regex/","text":"com.hexagonkt.helpers / kotlin.text.Regex Extensions for kotlin.text.Regex \u00b6 Name Summary findGroups fun Regex .findGroups ( str : String ): List < MatchGroup >","title":"Home"},{"location":"hexagon_core/com.hexagonkt.helpers/kotlin.text.-regex/#extensions-for-kotlintextregex","text":"Name Summary findGroups fun Regex .findGroups ( str : String ): List < MatchGroup >","title":"Extensions for kotlin.text.Regex"},{"location":"hexagon_core/com.hexagonkt.helpers/kotlin.text.-regex/find-groups/","text":"com.hexagonkt.helpers / kotlin.text.Regex / findGroups findGroups \u00b6 fun Regex .findGroups ( str : String ): List < MatchGroup >","title":"Find groups"},{"location":"hexagon_core/com.hexagonkt.helpers/kotlin.text.-regex/find-groups/#findgroups","text":"fun Regex .findGroups ( str : String ): List < MatchGroup >","title":"findGroups"},{"location":"hexagon_core/com.hexagonkt.http/","text":"com.hexagonkt.http Package com.hexagonkt.http \u00b6 HTTP code shared between clients and servers and independent of third party libraries. Types \u00b6 Name Summary Method enum class Method Enum for the supported HTTP methods. Path data class Path A path definition. It parses path patterns and extract values for parameters. Route data class Route Extensions for External Classes \u00b6 Name Summary kotlin.String Properties \u00b6 Name Summary ALL val ALL: LinkedHashSet < Method > Set containing all HTTP methods. Functions \u00b6 Name Summary any fun any ( path : String = \"/\" ): Route Shortcut to create a route for a filter (with all methods). delete fun delete ( path : String = \"/\" ): Route Shortcut to create a DELETE route. get fun get ( path : String = \"/\" ): Route Shortcut to create a GET route. head fun head ( path : String = \"/\" ): Route Shortcut to create a HEAD route. httpDate fun httpDate ( date : LocalDateTime = LocalDateTime . now ()): String options fun options ( path : String = \"/\" ): Route Shortcut to create a OPTIONS route. parseQueryParameters fun parseQueryParameters ( query : String ): Map < String , List < String >> patch fun patch ( path : String = \"/\" ): Route Shortcut to create a PATCH route. post fun post ( path : String = \"/\" ): Route Shortcut to create a POST route. put fun put ( path : String = \"/\" ): Route Shortcut to create a PUT route. tracer fun tracer ( path : String = \"/\" ): Route Shortcut to create a TRACE route.","title":"Home"},{"location":"hexagon_core/com.hexagonkt.http/#package-comhexagonkthttp","text":"HTTP code shared between clients and servers and independent of third party libraries.","title":"Package com.hexagonkt.http"},{"location":"hexagon_core/com.hexagonkt.http/#types","text":"Name Summary Method enum class Method Enum for the supported HTTP methods. Path data class Path A path definition. It parses path patterns and extract values for parameters. Route data class Route","title":"Types"},{"location":"hexagon_core/com.hexagonkt.http/#extensions-for-external-classes","text":"Name Summary kotlin.String","title":"Extensions for External Classes"},{"location":"hexagon_core/com.hexagonkt.http/#properties","text":"Name Summary ALL val ALL: LinkedHashSet < Method > Set containing all HTTP methods.","title":"Properties"},{"location":"hexagon_core/com.hexagonkt.http/#functions","text":"Name Summary any fun any ( path : String = \"/\" ): Route Shortcut to create a route for a filter (with all methods). delete fun delete ( path : String = \"/\" ): Route Shortcut to create a DELETE route. get fun get ( path : String = \"/\" ): Route Shortcut to create a GET route. head fun head ( path : String = \"/\" ): Route Shortcut to create a HEAD route. httpDate fun httpDate ( date : LocalDateTime = LocalDateTime . now ()): String options fun options ( path : String = \"/\" ): Route Shortcut to create a OPTIONS route. parseQueryParameters fun parseQueryParameters ( query : String ): Map < String , List < String >> patch fun patch ( path : String = \"/\" ): Route Shortcut to create a PATCH route. post fun post ( path : String = \"/\" ): Route Shortcut to create a POST route. put fun put ( path : String = \"/\" ): Route Shortcut to create a PUT route. tracer fun tracer ( path : String = \"/\" ): Route Shortcut to create a TRACE route.","title":"Functions"},{"location":"hexagon_core/com.hexagonkt.http/-a-l-l/","text":"com.hexagonkt.http / ALL ALL \u00b6 val ALL: LinkedHashSet < Method > Set containing all HTTP methods. Getter Set containing all HTTP methods.","title":" a l l"},{"location":"hexagon_core/com.hexagonkt.http/-a-l-l/#all","text":"val ALL: LinkedHashSet < Method > Set containing all HTTP methods. Getter Set containing all HTTP methods.","title":"ALL"},{"location":"hexagon_core/com.hexagonkt.http/any/","text":"com.hexagonkt.http / any any \u00b6 fun any ( path : String = \"/\" ): Route Shortcut to create a route for a filter (with all methods).","title":"Any"},{"location":"hexagon_core/com.hexagonkt.http/any/#any","text":"fun any ( path : String = \"/\" ): Route Shortcut to create a route for a filter (with all methods).","title":"any"},{"location":"hexagon_core/com.hexagonkt.http/delete/","text":"com.hexagonkt.http / delete delete \u00b6 fun delete ( path : String = \"/\" ): Route Shortcut to create a DELETE route.","title":"Delete"},{"location":"hexagon_core/com.hexagonkt.http/delete/#delete","text":"fun delete ( path : String = \"/\" ): Route Shortcut to create a DELETE route.","title":"delete"},{"location":"hexagon_core/com.hexagonkt.http/get/","text":"com.hexagonkt.http / get get \u00b6 fun get ( path : String = \"/\" ): Route Shortcut to create a GET route.","title":"Get"},{"location":"hexagon_core/com.hexagonkt.http/get/#get","text":"fun get ( path : String = \"/\" ): Route Shortcut to create a GET route.","title":"get"},{"location":"hexagon_core/com.hexagonkt.http/head/","text":"com.hexagonkt.http / head head \u00b6 fun head ( path : String = \"/\" ): Route Shortcut to create a HEAD route.","title":"Head"},{"location":"hexagon_core/com.hexagonkt.http/head/#head","text":"fun head ( path : String = \"/\" ): Route Shortcut to create a HEAD route.","title":"head"},{"location":"hexagon_core/com.hexagonkt.http/http-date/","text":"com.hexagonkt.http / httpDate httpDate \u00b6 fun httpDate ( date : LocalDateTime = LocalDateTime . now ()): String","title":"Http date"},{"location":"hexagon_core/com.hexagonkt.http/http-date/#httpdate","text":"fun httpDate ( date : LocalDateTime = LocalDateTime . now ()): String","title":"httpDate"},{"location":"hexagon_core/com.hexagonkt.http/options/","text":"com.hexagonkt.http / options options \u00b6 fun options ( path : String = \"/\" ): Route Shortcut to create a OPTIONS route.","title":"Options"},{"location":"hexagon_core/com.hexagonkt.http/options/#options","text":"fun options ( path : String = \"/\" ): Route Shortcut to create a OPTIONS route.","title":"options"},{"location":"hexagon_core/com.hexagonkt.http/parse-query-parameters/","text":"com.hexagonkt.http / parseQueryParameters parseQueryParameters \u00b6 fun parseQueryParameters ( query : String ): Map < String , List < String >>","title":"Parse query parameters"},{"location":"hexagon_core/com.hexagonkt.http/parse-query-parameters/#parsequeryparameters","text":"fun parseQueryParameters ( query : String ): Map < String , List < String >>","title":"parseQueryParameters"},{"location":"hexagon_core/com.hexagonkt.http/patch/","text":"com.hexagonkt.http / patch patch \u00b6 fun patch ( path : String = \"/\" ): Route Shortcut to create a PATCH route.","title":"Patch"},{"location":"hexagon_core/com.hexagonkt.http/patch/#patch","text":"fun patch ( path : String = \"/\" ): Route Shortcut to create a PATCH route.","title":"patch"},{"location":"hexagon_core/com.hexagonkt.http/post/","text":"com.hexagonkt.http / post post \u00b6 fun post ( path : String = \"/\" ): Route Shortcut to create a POST route.","title":"Post"},{"location":"hexagon_core/com.hexagonkt.http/post/#post","text":"fun post ( path : String = \"/\" ): Route Shortcut to create a POST route.","title":"post"},{"location":"hexagon_core/com.hexagonkt.http/put/","text":"com.hexagonkt.http / put put \u00b6 fun put ( path : String = \"/\" ): Route Shortcut to create a PUT route.","title":"Put"},{"location":"hexagon_core/com.hexagonkt.http/put/#put","text":"fun put ( path : String = \"/\" ): Route Shortcut to create a PUT route.","title":"put"},{"location":"hexagon_core/com.hexagonkt.http/tracer/","text":"com.hexagonkt.http / tracer tracer \u00b6 fun tracer ( path : String = \"/\" ): Route Shortcut to create a TRACE route.","title":"Tracer"},{"location":"hexagon_core/com.hexagonkt.http/tracer/#tracer","text":"fun tracer ( path : String = \"/\" ): Route Shortcut to create a TRACE route.","title":"tracer"},{"location":"hexagon_core/com.hexagonkt.http/-method/","text":"com.hexagonkt.http / Method Method \u00b6 enum class Method Enum for the supported HTTP methods. Enum Values \u00b6 Name Summary GET HTTP GET method. HEAD HTTP HEAD method. POST HTTP POST method. PUT HTTP PUT method. DELETE HTTP DELETE method. TRACE HTTP TRACE method. OPTIONS HTTP OPTIONS method. PATCH HTTP PATCH method. Extension Functions \u00b6 Name Summary convertToMap fun Any .convertToMap (): Map <* , *> serialize fun Any .serialize ( format : SerializationFormat = defaultFormat ): String fun Any .serialize ( contentType : String ): String","title":"Home"},{"location":"hexagon_core/com.hexagonkt.http/-method/#method","text":"enum class Method Enum for the supported HTTP methods.","title":"Method"},{"location":"hexagon_core/com.hexagonkt.http/-method/#enum-values","text":"Name Summary GET HTTP GET method. HEAD HTTP HEAD method. POST HTTP POST method. PUT HTTP PUT method. DELETE HTTP DELETE method. TRACE HTTP TRACE method. OPTIONS HTTP OPTIONS method. PATCH HTTP PATCH method.","title":"Enum Values"},{"location":"hexagon_core/com.hexagonkt.http/-method/#extension-functions","text":"Name Summary convertToMap fun Any .convertToMap (): Map <* , *> serialize fun Any .serialize ( format : SerializationFormat = defaultFormat ): String fun Any .serialize ( contentType : String ): String","title":"Extension Functions"},{"location":"hexagon_core/com.hexagonkt.http/-method/-d-e-l-e-t-e/","text":"com.hexagonkt.http / Method / DELETE DELETE \u00b6 DELETE HTTP DELETE method.","title":" d e l e t e"},{"location":"hexagon_core/com.hexagonkt.http/-method/-d-e-l-e-t-e/#delete","text":"DELETE HTTP DELETE method.","title":"DELETE"},{"location":"hexagon_core/com.hexagonkt.http/-method/-g-e-t/","text":"com.hexagonkt.http / Method / GET GET \u00b6 GET HTTP GET method.","title":" g e t"},{"location":"hexagon_core/com.hexagonkt.http/-method/-g-e-t/#get","text":"GET HTTP GET method.","title":"GET"},{"location":"hexagon_core/com.hexagonkt.http/-method/-h-e-a-d/","text":"com.hexagonkt.http / Method / HEAD HEAD \u00b6 HEAD HTTP HEAD method.","title":" h e a d"},{"location":"hexagon_core/com.hexagonkt.http/-method/-h-e-a-d/#head","text":"HEAD HTTP HEAD method.","title":"HEAD"},{"location":"hexagon_core/com.hexagonkt.http/-method/-o-p-t-i-o-n-s/","text":"com.hexagonkt.http / Method / OPTIONS OPTIONS \u00b6 OPTIONS HTTP OPTIONS method.","title":" o p t i o n s"},{"location":"hexagon_core/com.hexagonkt.http/-method/-o-p-t-i-o-n-s/#options","text":"OPTIONS HTTP OPTIONS method.","title":"OPTIONS"},{"location":"hexagon_core/com.hexagonkt.http/-method/-p-a-t-c-h/","text":"com.hexagonkt.http / Method / PATCH PATCH \u00b6 PATCH HTTP PATCH method.","title":" p a t c h"},{"location":"hexagon_core/com.hexagonkt.http/-method/-p-a-t-c-h/#patch","text":"PATCH HTTP PATCH method.","title":"PATCH"},{"location":"hexagon_core/com.hexagonkt.http/-method/-p-o-s-t/","text":"com.hexagonkt.http / Method / POST POST \u00b6 POST HTTP POST method.","title":" p o s t"},{"location":"hexagon_core/com.hexagonkt.http/-method/-p-o-s-t/#post","text":"POST HTTP POST method.","title":"POST"},{"location":"hexagon_core/com.hexagonkt.http/-method/-p-u-t/","text":"com.hexagonkt.http / Method / PUT PUT \u00b6 PUT HTTP PUT method.","title":" p u t"},{"location":"hexagon_core/com.hexagonkt.http/-method/-p-u-t/#put","text":"PUT HTTP PUT method.","title":"PUT"},{"location":"hexagon_core/com.hexagonkt.http/-method/-t-r-a-c-e/","text":"com.hexagonkt.http / Method / TRACE TRACE \u00b6 TRACE HTTP TRACE method.","title":" t r a c e"},{"location":"hexagon_core/com.hexagonkt.http/-method/-t-r-a-c-e/#trace","text":"TRACE HTTP TRACE method.","title":"TRACE"},{"location":"hexagon_core/com.hexagonkt.http/-path/","text":"com.hexagonkt.http / Path Path \u00b6 data class Path A path definition. It parses path patterns and extract values for parameters. Differences with Sinatra: No splats (you can use named parameters though) Delimiter is {var} to conform with RFC 6570 Constructors \u00b6 Name Summary <init> Path ( path : String ) A path definition. It parses path patterns and extract values for parameters. Properties \u00b6 Name Summary hasParameters val hasParameters: Boolean hasWildcards val hasWildcards: Boolean parameterIndex val parameterIndex: List < String > path val path: String regex val regex: Regex ? segments val segments: List < String > Functions \u00b6 Name Summary create fun create ( vararg parameters : Pair < String , Any > ): String extractParameters fun extractParameters ( requestUrl : String ): Map < String , String > matches fun matches ( requestUrl : String ): Boolean Extension Functions \u00b6 Name Summary convertToMap fun Any .convertToMap (): Map <* , *> serialize fun Any .serialize ( format : SerializationFormat = defaultFormat ): String fun Any .serialize ( contentType : String ): String","title":"Home"},{"location":"hexagon_core/com.hexagonkt.http/-path/#path","text":"data class Path A path definition. It parses path patterns and extract values for parameters. Differences with Sinatra: No splats (you can use named parameters though) Delimiter is {var} to conform with RFC 6570","title":"Path"},{"location":"hexagon_core/com.hexagonkt.http/-path/#constructors","text":"Name Summary <init> Path ( path : String ) A path definition. It parses path patterns and extract values for parameters.","title":"Constructors"},{"location":"hexagon_core/com.hexagonkt.http/-path/#properties","text":"Name Summary hasParameters val hasParameters: Boolean hasWildcards val hasWildcards: Boolean parameterIndex val parameterIndex: List < String > path val path: String regex val regex: Regex ? segments val segments: List < String >","title":"Properties"},{"location":"hexagon_core/com.hexagonkt.http/-path/#functions","text":"Name Summary create fun create ( vararg parameters : Pair < String , Any > ): String extractParameters fun extractParameters ( requestUrl : String ): Map < String , String > matches fun matches ( requestUrl : String ): Boolean","title":"Functions"},{"location":"hexagon_core/com.hexagonkt.http/-path/#extension-functions","text":"Name Summary convertToMap fun Any .convertToMap (): Map <* , *> serialize fun Any .serialize ( format : SerializationFormat = defaultFormat ): String fun Any .serialize ( contentType : String ): String","title":"Extension Functions"},{"location":"hexagon_core/com.hexagonkt.http/-path/-init-/","text":"com.hexagonkt.http / Path / <init> <init> \u00b6 Path ( path : String ) A path definition. It parses path patterns and extract values for parameters. Differences with Sinatra: No splats (you can use named parameters though) Delimiter is {var} to conform with RFC 6570","title":" init "},{"location":"hexagon_core/com.hexagonkt.http/-path/-init-/#init","text":"Path ( path : String ) A path definition. It parses path patterns and extract values for parameters. Differences with Sinatra: No splats (you can use named parameters though) Delimiter is {var} to conform with RFC 6570","title":"&lt;init&gt;"},{"location":"hexagon_core/com.hexagonkt.http/-path/create/","text":"com.hexagonkt.http / Path / create create \u00b6 fun create ( vararg parameters : Pair < String , Any > ): String","title":"Create"},{"location":"hexagon_core/com.hexagonkt.http/-path/create/#create","text":"fun create ( vararg parameters : Pair < String , Any > ): String","title":"create"},{"location":"hexagon_core/com.hexagonkt.http/-path/extract-parameters/","text":"com.hexagonkt.http / Path / extractParameters extractParameters \u00b6 fun extractParameters ( requestUrl : String ): Map < String , String >","title":"Extract parameters"},{"location":"hexagon_core/com.hexagonkt.http/-path/extract-parameters/#extractparameters","text":"fun extractParameters ( requestUrl : String ): Map < String , String >","title":"extractParameters"},{"location":"hexagon_core/com.hexagonkt.http/-path/has-parameters/","text":"com.hexagonkt.http / Path / hasParameters hasParameters \u00b6 val hasParameters: Boolean","title":"Has parameters"},{"location":"hexagon_core/com.hexagonkt.http/-path/has-parameters/#hasparameters","text":"val hasParameters: Boolean","title":"hasParameters"},{"location":"hexagon_core/com.hexagonkt.http/-path/has-wildcards/","text":"com.hexagonkt.http / Path / hasWildcards hasWildcards \u00b6 val hasWildcards: Boolean","title":"Has wildcards"},{"location":"hexagon_core/com.hexagonkt.http/-path/has-wildcards/#haswildcards","text":"val hasWildcards: Boolean","title":"hasWildcards"},{"location":"hexagon_core/com.hexagonkt.http/-path/matches/","text":"com.hexagonkt.http / Path / matches matches \u00b6 fun matches ( requestUrl : String ): Boolean","title":"Matches"},{"location":"hexagon_core/com.hexagonkt.http/-path/matches/#matches","text":"fun matches ( requestUrl : String ): Boolean","title":"matches"},{"location":"hexagon_core/com.hexagonkt.http/-path/parameter-index/","text":"com.hexagonkt.http / Path / parameterIndex parameterIndex \u00b6 val parameterIndex: List < String >","title":"Parameter index"},{"location":"hexagon_core/com.hexagonkt.http/-path/parameter-index/#parameterindex","text":"val parameterIndex: List < String >","title":"parameterIndex"},{"location":"hexagon_core/com.hexagonkt.http/-path/path/","text":"com.hexagonkt.http / Path / path path \u00b6 val path: String","title":"Path"},{"location":"hexagon_core/com.hexagonkt.http/-path/path/#path","text":"val path: String","title":"path"},{"location":"hexagon_core/com.hexagonkt.http/-path/regex/","text":"com.hexagonkt.http / Path / regex regex \u00b6 val regex: Regex ?","title":"Regex"},{"location":"hexagon_core/com.hexagonkt.http/-path/regex/#regex","text":"val regex: Regex ?","title":"regex"},{"location":"hexagon_core/com.hexagonkt.http/-path/segments/","text":"com.hexagonkt.http / Path / segments segments \u00b6 val segments: List < String >","title":"Segments"},{"location":"hexagon_core/com.hexagonkt.http/-path/segments/#segments","text":"val segments: List < String >","title":"segments"},{"location":"hexagon_core/com.hexagonkt.http/-route/","text":"com.hexagonkt.http / Route Route \u00b6 data class Route Constructors \u00b6 Name Summary <init> Route ( path : Path , vararg methods : Method ) Route ( path : String , vararg methods : Method ) Route ( path : Path , methods : LinkedHashSet < Method > , requestType : KClass <*>? = null , responseType : KClass <*>? = null , metadata : Map < String , *> = emptyMap < String , Any > ()) Properties \u00b6 Name Summary metadata val metadata: Map < String , *> methods val methods: LinkedHashSet < Method > path val path: Path requestType val requestType: KClass <*>? responseType val responseType: KClass <*>? Functions \u00b6 Name Summary list fun list (): List < Route > Extension Functions \u00b6 Name Summary convertToMap fun Any .convertToMap (): Map <* , *> serialize fun Any .serialize ( format : SerializationFormat = defaultFormat ): String fun Any .serialize ( contentType : String ): String","title":"Home"},{"location":"hexagon_core/com.hexagonkt.http/-route/#route","text":"data class Route","title":"Route"},{"location":"hexagon_core/com.hexagonkt.http/-route/#constructors","text":"Name Summary <init> Route ( path : Path , vararg methods : Method ) Route ( path : String , vararg methods : Method ) Route ( path : Path , methods : LinkedHashSet < Method > , requestType : KClass <*>? = null , responseType : KClass <*>? = null , metadata : Map < String , *> = emptyMap < String , Any > ())","title":"Constructors"},{"location":"hexagon_core/com.hexagonkt.http/-route/#properties","text":"Name Summary metadata val metadata: Map < String , *> methods val methods: LinkedHashSet < Method > path val path: Path requestType val requestType: KClass <*>? responseType val responseType: KClass <*>?","title":"Properties"},{"location":"hexagon_core/com.hexagonkt.http/-route/#functions","text":"Name Summary list fun list (): List < Route >","title":"Functions"},{"location":"hexagon_core/com.hexagonkt.http/-route/#extension-functions","text":"Name Summary convertToMap fun Any .convertToMap (): Map <* , *> serialize fun Any .serialize ( format : SerializationFormat = defaultFormat ): String fun Any .serialize ( contentType : String ): String","title":"Extension Functions"},{"location":"hexagon_core/com.hexagonkt.http/-route/-init-/","text":"com.hexagonkt.http / Route / <init> <init> \u00b6 Route ( path : Path , vararg methods : Method ) Route ( path : String , vararg methods : Method ) Route ( path : Path , methods : LinkedHashSet < Method > , requestType : KClass <*>? = null , responseType : KClass <*>? = null , metadata : Map < String , *> = emptyMap < String , Any > ())","title":" init "},{"location":"hexagon_core/com.hexagonkt.http/-route/-init-/#init","text":"Route ( path : Path , vararg methods : Method ) Route ( path : String , vararg methods : Method ) Route ( path : Path , methods : LinkedHashSet < Method > , requestType : KClass <*>? = null , responseType : KClass <*>? = null , metadata : Map < String , *> = emptyMap < String , Any > ())","title":"&lt;init&gt;"},{"location":"hexagon_core/com.hexagonkt.http/-route/list/","text":"com.hexagonkt.http / Route / list list \u00b6 fun list (): List < Route >","title":"List"},{"location":"hexagon_core/com.hexagonkt.http/-route/list/#list","text":"fun list (): List < Route >","title":"list"},{"location":"hexagon_core/com.hexagonkt.http/-route/metadata/","text":"com.hexagonkt.http / Route / metadata metadata \u00b6 val metadata: Map < String , *>","title":"Metadata"},{"location":"hexagon_core/com.hexagonkt.http/-route/metadata/#metadata","text":"val metadata: Map < String , *>","title":"metadata"},{"location":"hexagon_core/com.hexagonkt.http/-route/methods/","text":"com.hexagonkt.http / Route / methods methods \u00b6 val methods: LinkedHashSet < Method >","title":"Methods"},{"location":"hexagon_core/com.hexagonkt.http/-route/methods/#methods","text":"val methods: LinkedHashSet < Method >","title":"methods"},{"location":"hexagon_core/com.hexagonkt.http/-route/path/","text":"com.hexagonkt.http / Route / path path \u00b6 val path: Path","title":"Path"},{"location":"hexagon_core/com.hexagonkt.http/-route/path/#path","text":"val path: Path","title":"path"},{"location":"hexagon_core/com.hexagonkt.http/-route/request-type/","text":"com.hexagonkt.http / Route / requestType requestType \u00b6 val requestType: KClass <*>?","title":"Request type"},{"location":"hexagon_core/com.hexagonkt.http/-route/request-type/#requesttype","text":"val requestType: KClass <*>?","title":"requestType"},{"location":"hexagon_core/com.hexagonkt.http/-route/response-type/","text":"com.hexagonkt.http / Route / responseType responseType \u00b6 val responseType: KClass <*>?","title":"Response type"},{"location":"hexagon_core/com.hexagonkt.http/-route/response-type/#responsetype","text":"val responseType: KClass <*>?","title":"responseType"},{"location":"hexagon_core/com.hexagonkt.http/kotlin.-string/","text":"com.hexagonkt.http / kotlin.String Extensions for kotlin.String \u00b6 Name Summary urlDecode fun String .urlDecode (): String urlEncode fun String .urlEncode (): String","title":"Home"},{"location":"hexagon_core/com.hexagonkt.http/kotlin.-string/#extensions-for-kotlinstring","text":"Name Summary urlDecode fun String .urlDecode (): String urlEncode fun String .urlEncode (): String","title":"Extensions for kotlin.String"},{"location":"hexagon_core/com.hexagonkt.http/kotlin.-string/url-decode/","text":"com.hexagonkt.http / kotlin.String / urlDecode urlDecode \u00b6 fun String .urlDecode (): String","title":"Url decode"},{"location":"hexagon_core/com.hexagonkt.http/kotlin.-string/url-decode/#urldecode","text":"fun String .urlDecode (): String","title":"urlDecode"},{"location":"hexagon_core/com.hexagonkt.http/kotlin.-string/url-encode/","text":"com.hexagonkt.http / kotlin.String / urlEncode urlEncode \u00b6 fun String .urlEncode (): String","title":"Url encode"},{"location":"hexagon_core/com.hexagonkt.http/kotlin.-string/url-encode/#urlencode","text":"fun String .urlEncode (): String","title":"urlEncode"},{"location":"hexagon_core/com.hexagonkt.injection/","text":"com.hexagonkt.injection Package com.hexagonkt.injection \u00b6 Utilities to bind classes to creation closures or instances, and inject instances of those classes later. Types \u00b6 Name Summary InjectionManager object InjectionManager Generators registry and utilities. This object keep tracks of supplier functions or specific objects bound to classes. Different suppliers can be bound to the same type using 'tags'.","title":"Home"},{"location":"hexagon_core/com.hexagonkt.injection/#package-comhexagonktinjection","text":"Utilities to bind classes to creation closures or instances, and inject instances of those classes later.","title":"Package com.hexagonkt.injection"},{"location":"hexagon_core/com.hexagonkt.injection/#types","text":"Name Summary InjectionManager object InjectionManager Generators registry and utilities. This object keep tracks of supplier functions or specific objects bound to classes. Different suppliers can be bound to the same type using 'tags'.","title":"Types"},{"location":"hexagon_core/com.hexagonkt.injection/-injection-manager/","text":"com.hexagonkt.injection / InjectionManager InjectionManager \u00b6 object InjectionManager Generators registry and utilities. This object keep tracks of supplier functions or specific objects bound to classes. Different suppliers can be bound to the same type using 'tags'. Functions \u00b6 Name Summary bind fun < T : Any , R : T > bind ( type : KClass < T > , tag : Any , force : Boolean , provider : () -> R ): Unit fun < T : Any , R : T > bind ( type : KClass < T > , tag : Any , provider : () -> R ): Unit fun < T : Any , R : T > bind ( type : KClass < T > , provider : () -> R ): Unit fun < T : Any > bind ( tag : Any , provider : () -> T ): Unit fun < T : Any > bind ( provider : () -> T ): Unit bindObject fun < T : Any , R : T > bindObject ( type : KClass < T > , tag : Any , instance : R ): Unit fun < T : Any , R : T > bindObject ( type : KClass < T > , instance : R ): Unit fun < T : Any > bindObject ( tag : Any , instance : T ): Unit fun < T : Any > bindObject ( instance : T ): Unit forceBind fun < T : Any , R : T > forceBind ( type : KClass < T > , tag : Any , provider : () -> R ): Unit fun < T : Any , R : T > forceBind ( type : KClass < T > , provider : () -> R ): Unit fun < T : Any > forceBind ( tag : Any , provider : () -> T ): Unit fun < T : Any > forceBind ( provider : () -> T ): Unit forceBindObject fun < T : Any , R : T > forceBindObject ( type : KClass < T > , tag : Any , instance : R ): Unit fun < T : Any , R : T > forceBindObject ( type : KClass < T > , instance : R ): Unit fun < T : Any > forceBindObject ( tag : Any , instance : T ): Unit fun < T : Any > forceBindObject ( instance : T ): Unit inject fun < T : Any > inject ( type : KClass < T > , tag : Any ): T fun < T : Any > inject ( tag : Any ): T fun < T : Any > inject ( type : KClass < T > ): T fun < T : Any > inject (): T invoke operator fun invoke ( block : InjectionManager .() -> Unit ): InjectionManager Extension Functions \u00b6 Name Summary convertToMap fun Any .convertToMap (): Map <* , *> serialize fun Any .serialize ( format : SerializationFormat = defaultFormat ): String fun Any .serialize ( contentType : String ): String","title":"Home"},{"location":"hexagon_core/com.hexagonkt.injection/-injection-manager/#injectionmanager","text":"object InjectionManager Generators registry and utilities. This object keep tracks of supplier functions or specific objects bound to classes. Different suppliers can be bound to the same type using 'tags'.","title":"InjectionManager"},{"location":"hexagon_core/com.hexagonkt.injection/-injection-manager/#functions","text":"Name Summary bind fun < T : Any , R : T > bind ( type : KClass < T > , tag : Any , force : Boolean , provider : () -> R ): Unit fun < T : Any , R : T > bind ( type : KClass < T > , tag : Any , provider : () -> R ): Unit fun < T : Any , R : T > bind ( type : KClass < T > , provider : () -> R ): Unit fun < T : Any > bind ( tag : Any , provider : () -> T ): Unit fun < T : Any > bind ( provider : () -> T ): Unit bindObject fun < T : Any , R : T > bindObject ( type : KClass < T > , tag : Any , instance : R ): Unit fun < T : Any , R : T > bindObject ( type : KClass < T > , instance : R ): Unit fun < T : Any > bindObject ( tag : Any , instance : T ): Unit fun < T : Any > bindObject ( instance : T ): Unit forceBind fun < T : Any , R : T > forceBind ( type : KClass < T > , tag : Any , provider : () -> R ): Unit fun < T : Any , R : T > forceBind ( type : KClass < T > , provider : () -> R ): Unit fun < T : Any > forceBind ( tag : Any , provider : () -> T ): Unit fun < T : Any > forceBind ( provider : () -> T ): Unit forceBindObject fun < T : Any , R : T > forceBindObject ( type : KClass < T > , tag : Any , instance : R ): Unit fun < T : Any , R : T > forceBindObject ( type : KClass < T > , instance : R ): Unit fun < T : Any > forceBindObject ( tag : Any , instance : T ): Unit fun < T : Any > forceBindObject ( instance : T ): Unit inject fun < T : Any > inject ( type : KClass < T > , tag : Any ): T fun < T : Any > inject ( tag : Any ): T fun < T : Any > inject ( type : KClass < T > ): T fun < T : Any > inject (): T invoke operator fun invoke ( block : InjectionManager .() -> Unit ): InjectionManager","title":"Functions"},{"location":"hexagon_core/com.hexagonkt.injection/-injection-manager/#extension-functions","text":"Name Summary convertToMap fun Any .convertToMap (): Map <* , *> serialize fun Any .serialize ( format : SerializationFormat = defaultFormat ): String fun Any .serialize ( contentType : String ): String","title":"Extension Functions"},{"location":"hexagon_core/com.hexagonkt.injection/-injection-manager/bind-object/","text":"com.hexagonkt.injection / InjectionManager / bindObject bindObject \u00b6 fun < T : Any , R : T > bindObject ( type : KClass < T > , tag : Any , instance : R ): Unit fun < T : Any , R : T > bindObject ( type : KClass < T > , instance : R ): Unit inline fun < reified T : Any > bindObject ( tag : Any , instance : T ): Unit inline fun < reified T : Any > bindObject ( instance : T ): Unit","title":"Bind object"},{"location":"hexagon_core/com.hexagonkt.injection/-injection-manager/bind-object/#bindobject","text":"fun < T : Any , R : T > bindObject ( type : KClass < T > , tag : Any , instance : R ): Unit fun < T : Any , R : T > bindObject ( type : KClass < T > , instance : R ): Unit inline fun < reified T : Any > bindObject ( tag : Any , instance : T ): Unit inline fun < reified T : Any > bindObject ( instance : T ): Unit","title":"bindObject"},{"location":"hexagon_core/com.hexagonkt.injection/-injection-manager/bind/","text":"com.hexagonkt.injection / InjectionManager / bind bind \u00b6 fun < T : Any , R : T > bind ( type : KClass < T > , tag : Any , force : Boolean , provider : () -> R ): Unit fun < T : Any , R : T > bind ( type : KClass < T > , tag : Any , provider : () -> R ): Unit fun < T : Any , R : T > bind ( type : KClass < T > , provider : () -> R ): Unit inline fun < reified T : Any > bind ( tag : Any , noinline provider : () -> T ): Unit inline fun < reified T : Any > bind ( noinline provider : () -> T ): Unit","title":"Bind"},{"location":"hexagon_core/com.hexagonkt.injection/-injection-manager/bind/#bind","text":"fun < T : Any , R : T > bind ( type : KClass < T > , tag : Any , force : Boolean , provider : () -> R ): Unit fun < T : Any , R : T > bind ( type : KClass < T > , tag : Any , provider : () -> R ): Unit fun < T : Any , R : T > bind ( type : KClass < T > , provider : () -> R ): Unit inline fun < reified T : Any > bind ( tag : Any , noinline provider : () -> T ): Unit inline fun < reified T : Any > bind ( noinline provider : () -> T ): Unit","title":"bind"},{"location":"hexagon_core/com.hexagonkt.injection/-injection-manager/force-bind-object/","text":"com.hexagonkt.injection / InjectionManager / forceBindObject forceBindObject \u00b6 fun < T : Any , R : T > forceBindObject ( type : KClass < T > , tag : Any , instance : R ): Unit fun < T : Any , R : T > forceBindObject ( type : KClass < T > , instance : R ): Unit inline fun < reified T : Any > forceBindObject ( tag : Any , instance : T ): Unit inline fun < reified T : Any > forceBindObject ( instance : T ): Unit","title":"Force bind object"},{"location":"hexagon_core/com.hexagonkt.injection/-injection-manager/force-bind-object/#forcebindobject","text":"fun < T : Any , R : T > forceBindObject ( type : KClass < T > , tag : Any , instance : R ): Unit fun < T : Any , R : T > forceBindObject ( type : KClass < T > , instance : R ): Unit inline fun < reified T : Any > forceBindObject ( tag : Any , instance : T ): Unit inline fun < reified T : Any > forceBindObject ( instance : T ): Unit","title":"forceBindObject"},{"location":"hexagon_core/com.hexagonkt.injection/-injection-manager/force-bind/","text":"com.hexagonkt.injection / InjectionManager / forceBind forceBind \u00b6 fun < T : Any , R : T > forceBind ( type : KClass < T > , tag : Any , provider : () -> R ): Unit fun < T : Any , R : T > forceBind ( type : KClass < T > , provider : () -> R ): Unit inline fun < reified T : Any > forceBind ( tag : Any , noinline provider : () -> T ): Unit inline fun < reified T : Any > forceBind ( noinline provider : () -> T ): Unit","title":"Force bind"},{"location":"hexagon_core/com.hexagonkt.injection/-injection-manager/force-bind/#forcebind","text":"fun < T : Any , R : T > forceBind ( type : KClass < T > , tag : Any , provider : () -> R ): Unit fun < T : Any , R : T > forceBind ( type : KClass < T > , provider : () -> R ): Unit inline fun < reified T : Any > forceBind ( tag : Any , noinline provider : () -> T ): Unit inline fun < reified T : Any > forceBind ( noinline provider : () -> T ): Unit","title":"forceBind"},{"location":"hexagon_core/com.hexagonkt.injection/-injection-manager/inject/","text":"com.hexagonkt.injection / InjectionManager / inject inject \u00b6 fun < T : Any > inject ( type : KClass < T > , tag : Any ): T inline fun < reified T : Any > inject ( tag : Any ): T fun < T : Any > inject ( type : KClass < T > ): T inline fun < reified T : Any > inject (): T","title":"Inject"},{"location":"hexagon_core/com.hexagonkt.injection/-injection-manager/inject/#inject","text":"fun < T : Any > inject ( type : KClass < T > , tag : Any ): T inline fun < reified T : Any > inject ( tag : Any ): T fun < T : Any > inject ( type : KClass < T > ): T inline fun < reified T : Any > inject (): T","title":"inject"},{"location":"hexagon_core/com.hexagonkt.injection/-injection-manager/invoke/","text":"com.hexagonkt.injection / InjectionManager / invoke invoke \u00b6 operator fun invoke ( block : InjectionManager .() -> Unit ): InjectionManager","title":"Invoke"},{"location":"hexagon_core/com.hexagonkt.injection/-injection-manager/invoke/#invoke","text":"operator fun invoke ( block : InjectionManager .() -> Unit ): InjectionManager","title":"invoke"},{"location":"hexagon_core/com.hexagonkt.serialization/","text":"com.hexagonkt.serialization Package com.hexagonkt.serialization \u00b6 Parse/serialize data in different formats to class instances. Types \u00b6 Name Summary ContentType data class ContentType Csv object Csv : SerializationFormat Json object Json : SerializationFormat SerializationFormat interface SerializationFormat SerializationManager object SerializationManager TODO Yaml object Yaml : SerializationFormat Exceptions \u00b6 Name Summary ParseException class ParseException : RuntimeException Extensions for External Classes \u00b6 Name Summary java.io.File java.io.InputStream java.net.URL kotlin.Any kotlin.collections.List kotlin.collections.Map kotlin.String Functions \u00b6 Name Summary parse fun < T : Any > Resource .parse ( type : KClass < T > ): T fun < T : Any > Resource .parse (): T parseObjects fun < T : Any > Resource .parseObjects ( type : KClass < T > ): List < T > fun < T : Any > Resource .parseObjects (): List < T >","title":"Home"},{"location":"hexagon_core/com.hexagonkt.serialization/#package-comhexagonktserialization","text":"Parse/serialize data in different formats to class instances.","title":"Package com.hexagonkt.serialization"},{"location":"hexagon_core/com.hexagonkt.serialization/#types","text":"Name Summary ContentType data class ContentType Csv object Csv : SerializationFormat Json object Json : SerializationFormat SerializationFormat interface SerializationFormat SerializationManager object SerializationManager TODO Yaml object Yaml : SerializationFormat","title":"Types"},{"location":"hexagon_core/com.hexagonkt.serialization/#exceptions","text":"Name Summary ParseException class ParseException : RuntimeException","title":"Exceptions"},{"location":"hexagon_core/com.hexagonkt.serialization/#extensions-for-external-classes","text":"Name Summary java.io.File java.io.InputStream java.net.URL kotlin.Any kotlin.collections.List kotlin.collections.Map kotlin.String","title":"Extensions for External Classes"},{"location":"hexagon_core/com.hexagonkt.serialization/#functions","text":"Name Summary parse fun < T : Any > Resource .parse ( type : KClass < T > ): T fun < T : Any > Resource .parse (): T parseObjects fun < T : Any > Resource .parseObjects ( type : KClass < T > ): List < T > fun < T : Any > Resource .parseObjects (): List < T >","title":"Functions"},{"location":"hexagon_core/com.hexagonkt.serialization/-json/","text":"com.hexagonkt.serialization / Json Json \u00b6 object Json : SerializationFormat Extension Functions \u00b6 Name Summary convertToMap fun Any .convertToMap (): Map <* , *> serialize fun Any .serialize ( format : SerializationFormat = defaultFormat ): String fun Any .serialize ( contentType : String ): String","title":" json"},{"location":"hexagon_core/com.hexagonkt.serialization/-json/#json","text":"object Json : SerializationFormat","title":"Json"},{"location":"hexagon_core/com.hexagonkt.serialization/-json/#extension-functions","text":"Name Summary convertToMap fun Any .convertToMap (): Map <* , *> serialize fun Any .serialize ( format : SerializationFormat = defaultFormat ): String fun Any .serialize ( contentType : String ): String","title":"Extension Functions"},{"location":"hexagon_core/com.hexagonkt.serialization/-yaml/","text":"com.hexagonkt.serialization / Yaml Yaml \u00b6 object Yaml : SerializationFormat Extension Functions \u00b6 Name Summary convertToMap fun Any .convertToMap (): Map <* , *> serialize fun Any .serialize ( format : SerializationFormat = defaultFormat ): String fun Any .serialize ( contentType : String ): String","title":" yaml"},{"location":"hexagon_core/com.hexagonkt.serialization/-yaml/#yaml","text":"object Yaml : SerializationFormat","title":"Yaml"},{"location":"hexagon_core/com.hexagonkt.serialization/-yaml/#extension-functions","text":"Name Summary convertToMap fun Any .convertToMap (): Map <* , *> serialize fun Any .serialize ( format : SerializationFormat = defaultFormat ): String fun Any .serialize ( contentType : String ): String","title":"Extension Functions"},{"location":"hexagon_core/com.hexagonkt.serialization/parse-objects/","text":"com.hexagonkt.serialization / parseObjects parseObjects \u00b6 fun < T : Any > Resource .parseObjects ( type : KClass < T > ): List < T > inline fun < reified T : Any > Resource .parseObjects (): List < T >","title":"Parse objects"},{"location":"hexagon_core/com.hexagonkt.serialization/parse-objects/#parseobjects","text":"fun < T : Any > Resource .parseObjects ( type : KClass < T > ): List < T > inline fun < reified T : Any > Resource .parseObjects (): List < T >","title":"parseObjects"},{"location":"hexagon_core/com.hexagonkt.serialization/parse/","text":"com.hexagonkt.serialization / parse parse \u00b6 fun < T : Any > Resource .parse ( type : KClass < T > ): T inline fun < reified T : Any > Resource .parse (): T","title":"Parse"},{"location":"hexagon_core/com.hexagonkt.serialization/parse/#parse","text":"fun < T : Any > Resource .parse ( type : KClass < T > ): T inline fun < reified T : Any > Resource .parse (): T","title":"parse"},{"location":"hexagon_core/com.hexagonkt.serialization/-content-type/","text":"com.hexagonkt.serialization / ContentType ContentType \u00b6 data class ContentType Constructors \u00b6 Name Summary <init> ContentType ( format : SerializationFormat , charset : Charset ? = null ) Properties \u00b6 Name Summary charset val charset: Charset ? format val format: SerializationFormat Functions \u00b6 Name Summary toString fun toString (): String Extension Functions \u00b6 Name Summary convertToMap fun Any .convertToMap (): Map <* , *> serialize fun Any .serialize ( format : SerializationFormat = defaultFormat ): String fun Any .serialize ( contentType : String ): String","title":"Home"},{"location":"hexagon_core/com.hexagonkt.serialization/-content-type/#contenttype","text":"data class ContentType","title":"ContentType"},{"location":"hexagon_core/com.hexagonkt.serialization/-content-type/#constructors","text":"Name Summary <init> ContentType ( format : SerializationFormat , charset : Charset ? = null )","title":"Constructors"},{"location":"hexagon_core/com.hexagonkt.serialization/-content-type/#properties","text":"Name Summary charset val charset: Charset ? format val format: SerializationFormat","title":"Properties"},{"location":"hexagon_core/com.hexagonkt.serialization/-content-type/#functions","text":"Name Summary toString fun toString (): String","title":"Functions"},{"location":"hexagon_core/com.hexagonkt.serialization/-content-type/#extension-functions","text":"Name Summary convertToMap fun Any .convertToMap (): Map <* , *> serialize fun Any .serialize ( format : SerializationFormat = defaultFormat ): String fun Any .serialize ( contentType : String ): String","title":"Extension Functions"},{"location":"hexagon_core/com.hexagonkt.serialization/-content-type/-init-/","text":"com.hexagonkt.serialization / ContentType / <init> <init> \u00b6 ContentType ( format : SerializationFormat , charset : Charset ? = null )","title":" init "},{"location":"hexagon_core/com.hexagonkt.serialization/-content-type/-init-/#init","text":"ContentType ( format : SerializationFormat , charset : Charset ? = null )","title":"&lt;init&gt;"},{"location":"hexagon_core/com.hexagonkt.serialization/-content-type/charset/","text":"com.hexagonkt.serialization / ContentType / charset charset \u00b6 val charset: Charset ?","title":"Charset"},{"location":"hexagon_core/com.hexagonkt.serialization/-content-type/charset/#charset","text":"val charset: Charset ?","title":"charset"},{"location":"hexagon_core/com.hexagonkt.serialization/-content-type/format/","text":"com.hexagonkt.serialization / ContentType / format format \u00b6 val format: SerializationFormat","title":"Format"},{"location":"hexagon_core/com.hexagonkt.serialization/-content-type/format/#format","text":"val format: SerializationFormat","title":"format"},{"location":"hexagon_core/com.hexagonkt.serialization/-content-type/to-string/","text":"com.hexagonkt.serialization / ContentType / toString toString \u00b6 fun toString (): String","title":"To string"},{"location":"hexagon_core/com.hexagonkt.serialization/-content-type/to-string/#tostring","text":"fun toString (): String","title":"toString"},{"location":"hexagon_core/com.hexagonkt.serialization/-csv/","text":"com.hexagonkt.serialization / Csv Csv \u00b6 object Csv : SerializationFormat Properties \u00b6 Name Summary contentType val contentType: String extensions val extensions: Set < String > isBinary val isBinary: Boolean Functions \u00b6 Name Summary parse fun < T : Any > parse ( input : InputStream , type : KClass < T > ): T parseObjects fun < T : Any > parseObjects ( input : InputStream , type : KClass < T > ): List < T > serialize fun serialize ( obj : Any , output : OutputStream ): Unit Inherited Functions \u00b6 Name Summary serialize open fun serialize ( obj : Any ): String Extension Functions \u00b6 Name Summary convertToMap fun Any .convertToMap (): Map <* , *> serialize fun Any .serialize ( format : SerializationFormat = defaultFormat ): String fun Any .serialize ( contentType : String ): String","title":"Home"},{"location":"hexagon_core/com.hexagonkt.serialization/-csv/#csv","text":"object Csv : SerializationFormat","title":"Csv"},{"location":"hexagon_core/com.hexagonkt.serialization/-csv/#properties","text":"Name Summary contentType val contentType: String extensions val extensions: Set < String > isBinary val isBinary: Boolean","title":"Properties"},{"location":"hexagon_core/com.hexagonkt.serialization/-csv/#functions","text":"Name Summary parse fun < T : Any > parse ( input : InputStream , type : KClass < T > ): T parseObjects fun < T : Any > parseObjects ( input : InputStream , type : KClass < T > ): List < T > serialize fun serialize ( obj : Any , output : OutputStream ): Unit","title":"Functions"},{"location":"hexagon_core/com.hexagonkt.serialization/-csv/#inherited-functions","text":"Name Summary serialize open fun serialize ( obj : Any ): String","title":"Inherited Functions"},{"location":"hexagon_core/com.hexagonkt.serialization/-csv/#extension-functions","text":"Name Summary convertToMap fun Any .convertToMap (): Map <* , *> serialize fun Any .serialize ( format : SerializationFormat = defaultFormat ): String fun Any .serialize ( contentType : String ): String","title":"Extension Functions"},{"location":"hexagon_core/com.hexagonkt.serialization/-csv/content-type/","text":"com.hexagonkt.serialization / Csv / contentType contentType \u00b6 val contentType: String Overrides SerializationFormat.contentType","title":"Content type"},{"location":"hexagon_core/com.hexagonkt.serialization/-csv/content-type/#contenttype","text":"val contentType: String Overrides SerializationFormat.contentType","title":"contentType"},{"location":"hexagon_core/com.hexagonkt.serialization/-csv/extensions/","text":"com.hexagonkt.serialization / Csv / extensions extensions \u00b6 val extensions: Set < String > Overrides SerializationFormat.extensions","title":"Extensions"},{"location":"hexagon_core/com.hexagonkt.serialization/-csv/extensions/#extensions","text":"val extensions: Set < String > Overrides SerializationFormat.extensions","title":"extensions"},{"location":"hexagon_core/com.hexagonkt.serialization/-csv/is-binary/","text":"com.hexagonkt.serialization / Csv / isBinary isBinary \u00b6 val isBinary: Boolean Overrides SerializationFormat.isBinary","title":"Is binary"},{"location":"hexagon_core/com.hexagonkt.serialization/-csv/is-binary/#isbinary","text":"val isBinary: Boolean Overrides SerializationFormat.isBinary","title":"isBinary"},{"location":"hexagon_core/com.hexagonkt.serialization/-csv/parse-objects/","text":"com.hexagonkt.serialization / Csv / parseObjects parseObjects \u00b6 fun < T : Any > parseObjects ( input : InputStream , type : KClass < T > ): List < T > Overrides SerializationFormat.parseObjects","title":"Parse objects"},{"location":"hexagon_core/com.hexagonkt.serialization/-csv/parse-objects/#parseobjects","text":"fun < T : Any > parseObjects ( input : InputStream , type : KClass < T > ): List < T > Overrides SerializationFormat.parseObjects","title":"parseObjects"},{"location":"hexagon_core/com.hexagonkt.serialization/-csv/parse/","text":"com.hexagonkt.serialization / Csv / parse parse \u00b6 fun < T : Any > parse ( input : InputStream , type : KClass < T > ): T Overrides SerializationFormat.parse","title":"Parse"},{"location":"hexagon_core/com.hexagonkt.serialization/-csv/parse/#parse","text":"fun < T : Any > parse ( input : InputStream , type : KClass < T > ): T Overrides SerializationFormat.parse","title":"parse"},{"location":"hexagon_core/com.hexagonkt.serialization/-csv/serialize/","text":"com.hexagonkt.serialization / Csv / serialize serialize \u00b6 fun serialize ( obj : Any , output : OutputStream ): Unit Overrides SerializationFormat.serialize","title":"Serialize"},{"location":"hexagon_core/com.hexagonkt.serialization/-csv/serialize/#serialize","text":"fun serialize ( obj : Any , output : OutputStream ): Unit Overrides SerializationFormat.serialize","title":"serialize"},{"location":"hexagon_core/com.hexagonkt.serialization/-parse-exception/","text":"com.hexagonkt.serialization / ParseException ParseException \u00b6 class ParseException : RuntimeException Constructors \u00b6 Name Summary <init> ParseException ( cause : Throwable ? = null ) Properties \u00b6 Name Summary field val field: String Extension Functions \u00b6 Name Summary convertToMap fun Any .convertToMap (): Map <* , *> filterStackTrace fun Throwable .filterStackTrace ( prefix : String ): Array < out StackTraceElement > Returns the stack trace array of the frames that starts with the given prefix. serialize fun Any .serialize ( format : SerializationFormat = defaultFormat ): String fun Any .serialize ( contentType : String ): String toText fun Throwable .toText ( prefix : String = \"\" ): String Returns this throwable as a text.","title":"Home"},{"location":"hexagon_core/com.hexagonkt.serialization/-parse-exception/#parseexception","text":"class ParseException : RuntimeException","title":"ParseException"},{"location":"hexagon_core/com.hexagonkt.serialization/-parse-exception/#constructors","text":"Name Summary <init> ParseException ( cause : Throwable ? = null )","title":"Constructors"},{"location":"hexagon_core/com.hexagonkt.serialization/-parse-exception/#properties","text":"Name Summary field val field: String","title":"Properties"},{"location":"hexagon_core/com.hexagonkt.serialization/-parse-exception/#extension-functions","text":"Name Summary convertToMap fun Any .convertToMap (): Map <* , *> filterStackTrace fun Throwable .filterStackTrace ( prefix : String ): Array < out StackTraceElement > Returns the stack trace array of the frames that starts with the given prefix. serialize fun Any .serialize ( format : SerializationFormat = defaultFormat ): String fun Any .serialize ( contentType : String ): String toText fun Throwable .toText ( prefix : String = \"\" ): String Returns this throwable as a text.","title":"Extension Functions"},{"location":"hexagon_core/com.hexagonkt.serialization/-parse-exception/-init-/","text":"com.hexagonkt.serialization / ParseException / <init> <init> \u00b6 ParseException ( cause : Throwable ? = null )","title":" init "},{"location":"hexagon_core/com.hexagonkt.serialization/-parse-exception/-init-/#init","text":"ParseException ( cause : Throwable ? = null )","title":"&lt;init&gt;"},{"location":"hexagon_core/com.hexagonkt.serialization/-parse-exception/field/","text":"com.hexagonkt.serialization / ParseException / field field \u00b6 val field: String","title":"Field"},{"location":"hexagon_core/com.hexagonkt.serialization/-parse-exception/field/#field","text":"val field: String","title":"field"},{"location":"hexagon_core/com.hexagonkt.serialization/-serialization-format/","text":"com.hexagonkt.serialization / SerializationFormat SerializationFormat \u00b6 interface SerializationFormat Properties \u00b6 Name Summary contentType abstract val contentType: String extensions abstract val extensions: Set < String > isBinary abstract val isBinary: Boolean Functions \u00b6 Name Summary parse abstract fun < T : Any > parse ( input : InputStream , type : KClass < T > ): T parseObjects abstract fun < T : Any > parseObjects ( input : InputStream , type : KClass < T > ): List < T > serialize abstract fun serialize ( obj : Any , output : OutputStream ): Unit open fun serialize ( obj : Any ): String Extension Functions \u00b6 Name Summary convertToMap fun Any .convertToMap (): Map <* , *> serialize fun Any .serialize ( format : SerializationFormat = defaultFormat ): String fun Any .serialize ( contentType : String ): String Inheritors \u00b6 Name Summary Csv object Csv : SerializationFormat Json object Json : SerializationFormat Yaml object Yaml : SerializationFormat","title":"Home"},{"location":"hexagon_core/com.hexagonkt.serialization/-serialization-format/#serializationformat","text":"interface SerializationFormat","title":"SerializationFormat"},{"location":"hexagon_core/com.hexagonkt.serialization/-serialization-format/#properties","text":"Name Summary contentType abstract val contentType: String extensions abstract val extensions: Set < String > isBinary abstract val isBinary: Boolean","title":"Properties"},{"location":"hexagon_core/com.hexagonkt.serialization/-serialization-format/#functions","text":"Name Summary parse abstract fun < T : Any > parse ( input : InputStream , type : KClass < T > ): T parseObjects abstract fun < T : Any > parseObjects ( input : InputStream , type : KClass < T > ): List < T > serialize abstract fun serialize ( obj : Any , output : OutputStream ): Unit open fun serialize ( obj : Any ): String","title":"Functions"},{"location":"hexagon_core/com.hexagonkt.serialization/-serialization-format/#extension-functions","text":"Name Summary convertToMap fun Any .convertToMap (): Map <* , *> serialize fun Any .serialize ( format : SerializationFormat = defaultFormat ): String fun Any .serialize ( contentType : String ): String","title":"Extension Functions"},{"location":"hexagon_core/com.hexagonkt.serialization/-serialization-format/#inheritors","text":"Name Summary Csv object Csv : SerializationFormat Json object Json : SerializationFormat Yaml object Yaml : SerializationFormat","title":"Inheritors"},{"location":"hexagon_core/com.hexagonkt.serialization/-serialization-format/content-type/","text":"com.hexagonkt.serialization / SerializationFormat / contentType contentType \u00b6 abstract val contentType: String","title":"Content type"},{"location":"hexagon_core/com.hexagonkt.serialization/-serialization-format/content-type/#contenttype","text":"abstract val contentType: String","title":"contentType"},{"location":"hexagon_core/com.hexagonkt.serialization/-serialization-format/extensions/","text":"com.hexagonkt.serialization / SerializationFormat / extensions extensions \u00b6 abstract val extensions: Set < String >","title":"Extensions"},{"location":"hexagon_core/com.hexagonkt.serialization/-serialization-format/extensions/#extensions","text":"abstract val extensions: Set < String >","title":"extensions"},{"location":"hexagon_core/com.hexagonkt.serialization/-serialization-format/is-binary/","text":"com.hexagonkt.serialization / SerializationFormat / isBinary isBinary \u00b6 abstract val isBinary: Boolean","title":"Is binary"},{"location":"hexagon_core/com.hexagonkt.serialization/-serialization-format/is-binary/#isbinary","text":"abstract val isBinary: Boolean","title":"isBinary"},{"location":"hexagon_core/com.hexagonkt.serialization/-serialization-format/parse-objects/","text":"com.hexagonkt.serialization / SerializationFormat / parseObjects parseObjects \u00b6 abstract fun < T : Any > parseObjects ( input : InputStream , type : KClass < T > ): List < T >","title":"Parse objects"},{"location":"hexagon_core/com.hexagonkt.serialization/-serialization-format/parse-objects/#parseobjects","text":"abstract fun < T : Any > parseObjects ( input : InputStream , type : KClass < T > ): List < T >","title":"parseObjects"},{"location":"hexagon_core/com.hexagonkt.serialization/-serialization-format/parse/","text":"com.hexagonkt.serialization / SerializationFormat / parse parse \u00b6 abstract fun < T : Any > parse ( input : InputStream , type : KClass < T > ): T","title":"Parse"},{"location":"hexagon_core/com.hexagonkt.serialization/-serialization-format/parse/#parse","text":"abstract fun < T : Any > parse ( input : InputStream , type : KClass < T > ): T","title":"parse"},{"location":"hexagon_core/com.hexagonkt.serialization/-serialization-format/serialize/","text":"com.hexagonkt.serialization / SerializationFormat / serialize serialize \u00b6 abstract fun serialize ( obj : Any , output : OutputStream ): Unit open fun serialize ( obj : Any ): String","title":"Serialize"},{"location":"hexagon_core/com.hexagonkt.serialization/-serialization-format/serialize/#serialize","text":"abstract fun serialize ( obj : Any , output : OutputStream ): Unit open fun serialize ( obj : Any ): String","title":"serialize"},{"location":"hexagon_core/com.hexagonkt.serialization/-serialization-manager/","text":"com.hexagonkt.serialization / SerializationManager SerializationManager \u00b6 object SerializationManager TODO Can be a Serializator immutable class and: object SerializationManager : Serializator(mimeTypesResource, formats) Properties \u00b6 Name Summary defaultFormat var defaultFormat : SerializationFormat formats var formats : LinkedHashSet < SerializationFormat > List of formats. NOTE should be defined AFTER mapper definition to avoid runtime issues. Functions \u00b6 Name Summary contentTypeOf fun contentTypeOf ( extension : String ): String ? fun contentTypeOf ( url : URL ): String ? fun contentTypeOf ( file : File ): String ? fun contentTypeOf ( resource : Resource ): String ? defaultFormat fun defaultFormat ( defaultFormat : SerializationFormat ): Unit formatOf fun formatOf ( contentType : String ): SerializationFormat fun formatOf ( contentType : String , defaultFormat : SerializationFormat ): SerializationFormat fun formatOf ( url : URL ): SerializationFormat fun formatOf ( file : File ): SerializationFormat fun formatOf ( resource : Resource ): SerializationFormat formats fun formats ( vararg formats : SerializationFormat ): Unit Extension Functions \u00b6 Name Summary convertToMap fun Any .convertToMap (): Map <* , *> serialize fun Any .serialize ( format : SerializationFormat = defaultFormat ): String fun Any .serialize ( contentType : String ): String","title":"Home"},{"location":"hexagon_core/com.hexagonkt.serialization/-serialization-manager/#serializationmanager","text":"object SerializationManager TODO Can be a Serializator immutable class and: object SerializationManager : Serializator(mimeTypesResource, formats)","title":"SerializationManager"},{"location":"hexagon_core/com.hexagonkt.serialization/-serialization-manager/#properties","text":"Name Summary defaultFormat var defaultFormat : SerializationFormat formats var formats : LinkedHashSet < SerializationFormat > List of formats. NOTE should be defined AFTER mapper definition to avoid runtime issues.","title":"Properties"},{"location":"hexagon_core/com.hexagonkt.serialization/-serialization-manager/#functions","text":"Name Summary contentTypeOf fun contentTypeOf ( extension : String ): String ? fun contentTypeOf ( url : URL ): String ? fun contentTypeOf ( file : File ): String ? fun contentTypeOf ( resource : Resource ): String ? defaultFormat fun defaultFormat ( defaultFormat : SerializationFormat ): Unit formatOf fun formatOf ( contentType : String ): SerializationFormat fun formatOf ( contentType : String , defaultFormat : SerializationFormat ): SerializationFormat fun formatOf ( url : URL ): SerializationFormat fun formatOf ( file : File ): SerializationFormat fun formatOf ( resource : Resource ): SerializationFormat formats fun formats ( vararg formats : SerializationFormat ): Unit","title":"Functions"},{"location":"hexagon_core/com.hexagonkt.serialization/-serialization-manager/#extension-functions","text":"Name Summary convertToMap fun Any .convertToMap (): Map <* , *> serialize fun Any .serialize ( format : SerializationFormat = defaultFormat ): String fun Any .serialize ( contentType : String ): String","title":"Extension Functions"},{"location":"hexagon_core/com.hexagonkt.serialization/-serialization-manager/content-type-of/","text":"com.hexagonkt.serialization / SerializationManager / contentTypeOf contentTypeOf \u00b6 fun contentTypeOf ( extension : String ): String ? fun contentTypeOf ( url : URL ): String ? fun contentTypeOf ( file : File ): String ? fun contentTypeOf ( resource : Resource ): String ?","title":"Content type of"},{"location":"hexagon_core/com.hexagonkt.serialization/-serialization-manager/content-type-of/#contenttypeof","text":"fun contentTypeOf ( extension : String ): String ? fun contentTypeOf ( url : URL ): String ? fun contentTypeOf ( file : File ): String ? fun contentTypeOf ( resource : Resource ): String ?","title":"contentTypeOf"},{"location":"hexagon_core/com.hexagonkt.serialization/-serialization-manager/default-format/","text":"com.hexagonkt.serialization / SerializationManager / defaultFormat defaultFormat \u00b6 var defaultFormat : SerializationFormat fun defaultFormat ( defaultFormat : SerializationFormat ): Unit","title":"Default format"},{"location":"hexagon_core/com.hexagonkt.serialization/-serialization-manager/default-format/#defaultformat","text":"var defaultFormat : SerializationFormat fun defaultFormat ( defaultFormat : SerializationFormat ): Unit","title":"defaultFormat"},{"location":"hexagon_core/com.hexagonkt.serialization/-serialization-manager/format-of/","text":"com.hexagonkt.serialization / SerializationManager / formatOf formatOf \u00b6 fun formatOf ( contentType : String ): SerializationFormat fun formatOf ( contentType : String , defaultFormat : SerializationFormat ): SerializationFormat fun formatOf ( url : URL ): SerializationFormat fun formatOf ( file : File ): SerializationFormat fun formatOf ( resource : Resource ): SerializationFormat","title":"Format of"},{"location":"hexagon_core/com.hexagonkt.serialization/-serialization-manager/format-of/#formatof","text":"fun formatOf ( contentType : String ): SerializationFormat fun formatOf ( contentType : String , defaultFormat : SerializationFormat ): SerializationFormat fun formatOf ( url : URL ): SerializationFormat fun formatOf ( file : File ): SerializationFormat fun formatOf ( resource : Resource ): SerializationFormat","title":"formatOf"},{"location":"hexagon_core/com.hexagonkt.serialization/-serialization-manager/formats/","text":"com.hexagonkt.serialization / SerializationManager / formats formats \u00b6 var formats : LinkedHashSet < SerializationFormat > List of formats. NOTE should be defined AFTER mapper definition to avoid runtime issues. fun formats ( vararg formats : SerializationFormat ): Unit","title":"Formats"},{"location":"hexagon_core/com.hexagonkt.serialization/-serialization-manager/formats/#formats","text":"var formats : LinkedHashSet < SerializationFormat > List of formats. NOTE should be defined AFTER mapper definition to avoid runtime issues. fun formats ( vararg formats : SerializationFormat ): Unit","title":"formats"},{"location":"hexagon_core/com.hexagonkt.serialization/java.io.-file/","text":"com.hexagonkt.serialization / java.io.File Extensions for java.io.File \u00b6 Name Summary parse fun < T : Any > File .parse ( type : KClass < T > ): T fun < T : Any > File .parse (): T parseObjects fun < T : Any > File .parseObjects ( type : KClass < T > ): List < T > fun < T : Any > File .parseObjects (): List < T >","title":"Home"},{"location":"hexagon_core/com.hexagonkt.serialization/java.io.-file/#extensions-for-javaiofile","text":"Name Summary parse fun < T : Any > File .parse ( type : KClass < T > ): T fun < T : Any > File .parse (): T parseObjects fun < T : Any > File .parseObjects ( type : KClass < T > ): List < T > fun < T : Any > File .parseObjects (): List < T >","title":"Extensions for java.io.File"},{"location":"hexagon_core/com.hexagonkt.serialization/java.io.-file/parse-objects/","text":"com.hexagonkt.serialization / java.io.File / parseObjects parseObjects \u00b6 fun < T : Any > File .parseObjects ( type : KClass < T > ): List < T > inline fun < reified T : Any > File .parseObjects (): List < T >","title":"Parse objects"},{"location":"hexagon_core/com.hexagonkt.serialization/java.io.-file/parse-objects/#parseobjects","text":"fun < T : Any > File .parseObjects ( type : KClass < T > ): List < T > inline fun < reified T : Any > File .parseObjects (): List < T >","title":"parseObjects"},{"location":"hexagon_core/com.hexagonkt.serialization/java.io.-file/parse/","text":"com.hexagonkt.serialization / java.io.File / parse parse \u00b6 fun < T : Any > File .parse ( type : KClass < T > ): T inline fun < reified T : Any > File .parse (): T","title":"Parse"},{"location":"hexagon_core/com.hexagonkt.serialization/java.io.-file/parse/#parse","text":"fun < T : Any > File .parse ( type : KClass < T > ): T inline fun < reified T : Any > File .parse (): T","title":"parse"},{"location":"hexagon_core/com.hexagonkt.serialization/java.io.-input-stream/","text":"com.hexagonkt.serialization / java.io.InputStream Extensions for java.io.InputStream \u00b6 Name Summary parse fun < T : Any > InputStream .parse ( type : KClass < T > , format : SerializationFormat = defaultFormat ): T fun < T : Any > InputStream .parse ( format : SerializationFormat = defaultFormat ): T parseObjects fun < T : Any > InputStream .parseObjects ( type : KClass < T > , format : SerializationFormat = defaultFormat ): List < T > fun < T : Any > InputStream .parseObjects ( format : SerializationFormat = defaultFormat ): List < T >","title":"Home"},{"location":"hexagon_core/com.hexagonkt.serialization/java.io.-input-stream/#extensions-for-javaioinputstream","text":"Name Summary parse fun < T : Any > InputStream .parse ( type : KClass < T > , format : SerializationFormat = defaultFormat ): T fun < T : Any > InputStream .parse ( format : SerializationFormat = defaultFormat ): T parseObjects fun < T : Any > InputStream .parseObjects ( type : KClass < T > , format : SerializationFormat = defaultFormat ): List < T > fun < T : Any > InputStream .parseObjects ( format : SerializationFormat = defaultFormat ): List < T >","title":"Extensions for java.io.InputStream"},{"location":"hexagon_core/com.hexagonkt.serialization/java.io.-input-stream/parse-objects/","text":"com.hexagonkt.serialization / java.io.InputStream / parseObjects parseObjects \u00b6 fun < T : Any > InputStream .parseObjects ( type : KClass < T > , format : SerializationFormat = defaultFormat ): List < T > inline fun < reified T : Any > InputStream .parseObjects ( format : SerializationFormat = defaultFormat ): List < T >","title":"Parse objects"},{"location":"hexagon_core/com.hexagonkt.serialization/java.io.-input-stream/parse-objects/#parseobjects","text":"fun < T : Any > InputStream .parseObjects ( type : KClass < T > , format : SerializationFormat = defaultFormat ): List < T > inline fun < reified T : Any > InputStream .parseObjects ( format : SerializationFormat = defaultFormat ): List < T >","title":"parseObjects"},{"location":"hexagon_core/com.hexagonkt.serialization/java.io.-input-stream/parse/","text":"com.hexagonkt.serialization / java.io.InputStream / parse parse \u00b6 fun < T : Any > InputStream .parse ( type : KClass < T > , format : SerializationFormat = defaultFormat ): T inline fun < reified T : Any > InputStream .parse ( format : SerializationFormat = defaultFormat ): T","title":"Parse"},{"location":"hexagon_core/com.hexagonkt.serialization/java.io.-input-stream/parse/#parse","text":"fun < T : Any > InputStream .parse ( type : KClass < T > , format : SerializationFormat = defaultFormat ): T inline fun < reified T : Any > InputStream .parse ( format : SerializationFormat = defaultFormat ): T","title":"parse"},{"location":"hexagon_core/com.hexagonkt.serialization/java.net.-u-r-l/","text":"com.hexagonkt.serialization / java.net.URL Extensions for java.net.URL \u00b6 Name Summary parse fun < T : Any > URL .parse ( type : KClass < T > ): T fun < T : Any > URL .parse (): T parseObjects fun < T : Any > URL .parseObjects ( type : KClass < T > ): List < T > fun < T : Any > URL .parseObjects (): List < T >","title":"Home"},{"location":"hexagon_core/com.hexagonkt.serialization/java.net.-u-r-l/#extensions-for-javaneturl","text":"Name Summary parse fun < T : Any > URL .parse ( type : KClass < T > ): T fun < T : Any > URL .parse (): T parseObjects fun < T : Any > URL .parseObjects ( type : KClass < T > ): List < T > fun < T : Any > URL .parseObjects (): List < T >","title":"Extensions for java.net.URL"},{"location":"hexagon_core/com.hexagonkt.serialization/java.net.-u-r-l/parse-objects/","text":"com.hexagonkt.serialization / java.net.URL / parseObjects parseObjects \u00b6 fun < T : Any > URL .parseObjects ( type : KClass < T > ): List < T > inline fun < reified T : Any > URL .parseObjects (): List < T >","title":"Parse objects"},{"location":"hexagon_core/com.hexagonkt.serialization/java.net.-u-r-l/parse-objects/#parseobjects","text":"fun < T : Any > URL .parseObjects ( type : KClass < T > ): List < T > inline fun < reified T : Any > URL .parseObjects (): List < T >","title":"parseObjects"},{"location":"hexagon_core/com.hexagonkt.serialization/java.net.-u-r-l/parse/","text":"com.hexagonkt.serialization / java.net.URL / parse parse \u00b6 fun < T : Any > URL .parse ( type : KClass < T > ): T inline fun < reified T : Any > URL .parse (): T","title":"Parse"},{"location":"hexagon_core/com.hexagonkt.serialization/java.net.-u-r-l/parse/#parse","text":"fun < T : Any > URL .parse ( type : KClass < T > ): T inline fun < reified T : Any > URL .parse (): T","title":"parse"},{"location":"hexagon_core/com.hexagonkt.serialization/kotlin.-any/","text":"com.hexagonkt.serialization / kotlin.Any Extensions for kotlin.Any \u00b6 Name Summary convertToMap fun Any .convertToMap (): Map <* , *> serialize fun Any .serialize ( format : SerializationFormat = defaultFormat ): String fun Any .serialize ( contentType : String ): String","title":"Home"},{"location":"hexagon_core/com.hexagonkt.serialization/kotlin.-any/#extensions-for-kotlinany","text":"Name Summary convertToMap fun Any .convertToMap (): Map <* , *> serialize fun Any .serialize ( format : SerializationFormat = defaultFormat ): String fun Any .serialize ( contentType : String ): String","title":"Extensions for kotlin.Any"},{"location":"hexagon_core/com.hexagonkt.serialization/kotlin.-any/convert-to-map/","text":"com.hexagonkt.serialization / kotlin.Any / convertToMap convertToMap \u00b6 fun Any .convertToMap (): Map <* , *>","title":"Convert to map"},{"location":"hexagon_core/com.hexagonkt.serialization/kotlin.-any/convert-to-map/#converttomap","text":"fun Any .convertToMap (): Map <* , *>","title":"convertToMap"},{"location":"hexagon_core/com.hexagonkt.serialization/kotlin.-any/serialize/","text":"com.hexagonkt.serialization / kotlin.Any / serialize serialize \u00b6 fun Any .serialize ( format : SerializationFormat = defaultFormat ): String fun Any .serialize ( contentType : String ): String","title":"Serialize"},{"location":"hexagon_core/com.hexagonkt.serialization/kotlin.-any/serialize/#serialize","text":"fun Any .serialize ( format : SerializationFormat = defaultFormat ): String fun Any .serialize ( contentType : String ): String","title":"serialize"},{"location":"hexagon_core/com.hexagonkt.serialization/kotlin.-string/","text":"com.hexagonkt.serialization / kotlin.String Extensions for kotlin.String \u00b6 Name Summary parse fun < T : Any > any_iterable < T > . parse ( type : KClass < T > , format : SerializationFormat = defaultFormat ): T parseObjects fun < T : Any > any_iterable < T > . parseObjects ( type : KClass < T > , format : SerializationFormat = defaultFormat ): List < T >","title":"Home"},{"location":"hexagon_core/com.hexagonkt.serialization/kotlin.-string/#extensions-for-kotlinstring","text":"Name Summary parse fun < T : Any > any_iterable < T > . parse ( type : KClass < T > , format : SerializationFormat = defaultFormat ): T parseObjects fun < T : Any > any_iterable < T > . parseObjects ( type : KClass < T > , format : SerializationFormat = defaultFormat ): List < T >","title":"Extensions for kotlin.String"},{"location":"hexagon_core/com.hexagonkt.serialization/kotlin.-string/parse-objects/","text":"com.hexagonkt.serialization / kotlin.String / parseObjects parseObjects \u00b6 fun < T : Any > String .parseObjects ( type : KClass < T > , format : SerializationFormat = defaultFormat ): List < T > inline fun < reified T : Any > String .parseObjects ( format : SerializationFormat = defaultFormat ): List < T >","title":"Parse objects"},{"location":"hexagon_core/com.hexagonkt.serialization/kotlin.-string/parse-objects/#parseobjects","text":"fun < T : Any > String .parseObjects ( type : KClass < T > , format : SerializationFormat = defaultFormat ): List < T > inline fun < reified T : Any > String .parseObjects ( format : SerializationFormat = defaultFormat ): List < T >","title":"parseObjects"},{"location":"hexagon_core/com.hexagonkt.serialization/kotlin.-string/parse/","text":"com.hexagonkt.serialization / kotlin.String / parse parse \u00b6 fun < T : Any > String .parse ( type : KClass < T > , format : SerializationFormat = defaultFormat ): T inline fun < reified T : Any > String .parse ( format : SerializationFormat = defaultFormat ): T","title":"Parse"},{"location":"hexagon_core/com.hexagonkt.serialization/kotlin.-string/parse/#parse","text":"fun < T : Any > String .parse ( type : KClass < T > , format : SerializationFormat = defaultFormat ): T inline fun < reified T : Any > String .parse ( format : SerializationFormat = defaultFormat ): T","title":"parse"},{"location":"hexagon_core/com.hexagonkt.serialization/kotlin.collections.-list/","text":"com.hexagonkt.serialization / kotlin.collections.List Extensions for kotlin.collections.List \u00b6 Name Summary convertToObjects fun < T : Any > List < Map <* , *>> . convertToObjects ( type : KClass < T > ): List < T > fun < T : Any > List < Map <* , *>> . convertToObjects (): List < T >","title":"Home"},{"location":"hexagon_core/com.hexagonkt.serialization/kotlin.collections.-list/#extensions-for-kotlincollectionslist","text":"Name Summary convertToObjects fun < T : Any > List < Map <* , *>> . convertToObjects ( type : KClass < T > ): List < T > fun < T : Any > List < Map <* , *>> . convertToObjects (): List < T >","title":"Extensions for kotlin.collections.List"},{"location":"hexagon_core/com.hexagonkt.serialization/kotlin.collections.-list/convert-to-objects/","text":"com.hexagonkt.serialization / kotlin.collections.List / convertToObjects convertToObjects \u00b6 fun < T : Any > List < Map <* , *>> . convertToObjects ( type : KClass < T > ): List < T > inline fun < reified T : Any > List < Map <* , *>> . convertToObjects (): List < T >","title":"Convert to objects"},{"location":"hexagon_core/com.hexagonkt.serialization/kotlin.collections.-list/convert-to-objects/#converttoobjects","text":"fun < T : Any > List < Map <* , *>> . convertToObjects ( type : KClass < T > ): List < T > inline fun < reified T : Any > List < Map <* , *>> . convertToObjects (): List < T >","title":"convertToObjects"},{"location":"hexagon_core/com.hexagonkt.serialization/kotlin.collections.-map/","text":"com.hexagonkt.serialization / kotlin.collections.Map Extensions for kotlin.collections.Map \u00b6 Name Summary convertToObject fun < T : Any > Map <* , *> . convertToObject ( type : KClass < T > ): T fun < T : Any > Map <* , *> . convertToObject (): T","title":"Home"},{"location":"hexagon_core/com.hexagonkt.serialization/kotlin.collections.-map/#extensions-for-kotlincollectionsmap","text":"Name Summary convertToObject fun < T : Any > Map <* , *> . convertToObject ( type : KClass < T > ): T fun < T : Any > Map <* , *> . convertToObject (): T","title":"Extensions for kotlin.collections.Map"},{"location":"hexagon_core/com.hexagonkt.serialization/kotlin.collections.-map/convert-to-object/","text":"com.hexagonkt.serialization / kotlin.collections.Map / convertToObject convertToObject \u00b6 fun < T : Any > Map <* , *> . convertToObject ( type : KClass < T > ): T inline fun < reified T : Any > Map <* , *> . convertToObject (): T","title":"Convert to object"},{"location":"hexagon_core/com.hexagonkt.serialization/kotlin.collections.-map/convert-to-object/#converttoobject","text":"fun < T : Any > Map <* , *> . convertToObject ( type : KClass < T > ): T inline fun < reified T : Any > Map <* , *> . convertToObject (): T","title":"convertToObject"},{"location":"hexagon_core/com.hexagonkt.settings/","text":"com.hexagonkt.settings Package com.hexagonkt.settings \u00b6 Load settings from different data sources and formats. Types \u00b6 Name Summary CommandLineArgumentsSource class CommandLineArgumentsSource : SettingsSource EnvironmentVariablesSource class EnvironmentVariablesSource : SettingsSource FileSource class FileSource : SettingsSource ObjectSource class ObjectSource : SettingsSource ResourceSource class ResourceSource : SettingsSource SettingsManager object SettingsManager SettingsSource interface SettingsSource SystemPropertiesSource class SystemPropertiesSource : SettingsSource","title":"Home"},{"location":"hexagon_core/com.hexagonkt.settings/#package-comhexagonktsettings","text":"Load settings from different data sources and formats.","title":"Package com.hexagonkt.settings"},{"location":"hexagon_core/com.hexagonkt.settings/#types","text":"Name Summary CommandLineArgumentsSource class CommandLineArgumentsSource : SettingsSource EnvironmentVariablesSource class EnvironmentVariablesSource : SettingsSource FileSource class FileSource : SettingsSource ObjectSource class ObjectSource : SettingsSource ResourceSource class ResourceSource : SettingsSource SettingsManager object SettingsManager SettingsSource interface SettingsSource SystemPropertiesSource class SystemPropertiesSource : SettingsSource","title":"Types"},{"location":"hexagon_core/com.hexagonkt.settings/-command-line-arguments-source/","text":"com.hexagonkt.settings / CommandLineArgumentsSource CommandLineArgumentsSource \u00b6 class CommandLineArgumentsSource : SettingsSource Constructors \u00b6 Name Summary <init> CommandLineArgumentsSource ( args : Array < out String > ) CommandLineArgumentsSource ( args : List < String > ) Properties \u00b6 Name Summary args val args: List < String > Functions \u00b6 Name Summary load fun load (): Map < String , *> toString fun toString (): String Extension Functions \u00b6 Name Summary convertToMap fun Any .convertToMap (): Map <* , *> serialize fun Any .serialize ( format : SerializationFormat = defaultFormat ): String fun Any .serialize ( contentType : String ): String","title":"Home"},{"location":"hexagon_core/com.hexagonkt.settings/-command-line-arguments-source/#commandlineargumentssource","text":"class CommandLineArgumentsSource : SettingsSource","title":"CommandLineArgumentsSource"},{"location":"hexagon_core/com.hexagonkt.settings/-command-line-arguments-source/#constructors","text":"Name Summary <init> CommandLineArgumentsSource ( args : Array < out String > ) CommandLineArgumentsSource ( args : List < String > )","title":"Constructors"},{"location":"hexagon_core/com.hexagonkt.settings/-command-line-arguments-source/#properties","text":"Name Summary args val args: List < String >","title":"Properties"},{"location":"hexagon_core/com.hexagonkt.settings/-command-line-arguments-source/#functions","text":"Name Summary load fun load (): Map < String , *> toString fun toString (): String","title":"Functions"},{"location":"hexagon_core/com.hexagonkt.settings/-command-line-arguments-source/#extension-functions","text":"Name Summary convertToMap fun Any .convertToMap (): Map <* , *> serialize fun Any .serialize ( format : SerializationFormat = defaultFormat ): String fun Any .serialize ( contentType : String ): String","title":"Extension Functions"},{"location":"hexagon_core/com.hexagonkt.settings/-command-line-arguments-source/-init-/","text":"com.hexagonkt.settings / CommandLineArgumentsSource / <init> <init> \u00b6 CommandLineArgumentsSource ( args : Array < out String > ) CommandLineArgumentsSource ( args : List < String > )","title":" init "},{"location":"hexagon_core/com.hexagonkt.settings/-command-line-arguments-source/-init-/#init","text":"CommandLineArgumentsSource ( args : Array < out String > ) CommandLineArgumentsSource ( args : List < String > )","title":"&lt;init&gt;"},{"location":"hexagon_core/com.hexagonkt.settings/-command-line-arguments-source/args/","text":"com.hexagonkt.settings / CommandLineArgumentsSource / args args \u00b6 val args: List < String >","title":"Args"},{"location":"hexagon_core/com.hexagonkt.settings/-command-line-arguments-source/args/#args","text":"val args: List < String >","title":"args"},{"location":"hexagon_core/com.hexagonkt.settings/-command-line-arguments-source/load/","text":"com.hexagonkt.settings / CommandLineArgumentsSource / load load \u00b6 fun load (): Map < String , *> Overrides SettingsSource.load","title":"Load"},{"location":"hexagon_core/com.hexagonkt.settings/-command-line-arguments-source/load/#load","text":"fun load (): Map < String , *> Overrides SettingsSource.load","title":"load"},{"location":"hexagon_core/com.hexagonkt.settings/-command-line-arguments-source/to-string/","text":"com.hexagonkt.settings / CommandLineArgumentsSource / toString toString \u00b6 fun toString (): String","title":"To string"},{"location":"hexagon_core/com.hexagonkt.settings/-command-line-arguments-source/to-string/#tostring","text":"fun toString (): String","title":"toString"},{"location":"hexagon_core/com.hexagonkt.settings/-environment-variables-source/","text":"com.hexagonkt.settings / EnvironmentVariablesSource EnvironmentVariablesSource \u00b6 class EnvironmentVariablesSource : SettingsSource Constructors \u00b6 Name Summary <init> EnvironmentVariablesSource ( prefix : String ) Functions \u00b6 Name Summary load fun load (): Map < String , *> toString fun toString (): String Extension Functions \u00b6 Name Summary convertToMap fun Any .convertToMap (): Map <* , *> serialize fun Any .serialize ( format : SerializationFormat = defaultFormat ): String fun Any .serialize ( contentType : String ): String","title":"Home"},{"location":"hexagon_core/com.hexagonkt.settings/-environment-variables-source/#environmentvariablessource","text":"class EnvironmentVariablesSource : SettingsSource","title":"EnvironmentVariablesSource"},{"location":"hexagon_core/com.hexagonkt.settings/-environment-variables-source/#constructors","text":"Name Summary <init> EnvironmentVariablesSource ( prefix : String )","title":"Constructors"},{"location":"hexagon_core/com.hexagonkt.settings/-environment-variables-source/#functions","text":"Name Summary load fun load (): Map < String , *> toString fun toString (): String","title":"Functions"},{"location":"hexagon_core/com.hexagonkt.settings/-environment-variables-source/#extension-functions","text":"Name Summary convertToMap fun Any .convertToMap (): Map <* , *> serialize fun Any .serialize ( format : SerializationFormat = defaultFormat ): String fun Any .serialize ( contentType : String ): String","title":"Extension Functions"},{"location":"hexagon_core/com.hexagonkt.settings/-environment-variables-source/-init-/","text":"com.hexagonkt.settings / EnvironmentVariablesSource / <init> <init> \u00b6 EnvironmentVariablesSource ( prefix : String )","title":" init "},{"location":"hexagon_core/com.hexagonkt.settings/-environment-variables-source/-init-/#init","text":"EnvironmentVariablesSource ( prefix : String )","title":"&lt;init&gt;"},{"location":"hexagon_core/com.hexagonkt.settings/-environment-variables-source/load/","text":"com.hexagonkt.settings / EnvironmentVariablesSource / load load \u00b6 fun load (): Map < String , *> Overrides SettingsSource.load","title":"Load"},{"location":"hexagon_core/com.hexagonkt.settings/-environment-variables-source/load/#load","text":"fun load (): Map < String , *> Overrides SettingsSource.load","title":"load"},{"location":"hexagon_core/com.hexagonkt.settings/-environment-variables-source/to-string/","text":"com.hexagonkt.settings / EnvironmentVariablesSource / toString toString \u00b6 fun toString (): String","title":"To string"},{"location":"hexagon_core/com.hexagonkt.settings/-environment-variables-source/to-string/#tostring","text":"fun toString (): String","title":"toString"},{"location":"hexagon_core/com.hexagonkt.settings/-file-source/","text":"com.hexagonkt.settings / FileSource FileSource \u00b6 class FileSource : SettingsSource Constructors \u00b6 Name Summary <init> FileSource ( file : String ) FileSource ( file : File ) Properties \u00b6 Name Summary file val file: File Functions \u00b6 Name Summary load fun load (): Map < String , *> toString fun toString (): String Extension Functions \u00b6 Name Summary convertToMap fun Any .convertToMap (): Map <* , *> serialize fun Any .serialize ( format : SerializationFormat = defaultFormat ): String fun Any .serialize ( contentType : String ): String","title":"Home"},{"location":"hexagon_core/com.hexagonkt.settings/-file-source/#filesource","text":"class FileSource : SettingsSource","title":"FileSource"},{"location":"hexagon_core/com.hexagonkt.settings/-file-source/#constructors","text":"Name Summary <init> FileSource ( file : String ) FileSource ( file : File )","title":"Constructors"},{"location":"hexagon_core/com.hexagonkt.settings/-file-source/#properties","text":"Name Summary file val file: File","title":"Properties"},{"location":"hexagon_core/com.hexagonkt.settings/-file-source/#functions","text":"Name Summary load fun load (): Map < String , *> toString fun toString (): String","title":"Functions"},{"location":"hexagon_core/com.hexagonkt.settings/-file-source/#extension-functions","text":"Name Summary convertToMap fun Any .convertToMap (): Map <* , *> serialize fun Any .serialize ( format : SerializationFormat = defaultFormat ): String fun Any .serialize ( contentType : String ): String","title":"Extension Functions"},{"location":"hexagon_core/com.hexagonkt.settings/-file-source/-init-/","text":"com.hexagonkt.settings / FileSource / <init> <init> \u00b6 FileSource ( file : String ) FileSource ( file : File )","title":" init "},{"location":"hexagon_core/com.hexagonkt.settings/-file-source/-init-/#init","text":"FileSource ( file : String ) FileSource ( file : File )","title":"&lt;init&gt;"},{"location":"hexagon_core/com.hexagonkt.settings/-file-source/file/","text":"com.hexagonkt.settings / FileSource / file file \u00b6 val file: File","title":"File"},{"location":"hexagon_core/com.hexagonkt.settings/-file-source/file/#file","text":"val file: File","title":"file"},{"location":"hexagon_core/com.hexagonkt.settings/-file-source/load/","text":"com.hexagonkt.settings / FileSource / load load \u00b6 fun load (): Map < String , *> Overrides SettingsSource.load","title":"Load"},{"location":"hexagon_core/com.hexagonkt.settings/-file-source/load/#load","text":"fun load (): Map < String , *> Overrides SettingsSource.load","title":"load"},{"location":"hexagon_core/com.hexagonkt.settings/-file-source/to-string/","text":"com.hexagonkt.settings / FileSource / toString toString \u00b6 fun toString (): String","title":"To string"},{"location":"hexagon_core/com.hexagonkt.settings/-file-source/to-string/#tostring","text":"fun toString (): String","title":"toString"},{"location":"hexagon_core/com.hexagonkt.settings/-object-source/","text":"com.hexagonkt.settings / ObjectSource ObjectSource \u00b6 class ObjectSource : SettingsSource Constructors \u00b6 Name Summary <init> ObjectSource ( vararg pairs : Pair < String , *> ) ObjectSource ( instance : Any ) ObjectSource ( settings : Map < String , *> ) Properties \u00b6 Name Summary settings val settings: Map < String , *> Functions \u00b6 Name Summary load fun load (): Map < String , *> toString fun toString (): String Extension Functions \u00b6 Name Summary convertToMap fun Any .convertToMap (): Map <* , *> serialize fun Any .serialize ( format : SerializationFormat = defaultFormat ): String fun Any .serialize ( contentType : String ): String","title":"Home"},{"location":"hexagon_core/com.hexagonkt.settings/-object-source/#objectsource","text":"class ObjectSource : SettingsSource","title":"ObjectSource"},{"location":"hexagon_core/com.hexagonkt.settings/-object-source/#constructors","text":"Name Summary <init> ObjectSource ( vararg pairs : Pair < String , *> ) ObjectSource ( instance : Any ) ObjectSource ( settings : Map < String , *> )","title":"Constructors"},{"location":"hexagon_core/com.hexagonkt.settings/-object-source/#properties","text":"Name Summary settings val settings: Map < String , *>","title":"Properties"},{"location":"hexagon_core/com.hexagonkt.settings/-object-source/#functions","text":"Name Summary load fun load (): Map < String , *> toString fun toString (): String","title":"Functions"},{"location":"hexagon_core/com.hexagonkt.settings/-object-source/#extension-functions","text":"Name Summary convertToMap fun Any .convertToMap (): Map <* , *> serialize fun Any .serialize ( format : SerializationFormat = defaultFormat ): String fun Any .serialize ( contentType : String ): String","title":"Extension Functions"},{"location":"hexagon_core/com.hexagonkt.settings/-object-source/-init-/","text":"com.hexagonkt.settings / ObjectSource / <init> <init> \u00b6 ObjectSource ( vararg pairs : Pair < String , *> ) ObjectSource ( instance : Any ) ObjectSource ( settings : Map < String , *> )","title":" init "},{"location":"hexagon_core/com.hexagonkt.settings/-object-source/-init-/#init","text":"ObjectSource ( vararg pairs : Pair < String , *> ) ObjectSource ( instance : Any ) ObjectSource ( settings : Map < String , *> )","title":"&lt;init&gt;"},{"location":"hexagon_core/com.hexagonkt.settings/-object-source/load/","text":"com.hexagonkt.settings / ObjectSource / load load \u00b6 fun load (): Map < String , *> Overrides SettingsSource.load","title":"Load"},{"location":"hexagon_core/com.hexagonkt.settings/-object-source/load/#load","text":"fun load (): Map < String , *> Overrides SettingsSource.load","title":"load"},{"location":"hexagon_core/com.hexagonkt.settings/-object-source/settings/","text":"com.hexagonkt.settings / ObjectSource / settings settings \u00b6 val settings: Map < String , *>","title":"Settings"},{"location":"hexagon_core/com.hexagonkt.settings/-object-source/settings/#settings","text":"val settings: Map < String , *>","title":"settings"},{"location":"hexagon_core/com.hexagonkt.settings/-object-source/to-string/","text":"com.hexagonkt.settings / ObjectSource / toString toString \u00b6 fun toString (): String","title":"To string"},{"location":"hexagon_core/com.hexagonkt.settings/-object-source/to-string/#tostring","text":"fun toString (): String","title":"toString"},{"location":"hexagon_core/com.hexagonkt.settings/-resource-source/","text":"com.hexagonkt.settings / ResourceSource ResourceSource \u00b6 class ResourceSource : SettingsSource Constructors \u00b6 Name Summary <init> ResourceSource ( resource : String ) ResourceSource ( resource : Resource ) Properties \u00b6 Name Summary resource val resource: Resource Functions \u00b6 Name Summary load fun load (): Map < String , *> toString fun toString (): String Extension Functions \u00b6 Name Summary convertToMap fun Any .convertToMap (): Map <* , *> serialize fun Any .serialize ( format : SerializationFormat = defaultFormat ): String fun Any .serialize ( contentType : String ): String","title":"Home"},{"location":"hexagon_core/com.hexagonkt.settings/-resource-source/#resourcesource","text":"class ResourceSource : SettingsSource","title":"ResourceSource"},{"location":"hexagon_core/com.hexagonkt.settings/-resource-source/#constructors","text":"Name Summary <init> ResourceSource ( resource : String ) ResourceSource ( resource : Resource )","title":"Constructors"},{"location":"hexagon_core/com.hexagonkt.settings/-resource-source/#properties","text":"Name Summary resource val resource: Resource","title":"Properties"},{"location":"hexagon_core/com.hexagonkt.settings/-resource-source/#functions","text":"Name Summary load fun load (): Map < String , *> toString fun toString (): String","title":"Functions"},{"location":"hexagon_core/com.hexagonkt.settings/-resource-source/#extension-functions","text":"Name Summary convertToMap fun Any .convertToMap (): Map <* , *> serialize fun Any .serialize ( format : SerializationFormat = defaultFormat ): String fun Any .serialize ( contentType : String ): String","title":"Extension Functions"},{"location":"hexagon_core/com.hexagonkt.settings/-resource-source/-init-/","text":"com.hexagonkt.settings / ResourceSource / <init> <init> \u00b6 ResourceSource ( resource : String ) ResourceSource ( resource : Resource )","title":" init "},{"location":"hexagon_core/com.hexagonkt.settings/-resource-source/-init-/#init","text":"ResourceSource ( resource : String ) ResourceSource ( resource : Resource )","title":"&lt;init&gt;"},{"location":"hexagon_core/com.hexagonkt.settings/-resource-source/load/","text":"com.hexagonkt.settings / ResourceSource / load load \u00b6 fun load (): Map < String , *> Overrides SettingsSource.load","title":"Load"},{"location":"hexagon_core/com.hexagonkt.settings/-resource-source/load/#load","text":"fun load (): Map < String , *> Overrides SettingsSource.load","title":"load"},{"location":"hexagon_core/com.hexagonkt.settings/-resource-source/resource/","text":"com.hexagonkt.settings / ResourceSource / resource resource \u00b6 val resource: Resource","title":"Resource"},{"location":"hexagon_core/com.hexagonkt.settings/-resource-source/resource/#resource","text":"val resource: Resource","title":"resource"},{"location":"hexagon_core/com.hexagonkt.settings/-resource-source/to-string/","text":"com.hexagonkt.settings / ResourceSource / toString toString \u00b6 fun toString (): String","title":"To string"},{"location":"hexagon_core/com.hexagonkt.settings/-resource-source/to-string/#tostring","text":"fun toString (): String","title":"toString"},{"location":"hexagon_core/com.hexagonkt.settings/-settings-manager/","text":"com.hexagonkt.settings / SettingsManager SettingsManager \u00b6 object SettingsManager Properties \u00b6 Name Summary log val log: Logger settings var settings : Map < String , *> settingsSources var settingsSources : List < SettingsSource > Functions \u00b6 Name Summary defaultSetting fun < T : Any > defaultSetting ( name : String , value : T ): T fun < T : Any > defaultSetting ( name : List < String > , value : T ): T invoke operator fun invoke ( block : SettingsManager .() -> Unit ): SettingsManager requireSetting fun < T : Any > requireSetting ( vararg name : String ): T setting fun < T : Any > setting ( vararg name : String ): T ? Extension Functions \u00b6 Name Summary convertToMap fun Any .convertToMap (): Map <* , *> serialize fun Any .serialize ( format : SerializationFormat = defaultFormat ): String fun Any .serialize ( contentType : String ): String","title":"Home"},{"location":"hexagon_core/com.hexagonkt.settings/-settings-manager/#settingsmanager","text":"object SettingsManager","title":"SettingsManager"},{"location":"hexagon_core/com.hexagonkt.settings/-settings-manager/#properties","text":"Name Summary log val log: Logger settings var settings : Map < String , *> settingsSources var settingsSources : List < SettingsSource >","title":"Properties"},{"location":"hexagon_core/com.hexagonkt.settings/-settings-manager/#functions","text":"Name Summary defaultSetting fun < T : Any > defaultSetting ( name : String , value : T ): T fun < T : Any > defaultSetting ( name : List < String > , value : T ): T invoke operator fun invoke ( block : SettingsManager .() -> Unit ): SettingsManager requireSetting fun < T : Any > requireSetting ( vararg name : String ): T setting fun < T : Any > setting ( vararg name : String ): T ?","title":"Functions"},{"location":"hexagon_core/com.hexagonkt.settings/-settings-manager/#extension-functions","text":"Name Summary convertToMap fun Any .convertToMap (): Map <* , *> serialize fun Any .serialize ( format : SerializationFormat = defaultFormat ): String fun Any .serialize ( contentType : String ): String","title":"Extension Functions"},{"location":"hexagon_core/com.hexagonkt.settings/-settings-manager/default-setting/","text":"com.hexagonkt.settings / SettingsManager / defaultSetting defaultSetting \u00b6 fun < T : Any > defaultSetting ( name : String , value : T ): T fun < T : Any > defaultSetting ( name : List < String > , value : T ): T","title":"Default setting"},{"location":"hexagon_core/com.hexagonkt.settings/-settings-manager/default-setting/#defaultsetting","text":"fun < T : Any > defaultSetting ( name : String , value : T ): T fun < T : Any > defaultSetting ( name : List < String > , value : T ): T","title":"defaultSetting"},{"location":"hexagon_core/com.hexagonkt.settings/-settings-manager/invoke/","text":"com.hexagonkt.settings / SettingsManager / invoke invoke \u00b6 operator fun invoke ( block : SettingsManager .() -> Unit ): SettingsManager","title":"Invoke"},{"location":"hexagon_core/com.hexagonkt.settings/-settings-manager/invoke/#invoke","text":"operator fun invoke ( block : SettingsManager .() -> Unit ): SettingsManager","title":"invoke"},{"location":"hexagon_core/com.hexagonkt.settings/-settings-manager/log/","text":"com.hexagonkt.settings / SettingsManager / log log \u00b6 val log: Logger","title":"Log"},{"location":"hexagon_core/com.hexagonkt.settings/-settings-manager/log/#log","text":"val log: Logger","title":"log"},{"location":"hexagon_core/com.hexagonkt.settings/-settings-manager/require-setting/","text":"com.hexagonkt.settings / SettingsManager / requireSetting requireSetting \u00b6 fun < T : Any > requireSetting ( vararg name : String ): T","title":"Require setting"},{"location":"hexagon_core/com.hexagonkt.settings/-settings-manager/require-setting/#requiresetting","text":"fun < T : Any > requireSetting ( vararg name : String ): T","title":"requireSetting"},{"location":"hexagon_core/com.hexagonkt.settings/-settings-manager/setting/","text":"com.hexagonkt.settings / SettingsManager / setting setting \u00b6 fun < T : Any > setting ( vararg name : String ): T ?","title":"Setting"},{"location":"hexagon_core/com.hexagonkt.settings/-settings-manager/setting/#setting","text":"fun < T : Any > setting ( vararg name : String ): T ?","title":"setting"},{"location":"hexagon_core/com.hexagonkt.settings/-settings-manager/settings-sources/","text":"com.hexagonkt.settings / SettingsManager / settingsSources settingsSources \u00b6 var settingsSources : List < SettingsSource >","title":"Settings sources"},{"location":"hexagon_core/com.hexagonkt.settings/-settings-manager/settings-sources/#settingssources","text":"var settingsSources : List < SettingsSource >","title":"settingsSources"},{"location":"hexagon_core/com.hexagonkt.settings/-settings-manager/settings/","text":"com.hexagonkt.settings / SettingsManager / settings settings \u00b6 var settings : Map < String , *>","title":"Settings"},{"location":"hexagon_core/com.hexagonkt.settings/-settings-manager/settings/#settings","text":"var settings : Map < String , *>","title":"settings"},{"location":"hexagon_core/com.hexagonkt.settings/-settings-source/","text":"com.hexagonkt.settings / SettingsSource SettingsSource \u00b6 interface SettingsSource Functions \u00b6 Name Summary load abstract fun load (): Map < String , *> Extension Functions \u00b6 Name Summary convertToMap fun Any .convertToMap (): Map <* , *> serialize fun Any .serialize ( format : SerializationFormat = defaultFormat ): String fun Any .serialize ( contentType : String ): String Inheritors \u00b6 Name Summary CommandLineArgumentsSource class CommandLineArgumentsSource : SettingsSource EnvironmentVariablesSource class EnvironmentVariablesSource : SettingsSource FileSource class FileSource : SettingsSource ObjectSource class ObjectSource : SettingsSource ResourceSource class ResourceSource : SettingsSource SystemPropertiesSource class SystemPropertiesSource : SettingsSource","title":"Home"},{"location":"hexagon_core/com.hexagonkt.settings/-settings-source/#settingssource","text":"interface SettingsSource","title":"SettingsSource"},{"location":"hexagon_core/com.hexagonkt.settings/-settings-source/#functions","text":"Name Summary load abstract fun load (): Map < String , *>","title":"Functions"},{"location":"hexagon_core/com.hexagonkt.settings/-settings-source/#extension-functions","text":"Name Summary convertToMap fun Any .convertToMap (): Map <* , *> serialize fun Any .serialize ( format : SerializationFormat = defaultFormat ): String fun Any .serialize ( contentType : String ): String","title":"Extension Functions"},{"location":"hexagon_core/com.hexagonkt.settings/-settings-source/#inheritors","text":"Name Summary CommandLineArgumentsSource class CommandLineArgumentsSource : SettingsSource EnvironmentVariablesSource class EnvironmentVariablesSource : SettingsSource FileSource class FileSource : SettingsSource ObjectSource class ObjectSource : SettingsSource ResourceSource class ResourceSource : SettingsSource SystemPropertiesSource class SystemPropertiesSource : SettingsSource","title":"Inheritors"},{"location":"hexagon_core/com.hexagonkt.settings/-settings-source/load/","text":"com.hexagonkt.settings / SettingsSource / load load \u00b6 abstract fun load (): Map < String , *>","title":"Load"},{"location":"hexagon_core/com.hexagonkt.settings/-settings-source/load/#load","text":"abstract fun load (): Map < String , *>","title":"load"},{"location":"hexagon_core/com.hexagonkt.settings/-system-properties-source/","text":"com.hexagonkt.settings / SystemPropertiesSource SystemPropertiesSource \u00b6 class SystemPropertiesSource : SettingsSource Constructors \u00b6 Name Summary <init> SystemPropertiesSource ( prefix : String ) Functions \u00b6 Name Summary load fun load (): Map < String , *> toString fun toString (): String Extension Functions \u00b6 Name Summary convertToMap fun Any .convertToMap (): Map <* , *> serialize fun Any .serialize ( format : SerializationFormat = defaultFormat ): String fun Any .serialize ( contentType : String ): String","title":"Home"},{"location":"hexagon_core/com.hexagonkt.settings/-system-properties-source/#systempropertiessource","text":"class SystemPropertiesSource : SettingsSource","title":"SystemPropertiesSource"},{"location":"hexagon_core/com.hexagonkt.settings/-system-properties-source/#constructors","text":"Name Summary <init> SystemPropertiesSource ( prefix : String )","title":"Constructors"},{"location":"hexagon_core/com.hexagonkt.settings/-system-properties-source/#functions","text":"Name Summary load fun load (): Map < String , *> toString fun toString (): String","title":"Functions"},{"location":"hexagon_core/com.hexagonkt.settings/-system-properties-source/#extension-functions","text":"Name Summary convertToMap fun Any .convertToMap (): Map <* , *> serialize fun Any .serialize ( format : SerializationFormat = defaultFormat ): String fun Any .serialize ( contentType : String ): String","title":"Extension Functions"},{"location":"hexagon_core/com.hexagonkt.settings/-system-properties-source/-init-/","text":"com.hexagonkt.settings / SystemPropertiesSource / <init> <init> \u00b6 SystemPropertiesSource ( prefix : String )","title":" init "},{"location":"hexagon_core/com.hexagonkt.settings/-system-properties-source/-init-/#init","text":"SystemPropertiesSource ( prefix : String )","title":"&lt;init&gt;"},{"location":"hexagon_core/com.hexagonkt.settings/-system-properties-source/load/","text":"com.hexagonkt.settings / SystemPropertiesSource / load load \u00b6 fun load (): Map < String , *> Overrides SettingsSource.load","title":"Load"},{"location":"hexagon_core/com.hexagonkt.settings/-system-properties-source/load/#load","text":"fun load (): Map < String , *> Overrides SettingsSource.load","title":"load"},{"location":"hexagon_core/com.hexagonkt.settings/-system-properties-source/to-string/","text":"com.hexagonkt.settings / SystemPropertiesSource / toString toString \u00b6 fun toString (): String","title":"To string"},{"location":"hexagon_core/com.hexagonkt.settings/-system-properties-source/to-string/#tostring","text":"fun toString (): String","title":"toString"},{"location":"hexagon_scheduler/","text":"Repeated tasks execution based on Cron expressions for Hexagon framework. It uses the Cron-utils Java Library . You can check an usage example in the following method: val cron = CronScheduler () val times = 1 var count = 0 cron . schedule ( \"0/1 * * * * ?\" ) { count ++ } sleep (( times * 1 _000 ) + 100L ) cron . shutdown () assert ( count == times ) Packages \u00b6 Name Summary com.hexagonkt.scheduler Classes for scheduling blocks of code repeatedly based on a Cron expression. Index \u00b6 All Types","title":"Scheduler"},{"location":"hexagon_scheduler/#packages","text":"Name Summary com.hexagonkt.scheduler Classes for scheduling blocks of code repeatedly based on a Cron expression.","title":"Packages"},{"location":"hexagon_scheduler/#index","text":"All Types","title":"Index"},{"location":"hexagon_scheduler/alltypes/","text":"Repeated tasks execution based on Cron expressions for Hexagon framework. It uses the Cron-utils Java Library . All Types \u00b6 Name Summary com.hexagonkt.scheduler.CronScheduler Scheduler to execute tasks repeatedly. After using it, you should call the shutdown method. If the JVM finishes without calling shutdown , it will be called upon JVM termination. com.hexagonkt.scheduler.CronSchedulerSamplesTest","title":"Home"},{"location":"hexagon_scheduler/alltypes/#all-types","text":"Name Summary com.hexagonkt.scheduler.CronScheduler Scheduler to execute tasks repeatedly. After using it, you should call the shutdown method. If the JVM finishes without calling shutdown , it will be called upon JVM termination. com.hexagonkt.scheduler.CronSchedulerSamplesTest","title":"All Types"},{"location":"hexagon_scheduler/com.hexagonkt.scheduler/","text":"com.hexagonkt.scheduler Package com.hexagonkt.scheduler \u00b6 Classes for scheduling blocks of code repeatedly based on a Cron expression. Types \u00b6 Name Summary CronScheduler class CronScheduler Scheduler to execute tasks repeatedly. After using it, you should call the shutdown method. If the JVM finishes without calling shutdown , it will be called upon JVM termination. CronSchedulerSamplesTest class CronSchedulerSamplesTest","title":"Home"},{"location":"hexagon_scheduler/com.hexagonkt.scheduler/#package-comhexagonktscheduler","text":"Classes for scheduling blocks of code repeatedly based on a Cron expression.","title":"Package com.hexagonkt.scheduler"},{"location":"hexagon_scheduler/com.hexagonkt.scheduler/#types","text":"Name Summary CronScheduler class CronScheduler Scheduler to execute tasks repeatedly. After using it, you should call the shutdown method. If the JVM finishes without calling shutdown , it will be called upon JVM termination. CronSchedulerSamplesTest class CronSchedulerSamplesTest","title":"Types"},{"location":"hexagon_scheduler/com.hexagonkt.scheduler/-cron-scheduler/","text":"com.hexagonkt.scheduler / CronScheduler CronScheduler \u00b6 class CronScheduler Scheduler to execute tasks repeatedly. After using it, you should call the shutdown method. If the JVM finishes without calling shutdown , it will be called upon JVM termination. // sample val cron = CronScheduler () val times = 1 var count = 0 cron . schedule ( \"0/1 * * * * ?\" ) { count ++ } sleep (( times * 1 _000 ) + 100L ) cron . shutdown () assert ( count == times ) Parameters \u00b6 threads - Number of threads used by the thread pool. By default it is equals to the number of processors. Constructors \u00b6 Name Summary <init> CronScheduler ( threads : Int = getRuntime (). availableProcessors ()) Scheduler to execute tasks repeatedly. After using it, you should call the shutdown method. If the JVM finishes without calling shutdown , it will be called upon JVM termination. Functions \u00b6 Name Summary schedule fun schedule ( cronExpression : String , callback : () -> Unit ): Unit Schedules a block of code to be executed repeatedly by a Cron expresion. shutdown fun shutdown (): Unit Shuts down this scheduler's thread pool. Calling over an already closed scheduler does not have any effect. It is called by the JVM when it is shut down.","title":"Home"},{"location":"hexagon_scheduler/com.hexagonkt.scheduler/-cron-scheduler/#cronscheduler","text":"class CronScheduler Scheduler to execute tasks repeatedly. After using it, you should call the shutdown method. If the JVM finishes without calling shutdown , it will be called upon JVM termination. // sample val cron = CronScheduler () val times = 1 var count = 0 cron . schedule ( \"0/1 * * * * ?\" ) { count ++ } sleep (( times * 1 _000 ) + 100L ) cron . shutdown () assert ( count == times )","title":"CronScheduler"},{"location":"hexagon_scheduler/com.hexagonkt.scheduler/-cron-scheduler/#parameters","text":"threads - Number of threads used by the thread pool. By default it is equals to the number of processors.","title":"Parameters"},{"location":"hexagon_scheduler/com.hexagonkt.scheduler/-cron-scheduler/#constructors","text":"Name Summary <init> CronScheduler ( threads : Int = getRuntime (). availableProcessors ()) Scheduler to execute tasks repeatedly. After using it, you should call the shutdown method. If the JVM finishes without calling shutdown , it will be called upon JVM termination.","title":"Constructors"},{"location":"hexagon_scheduler/com.hexagonkt.scheduler/-cron-scheduler/#functions","text":"Name Summary schedule fun schedule ( cronExpression : String , callback : () -> Unit ): Unit Schedules a block of code to be executed repeatedly by a Cron expresion. shutdown fun shutdown (): Unit Shuts down this scheduler's thread pool. Calling over an already closed scheduler does not have any effect. It is called by the JVM when it is shut down.","title":"Functions"},{"location":"hexagon_scheduler/com.hexagonkt.scheduler/-cron-scheduler/-init-/","text":"com.hexagonkt.scheduler / CronScheduler / <init> <init> \u00b6 CronScheduler ( threads : Int = getRuntime (). availableProcessors ()) Scheduler to execute tasks repeatedly. After using it, you should call the shutdown method. If the JVM finishes without calling shutdown , it will be called upon JVM termination. // sample val cron = CronScheduler () val times = 1 var count = 0 cron . schedule ( \"0/1 * * * * ?\" ) { count ++ } sleep (( times * 1 _000 ) + 100L ) cron . shutdown () assert ( count == times ) Parameters \u00b6 threads - Number of threads used by the thread pool. By default it is equals to the number of processors.","title":" init "},{"location":"hexagon_scheduler/com.hexagonkt.scheduler/-cron-scheduler/-init-/#init","text":"CronScheduler ( threads : Int = getRuntime (). availableProcessors ()) Scheduler to execute tasks repeatedly. After using it, you should call the shutdown method. If the JVM finishes without calling shutdown , it will be called upon JVM termination. // sample val cron = CronScheduler () val times = 1 var count = 0 cron . schedule ( \"0/1 * * * * ?\" ) { count ++ } sleep (( times * 1 _000 ) + 100L ) cron . shutdown () assert ( count == times )","title":"&lt;init&gt;"},{"location":"hexagon_scheduler/com.hexagonkt.scheduler/-cron-scheduler/-init-/#parameters","text":"threads - Number of threads used by the thread pool. By default it is equals to the number of processors.","title":"Parameters"},{"location":"hexagon_scheduler/com.hexagonkt.scheduler/-cron-scheduler/schedule/","text":"com.hexagonkt.scheduler / CronScheduler / schedule schedule \u00b6 fun schedule ( cronExpression : String , callback : () -> Unit ): Unit Schedules a block of code to be executed repeatedly by a Cron expresion. Parameters \u00b6 cronExpression - Periodicity of the task in Cron format. callback - Task code to be executed periodically.","title":"Schedule"},{"location":"hexagon_scheduler/com.hexagonkt.scheduler/-cron-scheduler/schedule/#schedule","text":"fun schedule ( cronExpression : String , callback : () -> Unit ): Unit Schedules a block of code to be executed repeatedly by a Cron expresion.","title":"schedule"},{"location":"hexagon_scheduler/com.hexagonkt.scheduler/-cron-scheduler/schedule/#parameters","text":"cronExpression - Periodicity of the task in Cron format. callback - Task code to be executed periodically.","title":"Parameters"},{"location":"hexagon_scheduler/com.hexagonkt.scheduler/-cron-scheduler/shutdown/","text":"com.hexagonkt.scheduler / CronScheduler / shutdown shutdown \u00b6 fun shutdown (): Unit Shuts down this scheduler's thread pool. Calling over an already closed scheduler does not have any effect. It is called by the JVM when it is shut down.","title":"Shutdown"},{"location":"hexagon_scheduler/com.hexagonkt.scheduler/-cron-scheduler/shutdown/#shutdown","text":"fun shutdown (): Unit Shuts down this scheduler's thread pool. Calling over an already closed scheduler does not have any effect. It is called by the JVM when it is shut down.","title":"shutdown"},{"location":"hexagon_scheduler/com.hexagonkt.scheduler/-cron-scheduler-samples-test/","text":"com.hexagonkt.scheduler / CronSchedulerSamplesTest CronSchedulerSamplesTest \u00b6 class CronSchedulerSamplesTest Constructors \u00b6 Name Summary <init> CronSchedulerSamplesTest () Functions \u00b6 Name Summary callbackExecutedProperly fun callbackExecutedProperly (): Unit","title":"Home"},{"location":"hexagon_scheduler/com.hexagonkt.scheduler/-cron-scheduler-samples-test/#cronschedulersamplestest","text":"class CronSchedulerSamplesTest","title":"CronSchedulerSamplesTest"},{"location":"hexagon_scheduler/com.hexagonkt.scheduler/-cron-scheduler-samples-test/#constructors","text":"Name Summary <init> CronSchedulerSamplesTest ()","title":"Constructors"},{"location":"hexagon_scheduler/com.hexagonkt.scheduler/-cron-scheduler-samples-test/#functions","text":"Name Summary callbackExecutedProperly fun callbackExecutedProperly (): Unit","title":"Functions"},{"location":"hexagon_scheduler/com.hexagonkt.scheduler/-cron-scheduler-samples-test/-init-/","text":"com.hexagonkt.scheduler / CronSchedulerSamplesTest / <init> <init> \u00b6 CronSchedulerSamplesTest ()","title":" init "},{"location":"hexagon_scheduler/com.hexagonkt.scheduler/-cron-scheduler-samples-test/-init-/#init","text":"CronSchedulerSamplesTest ()","title":"&lt;init&gt;"},{"location":"hexagon_scheduler/com.hexagonkt.scheduler/-cron-scheduler-samples-test/callback-executed-properly/","text":"com.hexagonkt.scheduler / CronSchedulerSamplesTest / callbackExecutedProperly callbackExecutedProperly \u00b6 fun callbackExecutedProperly (): Unit","title":"Callback executed properly"},{"location":"hexagon_scheduler/com.hexagonkt.scheduler/-cron-scheduler-samples-test/callback-executed-properly/#callbackexecutedproperly","text":"fun callbackExecutedProperly (): Unit","title":"callbackExecutedProperly"},{"location":"hexagon_web/","text":"TODO Add support for kotlinx.html . Templates \u00b6 Provide utilities for template processing inside HTTP handlers. Packages \u00b6 Name Summary com.hexagonkt.web TODO Index \u00b6 All Types","title":"Web"},{"location":"hexagon_web/#templates","text":"Provide utilities for template processing inside HTTP handlers.","title":"Templates"},{"location":"hexagon_web/#packages","text":"Name Summary com.hexagonkt.web TODO","title":"Packages"},{"location":"hexagon_web/#index","text":"All Types","title":"Index"},{"location":"hexagon_web/alltypes/","text":"TODO Add support for kotlinx.html . All Types \u00b6 Name Summary com.hexagonkt.http.server.Call (extensions in package com.hexagonkt.web)","title":"Home"},{"location":"hexagon_web/alltypes/#all-types","text":"Name Summary com.hexagonkt.http.server.Call (extensions in package com.hexagonkt.web)","title":"All Types"},{"location":"hexagon_web/com.hexagonkt.web/","text":"com.hexagonkt.web Package com.hexagonkt.web \u00b6 TODO Extensions for External Classes \u00b6 Name Summary com.hexagonkt.http.server.Call","title":"Home"},{"location":"hexagon_web/com.hexagonkt.web/#package-comhexagonktweb","text":"TODO","title":"Package com.hexagonkt.web"},{"location":"hexagon_web/com.hexagonkt.web/#extensions-for-external-classes","text":"Name Summary com.hexagonkt.http.server.Call","title":"Extensions for External Classes"},{"location":"hexagon_web/com.hexagonkt.web/com.hexagonkt.http.server.-call/","text":"com.hexagonkt.web / com.hexagonkt.http.server.Call Extensions for com.hexagonkt.http.server.Call \u00b6 Name Summary fullContext fun Call . fullContext (): Map < String , *> obtainLocale fun Call . obtainLocale (): Locale TODO Review order precedence and complete code (now only taking request attribute) template fun Call . template ( templateAdapter : TemplatePort , templateName : String , locale : Locale = obtainLocale (), context : Map < String , *> = fullContext ()): Unit templateType fun Call . templateType ( template : String ): Unit","title":"Home"},{"location":"hexagon_web/com.hexagonkt.web/com.hexagonkt.http.server.-call/#extensions-for-comhexagonkthttpservercall","text":"Name Summary fullContext fun Call . fullContext (): Map < String , *> obtainLocale fun Call . obtainLocale (): Locale TODO Review order precedence and complete code (now only taking request attribute) template fun Call . template ( templateAdapter : TemplatePort , templateName : String , locale : Locale = obtainLocale (), context : Map < String , *> = fullContext ()): Unit templateType fun Call . templateType ( template : String ): Unit","title":"Extensions for com.hexagonkt.http.server.Call"},{"location":"hexagon_web/com.hexagonkt.web/com.hexagonkt.http.server.-call/full-context/","text":"com.hexagonkt.web / com.hexagonkt.http.server.Call / fullContext fullContext \u00b6 fun Call . fullContext (): Map < String , *>","title":"Full context"},{"location":"hexagon_web/com.hexagonkt.web/com.hexagonkt.http.server.-call/full-context/#fullcontext","text":"fun Call . fullContext (): Map < String , *>","title":"fullContext"},{"location":"hexagon_web/com.hexagonkt.web/com.hexagonkt.http.server.-call/obtain-locale/","text":"com.hexagonkt.web / com.hexagonkt.http.server.Call / obtainLocale obtainLocale \u00b6 fun Call . obtainLocale (): Locale TODO Review order precedence and complete code (now only taking request attribute) Request Session Cookie Accept-language Server default locale","title":"Obtain locale"},{"location":"hexagon_web/com.hexagonkt.web/com.hexagonkt.http.server.-call/obtain-locale/#obtainlocale","text":"fun Call . obtainLocale (): Locale TODO Review order precedence and complete code (now only taking request attribute) Request Session Cookie Accept-language Server default locale","title":"obtainLocale"},{"location":"hexagon_web/com.hexagonkt.web/com.hexagonkt.http.server.-call/template-type/","text":"com.hexagonkt.web / com.hexagonkt.http.server.Call / templateType templateType \u00b6 fun Call . templateType ( template : String ): Unit","title":"Template type"},{"location":"hexagon_web/com.hexagonkt.web/com.hexagonkt.http.server.-call/template-type/#templatetype","text":"fun Call . templateType ( template : String ): Unit","title":"templateType"},{"location":"hexagon_web/com.hexagonkt.web/com.hexagonkt.http.server.-call/template/","text":"com.hexagonkt.web / com.hexagonkt.http.server.Call / template template \u00b6 fun Call . template ( templateAdapter : TemplatePort , templateName : String , locale : Locale = obtainLocale (), context : Map < String , *> = fullContext ()): Unit","title":"Template"},{"location":"hexagon_web/com.hexagonkt.web/com.hexagonkt.http.server.-call/template/#template","text":"fun Call . template ( templateAdapter : TemplatePort , templateName : String , locale : Locale = obtainLocale (), context : Map < String , *> = fullContext ()): Unit","title":"template"},{"location":"http_server_jetty/","text":"Packages \u00b6 Name Summary com.hexagonkt.http.server.jetty Index \u00b6 All Types","title":"Jetty"},{"location":"http_server_jetty/#packages","text":"Name Summary com.hexagonkt.http.server.jetty","title":"Packages"},{"location":"http_server_jetty/#index","text":"All Types","title":"Index"},{"location":"http_server_jetty/alltypes/","text":"All Types \u00b6 Name Summary com.hexagonkt.http.server.jetty.JettyServletAdapter TODO .","title":"Home"},{"location":"http_server_jetty/alltypes/#all-types","text":"Name Summary com.hexagonkt.http.server.jetty.JettyServletAdapter TODO .","title":"All Types"},{"location":"http_server_jetty/com.hexagonkt.http.server.jetty/","text":"com.hexagonkt.http.server.jetty Package com.hexagonkt.http.server.jetty \u00b6 Types \u00b6 Name Summary JettyServletAdapter class JettyServletAdapter : ServerPort TODO .","title":"Home"},{"location":"http_server_jetty/com.hexagonkt.http.server.jetty/#package-comhexagonkthttpserverjetty","text":"","title":"Package com.hexagonkt.http.server.jetty"},{"location":"http_server_jetty/com.hexagonkt.http.server.jetty/#types","text":"Name Summary JettyServletAdapter class JettyServletAdapter : ServerPort TODO .","title":"Types"},{"location":"http_server_jetty/com.hexagonkt.http.server.jetty/-jetty-servlet-adapter/","text":"com.hexagonkt.http.server.jetty / JettyServletAdapter JettyServletAdapter \u00b6 class JettyServletAdapter : ServerPort TODO . Constructors \u00b6 Name Summary <init> JettyServletAdapter () TODO . Functions \u00b6 Name Summary runtimePort fun runtimePort (): Int shutdown fun shutdown (): Unit started fun started (): Boolean startup fun startup ( server : Server ): Unit","title":"Home"},{"location":"http_server_jetty/com.hexagonkt.http.server.jetty/-jetty-servlet-adapter/#jettyservletadapter","text":"class JettyServletAdapter : ServerPort TODO .","title":"JettyServletAdapter"},{"location":"http_server_jetty/com.hexagonkt.http.server.jetty/-jetty-servlet-adapter/#constructors","text":"Name Summary <init> JettyServletAdapter () TODO .","title":"Constructors"},{"location":"http_server_jetty/com.hexagonkt.http.server.jetty/-jetty-servlet-adapter/#functions","text":"Name Summary runtimePort fun runtimePort (): Int shutdown fun shutdown (): Unit started fun started (): Boolean startup fun startup ( server : Server ): Unit","title":"Functions"},{"location":"http_server_jetty/com.hexagonkt.http.server.jetty/-jetty-servlet-adapter/-init-/","text":"com.hexagonkt.http.server.jetty / JettyServletAdapter / <init> <init> \u00b6 JettyServletAdapter () TODO .","title":" init "},{"location":"http_server_jetty/com.hexagonkt.http.server.jetty/-jetty-servlet-adapter/-init-/#init","text":"JettyServletAdapter () TODO .","title":"&lt;init&gt;"},{"location":"http_server_jetty/com.hexagonkt.http.server.jetty/-jetty-servlet-adapter/runtime-port/","text":"com.hexagonkt.http.server.jetty / JettyServletAdapter / runtimePort runtimePort \u00b6 fun runtimePort (): Int","title":"Runtime port"},{"location":"http_server_jetty/com.hexagonkt.http.server.jetty/-jetty-servlet-adapter/runtime-port/#runtimeport","text":"fun runtimePort (): Int","title":"runtimePort"},{"location":"http_server_jetty/com.hexagonkt.http.server.jetty/-jetty-servlet-adapter/shutdown/","text":"com.hexagonkt.http.server.jetty / JettyServletAdapter / shutdown shutdown \u00b6 fun shutdown (): Unit","title":"Shutdown"},{"location":"http_server_jetty/com.hexagonkt.http.server.jetty/-jetty-servlet-adapter/shutdown/#shutdown","text":"fun shutdown (): Unit","title":"shutdown"},{"location":"http_server_jetty/com.hexagonkt.http.server.jetty/-jetty-servlet-adapter/started/","text":"com.hexagonkt.http.server.jetty / JettyServletAdapter / started started \u00b6 fun started (): Boolean","title":"Started"},{"location":"http_server_jetty/com.hexagonkt.http.server.jetty/-jetty-servlet-adapter/started/#started","text":"fun started (): Boolean","title":"started"},{"location":"http_server_jetty/com.hexagonkt.http.server.jetty/-jetty-servlet-adapter/startup/","text":"com.hexagonkt.http.server.jetty / JettyServletAdapter / startup startup \u00b6 fun startup ( server : Server ): Unit","title":"Startup"},{"location":"http_server_jetty/com.hexagonkt.http.server.jetty/-jetty-servlet-adapter/startup/#startup","text":"fun startup ( server : Server ): Unit","title":"startup"},{"location":"http_server_servlet/","text":"TODO Packages \u00b6 Name Summary com.hexagonkt.http.server.servlet TODO Index \u00b6 All Types","title":"Servlet"},{"location":"http_server_servlet/#packages","text":"Name Summary com.hexagonkt.http.server.servlet TODO","title":"Packages"},{"location":"http_server_servlet/#index","text":"All Types","title":"Index"},{"location":"http_server_servlet/alltypes/","text":"TODO All Types \u00b6 Name Summary com.hexagonkt.http.server.servlet.ServletFilter com.hexagonkt.http.server.servlet.ServletServer Not a standard engine as it is not started/stopped TODO Take care of wildcards (review servlet specs) to group filters TODO Take care of wildcards (review servlet specs) to group routes in servlets TODO Receive router in parameter (easier to use in Servlet containers)","title":"Home"},{"location":"http_server_servlet/alltypes/#all-types","text":"Name Summary com.hexagonkt.http.server.servlet.ServletFilter com.hexagonkt.http.server.servlet.ServletServer Not a standard engine as it is not started/stopped TODO Take care of wildcards (review servlet specs) to group filters TODO Take care of wildcards (review servlet specs) to group routes in servlets TODO Receive router in parameter (easier to use in Servlet containers)","title":"All Types"},{"location":"http_server_servlet/com.hexagonkt.http.server.servlet/","text":"com.hexagonkt.http.server.servlet Package com.hexagonkt.http.server.servlet \u00b6 TODO Types \u00b6 Name Summary ServletFilter class ServletFilter : Filter ServletServer abstract class ServletServer : ServletContextListener Not a standard engine as it is not started/stopped TODO Take care of wildcards (review servlet specs) to group filters TODO Take care of wildcards (review servlet specs) to group routes in servlets TODO Receive router in parameter (easier to use in Servlet containers)","title":"Home"},{"location":"http_server_servlet/com.hexagonkt.http.server.servlet/#package-comhexagonkthttpserverservlet","text":"TODO","title":"Package com.hexagonkt.http.server.servlet"},{"location":"http_server_servlet/com.hexagonkt.http.server.servlet/#types","text":"Name Summary ServletFilter class ServletFilter : Filter ServletServer abstract class ServletServer : ServletContextListener Not a standard engine as it is not started/stopped TODO Take care of wildcards (review servlet specs) to group filters TODO Take care of wildcards (review servlet specs) to group routes in servlets TODO Receive router in parameter (easier to use in Servlet containers)","title":"Types"},{"location":"http_server_servlet/com.hexagonkt.http.server.servlet/-servlet-filter/","text":"com.hexagonkt.http.server.servlet / ServletFilter ServletFilter \u00b6 class ServletFilter : Filter Constructors \u00b6 Name Summary <init> ServletFilter ( router : List < RequestHandler > ) Functions \u00b6 Name Summary destroy fun destroy (): Unit doFilter fun doFilter ( request : ServletRequest , response : ServletResponse , chain : FilterChain ): Unit init fun init ( filterConfig : FilterConfig ): Unit","title":"Home"},{"location":"http_server_servlet/com.hexagonkt.http.server.servlet/-servlet-filter/#servletfilter","text":"class ServletFilter : Filter","title":"ServletFilter"},{"location":"http_server_servlet/com.hexagonkt.http.server.servlet/-servlet-filter/#constructors","text":"Name Summary <init> ServletFilter ( router : List < RequestHandler > )","title":"Constructors"},{"location":"http_server_servlet/com.hexagonkt.http.server.servlet/-servlet-filter/#functions","text":"Name Summary destroy fun destroy (): Unit doFilter fun doFilter ( request : ServletRequest , response : ServletResponse , chain : FilterChain ): Unit init fun init ( filterConfig : FilterConfig ): Unit","title":"Functions"},{"location":"http_server_servlet/com.hexagonkt.http.server.servlet/-servlet-filter/-init-/","text":"com.hexagonkt.http.server.servlet / ServletFilter / <init> <init> \u00b6 ServletFilter ( router : List < RequestHandler > )","title":" init "},{"location":"http_server_servlet/com.hexagonkt.http.server.servlet/-servlet-filter/-init-/#init","text":"ServletFilter ( router : List < RequestHandler > )","title":"&lt;init&gt;"},{"location":"http_server_servlet/com.hexagonkt.http.server.servlet/-servlet-filter/destroy/","text":"com.hexagonkt.http.server.servlet / ServletFilter / destroy destroy \u00b6 fun destroy (): Unit","title":"Destroy"},{"location":"http_server_servlet/com.hexagonkt.http.server.servlet/-servlet-filter/destroy/#destroy","text":"fun destroy (): Unit","title":"destroy"},{"location":"http_server_servlet/com.hexagonkt.http.server.servlet/-servlet-filter/do-filter/","text":"com.hexagonkt.http.server.servlet / ServletFilter / doFilter doFilter \u00b6 fun doFilter ( request : ServletRequest , response : ServletResponse , chain : FilterChain ): Unit","title":"Do filter"},{"location":"http_server_servlet/com.hexagonkt.http.server.servlet/-servlet-filter/do-filter/#dofilter","text":"fun doFilter ( request : ServletRequest , response : ServletResponse , chain : FilterChain ): Unit","title":"doFilter"},{"location":"http_server_servlet/com.hexagonkt.http.server.servlet/-servlet-filter/init/","text":"com.hexagonkt.http.server.servlet / ServletFilter / init init \u00b6 fun init ( filterConfig : FilterConfig ): Unit","title":"Init"},{"location":"http_server_servlet/com.hexagonkt.http.server.servlet/-servlet-filter/init/#init","text":"fun init ( filterConfig : FilterConfig ): Unit","title":"init"},{"location":"http_server_servlet/com.hexagonkt.http.server.servlet/-servlet-server/","text":"com.hexagonkt.http.server.servlet / ServletServer ServletServer \u00b6 abstract class ServletServer : ServletContextListener Not a standard engine as it is not started/stopped TODO Take care of wildcards (review servlet specs) to group filters TODO Take care of wildcards (review servlet specs) to group routes in servlets TODO Receive router in parameter (easier to use in Servlet containers) Constructors \u00b6 Name Summary <init> ServletServer ( router : Router = Router (), async : Boolean = false ) Not a standard engine as it is not started/stopped TODO Take care of wildcards (review servlet specs) to group filters TODO Take care of wildcards (review servlet specs) to group routes in servlets TODO Receive router in parameter (easier to use in Servlet containers) Properties \u00b6 Name Summary serverRouter val serverRouter: Router Functions \u00b6 Name Summary contextDestroyed open fun contextDestroyed ( sce : ServletContextEvent ? ): Unit contextInitialized open fun contextInitialized ( sce : ServletContextEvent ): Unit createRouter open fun createRouter (): Router","title":"Home"},{"location":"http_server_servlet/com.hexagonkt.http.server.servlet/-servlet-server/#servletserver","text":"abstract class ServletServer : ServletContextListener Not a standard engine as it is not started/stopped TODO Take care of wildcards (review servlet specs) to group filters TODO Take care of wildcards (review servlet specs) to group routes in servlets TODO Receive router in parameter (easier to use in Servlet containers)","title":"ServletServer"},{"location":"http_server_servlet/com.hexagonkt.http.server.servlet/-servlet-server/#constructors","text":"Name Summary <init> ServletServer ( router : Router = Router (), async : Boolean = false ) Not a standard engine as it is not started/stopped TODO Take care of wildcards (review servlet specs) to group filters TODO Take care of wildcards (review servlet specs) to group routes in servlets TODO Receive router in parameter (easier to use in Servlet containers)","title":"Constructors"},{"location":"http_server_servlet/com.hexagonkt.http.server.servlet/-servlet-server/#properties","text":"Name Summary serverRouter val serverRouter: Router","title":"Properties"},{"location":"http_server_servlet/com.hexagonkt.http.server.servlet/-servlet-server/#functions","text":"Name Summary contextDestroyed open fun contextDestroyed ( sce : ServletContextEvent ? ): Unit contextInitialized open fun contextInitialized ( sce : ServletContextEvent ): Unit createRouter open fun createRouter (): Router","title":"Functions"},{"location":"http_server_servlet/com.hexagonkt.http.server.servlet/-servlet-server/-init-/","text":"com.hexagonkt.http.server.servlet / ServletServer / <init> <init> \u00b6 ServletServer ( router : Router = Router (), async : Boolean = false ) Not a standard engine as it is not started/stopped TODO Take care of wildcards (review servlet specs) to group filters TODO Take care of wildcards (review servlet specs) to group routes in servlets TODO Receive router in parameter (easier to use in Servlet containers)","title":" init "},{"location":"http_server_servlet/com.hexagonkt.http.server.servlet/-servlet-server/-init-/#init","text":"ServletServer ( router : Router = Router (), async : Boolean = false ) Not a standard engine as it is not started/stopped TODO Take care of wildcards (review servlet specs) to group filters TODO Take care of wildcards (review servlet specs) to group routes in servlets TODO Receive router in parameter (easier to use in Servlet containers)","title":"&lt;init&gt;"},{"location":"http_server_servlet/com.hexagonkt.http.server.servlet/-servlet-server/context-destroyed/","text":"com.hexagonkt.http.server.servlet / ServletServer / contextDestroyed contextDestroyed \u00b6 open fun contextDestroyed ( sce : ServletContextEvent ? ): Unit","title":"Context destroyed"},{"location":"http_server_servlet/com.hexagonkt.http.server.servlet/-servlet-server/context-destroyed/#contextdestroyed","text":"open fun contextDestroyed ( sce : ServletContextEvent ? ): Unit","title":"contextDestroyed"},{"location":"http_server_servlet/com.hexagonkt.http.server.servlet/-servlet-server/context-initialized/","text":"com.hexagonkt.http.server.servlet / ServletServer / contextInitialized contextInitialized \u00b6 open fun contextInitialized ( sce : ServletContextEvent ): Unit","title":"Context initialized"},{"location":"http_server_servlet/com.hexagonkt.http.server.servlet/-servlet-server/context-initialized/#contextinitialized","text":"open fun contextInitialized ( sce : ServletContextEvent ): Unit","title":"contextInitialized"},{"location":"http_server_servlet/com.hexagonkt.http.server.servlet/-servlet-server/create-router/","text":"com.hexagonkt.http.server.servlet / ServletServer / createRouter createRouter \u00b6 open fun createRouter (): Router","title":"Create router"},{"location":"http_server_servlet/com.hexagonkt.http.server.servlet/-servlet-server/create-router/#createrouter","text":"open fun createRouter (): Router","title":"createRouter"},{"location":"http_server_servlet/com.hexagonkt.http.server.servlet/-servlet-server/server-router/","text":"com.hexagonkt.http.server.servlet / ServletServer / serverRouter serverRouter \u00b6 val serverRouter: Router","title":"Server router"},{"location":"http_server_servlet/com.hexagonkt.http.server.servlet/-servlet-server/server-router/#serverrouter","text":"val serverRouter: Router","title":"serverRouter"},{"location":"messaging_rabbitmq/","text":"Hexagon's event bus implementation based in RabbitMQ. Packages \u00b6 Name Summary com.hexagonkt.messaging.rabbitmq Contains a RabbitMQ Client and a Hexagon messaging implementation backed by it. Index \u00b6 All Types","title":"RabbitMQ"},{"location":"messaging_rabbitmq/#packages","text":"Name Summary com.hexagonkt.messaging.rabbitmq Contains a RabbitMQ Client and a Hexagon messaging implementation backed by it.","title":"Packages"},{"location":"messaging_rabbitmq/#index","text":"All Types","title":"Index"},{"location":"messaging_rabbitmq/alltypes/","text":"Hexagon's event bus implementation based in RabbitMQ. All Types \u00b6 Name Summary com.hexagonkt.messaging.rabbitmq.RabbitMqAdapter TODO . com.hexagonkt.messaging.rabbitmq.RabbitMqClient Rabbit client.","title":"Home"},{"location":"messaging_rabbitmq/alltypes/#all-types","text":"Name Summary com.hexagonkt.messaging.rabbitmq.RabbitMqAdapter TODO . com.hexagonkt.messaging.rabbitmq.RabbitMqClient Rabbit client.","title":"All Types"},{"location":"messaging_rabbitmq/com.hexagonkt.messaging.rabbitmq/","text":"com.hexagonkt.messaging.rabbitmq Package com.hexagonkt.messaging.rabbitmq \u00b6 Contains a RabbitMQ Client and a Hexagon messaging implementation backed by it. Types \u00b6 Name Summary RabbitMqAdapter class RabbitMqAdapter : MessagingPort TODO . RabbitMqClient class RabbitMqClient : Closeable Rabbit client.","title":"Home"},{"location":"messaging_rabbitmq/com.hexagonkt.messaging.rabbitmq/#package-comhexagonktmessagingrabbitmq","text":"Contains a RabbitMQ Client and a Hexagon messaging implementation backed by it.","title":"Package com.hexagonkt.messaging.rabbitmq"},{"location":"messaging_rabbitmq/com.hexagonkt.messaging.rabbitmq/#types","text":"Name Summary RabbitMqAdapter class RabbitMqAdapter : MessagingPort TODO . RabbitMqClient class RabbitMqClient : Closeable Rabbit client.","title":"Types"},{"location":"messaging_rabbitmq/com.hexagonkt.messaging.rabbitmq/-rabbit-mq-adapter/","text":"com.hexagonkt.messaging.rabbitmq / RabbitMqAdapter RabbitMqAdapter \u00b6 class RabbitMqAdapter : MessagingPort TODO . Constructors \u00b6 Name Summary <init> RabbitMqAdapter () TODO . Functions \u00b6 Name Summary consume fun < T : Message > consume ( type : KClass < T > , address : String , consumer : ( T ) -> Unit ): Unit publish fun publish ( message : Message , address : String ): Unit","title":"Home"},{"location":"messaging_rabbitmq/com.hexagonkt.messaging.rabbitmq/-rabbit-mq-adapter/#rabbitmqadapter","text":"class RabbitMqAdapter : MessagingPort TODO .","title":"RabbitMqAdapter"},{"location":"messaging_rabbitmq/com.hexagonkt.messaging.rabbitmq/-rabbit-mq-adapter/#constructors","text":"Name Summary <init> RabbitMqAdapter () TODO .","title":"Constructors"},{"location":"messaging_rabbitmq/com.hexagonkt.messaging.rabbitmq/-rabbit-mq-adapter/#functions","text":"Name Summary consume fun < T : Message > consume ( type : KClass < T > , address : String , consumer : ( T ) -> Unit ): Unit publish fun publish ( message : Message , address : String ): Unit","title":"Functions"},{"location":"messaging_rabbitmq/com.hexagonkt.messaging.rabbitmq/-rabbit-mq-adapter/-init-/","text":"com.hexagonkt.messaging.rabbitmq / RabbitMqAdapter / <init> <init> \u00b6 RabbitMqAdapter () TODO .","title":" init "},{"location":"messaging_rabbitmq/com.hexagonkt.messaging.rabbitmq/-rabbit-mq-adapter/-init-/#init","text":"RabbitMqAdapter () TODO .","title":"&lt;init&gt;"},{"location":"messaging_rabbitmq/com.hexagonkt.messaging.rabbitmq/-rabbit-mq-adapter/consume/","text":"com.hexagonkt.messaging.rabbitmq / RabbitMqAdapter / consume consume \u00b6 fun < T : Message > consume ( type : KClass < T > , address : String , consumer : ( T ) -> Unit ): Unit","title":"Consume"},{"location":"messaging_rabbitmq/com.hexagonkt.messaging.rabbitmq/-rabbit-mq-adapter/consume/#consume","text":"fun < T : Message > consume ( type : KClass < T > , address : String , consumer : ( T ) -> Unit ): Unit","title":"consume"},{"location":"messaging_rabbitmq/com.hexagonkt.messaging.rabbitmq/-rabbit-mq-adapter/publish/","text":"com.hexagonkt.messaging.rabbitmq / RabbitMqAdapter / publish publish \u00b6 fun publish ( message : Message , address : String ): Unit","title":"Publish"},{"location":"messaging_rabbitmq/com.hexagonkt.messaging.rabbitmq/-rabbit-mq-adapter/publish/#publish","text":"fun publish ( message : Message , address : String ): Unit","title":"publish"},{"location":"messaging_rabbitmq/com.hexagonkt.messaging.rabbitmq/-rabbit-mq-client/","text":"com.hexagonkt.messaging.rabbitmq / RabbitMqClient RabbitMqClient \u00b6 class RabbitMqClient : Closeable Rabbit client. TODO Review if channel handling is still needed in Java 4.1.x version TODO Add metrics TODO Ordered shutdown Constructors \u00b6 Name Summary <init> RabbitMqClient ( uri : URI ) . RabbitMqClient ( connectionFactory : ConnectionFactory , poolSize : Int = getRuntime (). availableProcessors ()) Rabbit client. Properties \u00b6 Name Summary connected val connected: Boolean . Functions \u00b6 Name Summary bindExchange fun bindExchange ( exchange : String , exchangeType : String , routingKey : String , queue : String ): Unit . call fun call ( requestQueue : String , message : String ): String close fun close (): Unit consume fun < T : Any > consume ( exchange : String , routingKey : String , type : KClass < T > , handler : ( T ) -> Unit ): Unit fun < T : Any , R : Any > consume ( queueName : String , type : KClass < T > , handler : ( T ) -> R ): Unit . declareQueue fun declareQueue ( name : String ): Unit . deleteQueue fun deleteQueue ( name : String ): Unit . publish fun publish ( queue : String , message : String , correlationId : String ? = null ): Unit fun publish ( exchange : String , routingKey : String , message : String , correlationId : String ? = null ): Unit","title":"Home"},{"location":"messaging_rabbitmq/com.hexagonkt.messaging.rabbitmq/-rabbit-mq-client/#rabbitmqclient","text":"class RabbitMqClient : Closeable Rabbit client. TODO Review if channel handling is still needed in Java 4.1.x version TODO Add metrics TODO Ordered shutdown","title":"RabbitMqClient"},{"location":"messaging_rabbitmq/com.hexagonkt.messaging.rabbitmq/-rabbit-mq-client/#constructors","text":"Name Summary <init> RabbitMqClient ( uri : URI ) . RabbitMqClient ( connectionFactory : ConnectionFactory , poolSize : Int = getRuntime (). availableProcessors ()) Rabbit client.","title":"Constructors"},{"location":"messaging_rabbitmq/com.hexagonkt.messaging.rabbitmq/-rabbit-mq-client/#properties","text":"Name Summary connected val connected: Boolean .","title":"Properties"},{"location":"messaging_rabbitmq/com.hexagonkt.messaging.rabbitmq/-rabbit-mq-client/#functions","text":"Name Summary bindExchange fun bindExchange ( exchange : String , exchangeType : String , routingKey : String , queue : String ): Unit . call fun call ( requestQueue : String , message : String ): String close fun close (): Unit consume fun < T : Any > consume ( exchange : String , routingKey : String , type : KClass < T > , handler : ( T ) -> Unit ): Unit fun < T : Any , R : Any > consume ( queueName : String , type : KClass < T > , handler : ( T ) -> R ): Unit . declareQueue fun declareQueue ( name : String ): Unit . deleteQueue fun deleteQueue ( name : String ): Unit . publish fun publish ( queue : String , message : String , correlationId : String ? = null ): Unit fun publish ( exchange : String , routingKey : String , message : String , correlationId : String ? = null ): Unit","title":"Functions"},{"location":"messaging_rabbitmq/com.hexagonkt.messaging.rabbitmq/-rabbit-mq-client/-init-/","text":"com.hexagonkt.messaging.rabbitmq / RabbitMqClient / <init> <init> \u00b6 RabbitMqClient ( uri : URI ) . RabbitMqClient ( connectionFactory : ConnectionFactory , poolSize : Int = getRuntime (). availableProcessors ()) Rabbit client. TODO Review if channel handling is still needed in Java 4.1.x version TODO Add metrics TODO Ordered shutdown","title":" init "},{"location":"messaging_rabbitmq/com.hexagonkt.messaging.rabbitmq/-rabbit-mq-client/-init-/#init","text":"RabbitMqClient ( uri : URI ) . RabbitMqClient ( connectionFactory : ConnectionFactory , poolSize : Int = getRuntime (). availableProcessors ()) Rabbit client. TODO Review if channel handling is still needed in Java 4.1.x version TODO Add metrics TODO Ordered shutdown","title":"&lt;init&gt;"},{"location":"messaging_rabbitmq/com.hexagonkt.messaging.rabbitmq/-rabbit-mq-client/bind-exchange/","text":"com.hexagonkt.messaging.rabbitmq / RabbitMqClient / bindExchange bindExchange \u00b6 fun bindExchange ( exchange : String , exchangeType : String , routingKey : String , queue : String ): Unit .","title":"Bind exchange"},{"location":"messaging_rabbitmq/com.hexagonkt.messaging.rabbitmq/-rabbit-mq-client/bind-exchange/#bindexchange","text":"fun bindExchange ( exchange : String , exchangeType : String , routingKey : String , queue : String ): Unit .","title":"bindExchange"},{"location":"messaging_rabbitmq/com.hexagonkt.messaging.rabbitmq/-rabbit-mq-client/call/","text":"com.hexagonkt.messaging.rabbitmq / RabbitMqClient / call call \u00b6 fun call ( requestQueue : String , message : String ): String","title":"Call"},{"location":"messaging_rabbitmq/com.hexagonkt.messaging.rabbitmq/-rabbit-mq-client/call/#call","text":"fun call ( requestQueue : String , message : String ): String","title":"call"},{"location":"messaging_rabbitmq/com.hexagonkt.messaging.rabbitmq/-rabbit-mq-client/close/","text":"com.hexagonkt.messaging.rabbitmq / RabbitMqClient / close close \u00b6 fun close (): Unit See Also Closeable.close","title":"Close"},{"location":"messaging_rabbitmq/com.hexagonkt.messaging.rabbitmq/-rabbit-mq-client/close/#close","text":"fun close (): Unit See Also Closeable.close","title":"close"},{"location":"messaging_rabbitmq/com.hexagonkt.messaging.rabbitmq/-rabbit-mq-client/connected/","text":"com.hexagonkt.messaging.rabbitmq / RabbitMqClient / connected connected \u00b6 val connected: Boolean .","title":"Connected"},{"location":"messaging_rabbitmq/com.hexagonkt.messaging.rabbitmq/-rabbit-mq-client/connected/#connected","text":"val connected: Boolean .","title":"connected"},{"location":"messaging_rabbitmq/com.hexagonkt.messaging.rabbitmq/-rabbit-mq-client/consume/","text":"com.hexagonkt.messaging.rabbitmq / RabbitMqClient / consume consume \u00b6 fun < T : Any > consume ( exchange : String , routingKey : String , type : KClass < T > , handler : ( T ) -> Unit ): Unit fun < T : Any , R : Any > consume ( queueName : String , type : KClass < T > , handler : ( T ) -> R ): Unit .","title":"Consume"},{"location":"messaging_rabbitmq/com.hexagonkt.messaging.rabbitmq/-rabbit-mq-client/consume/#consume","text":"fun < T : Any > consume ( exchange : String , routingKey : String , type : KClass < T > , handler : ( T ) -> Unit ): Unit fun < T : Any , R : Any > consume ( queueName : String , type : KClass < T > , handler : ( T ) -> R ): Unit .","title":"consume"},{"location":"messaging_rabbitmq/com.hexagonkt.messaging.rabbitmq/-rabbit-mq-client/declare-queue/","text":"com.hexagonkt.messaging.rabbitmq / RabbitMqClient / declareQueue declareQueue \u00b6 fun declareQueue ( name : String ): Unit .","title":"Declare queue"},{"location":"messaging_rabbitmq/com.hexagonkt.messaging.rabbitmq/-rabbit-mq-client/declare-queue/#declarequeue","text":"fun declareQueue ( name : String ): Unit .","title":"declareQueue"},{"location":"messaging_rabbitmq/com.hexagonkt.messaging.rabbitmq/-rabbit-mq-client/delete-queue/","text":"com.hexagonkt.messaging.rabbitmq / RabbitMqClient / deleteQueue deleteQueue \u00b6 fun deleteQueue ( name : String ): Unit .","title":"Delete queue"},{"location":"messaging_rabbitmq/com.hexagonkt.messaging.rabbitmq/-rabbit-mq-client/delete-queue/#deletequeue","text":"fun deleteQueue ( name : String ): Unit .","title":"deleteQueue"},{"location":"messaging_rabbitmq/com.hexagonkt.messaging.rabbitmq/-rabbit-mq-client/publish/","text":"com.hexagonkt.messaging.rabbitmq / RabbitMqClient / publish publish \u00b6 fun publish ( queue : String , message : String , correlationId : String ? = null ): Unit fun publish ( exchange : String , routingKey : String , message : String , correlationId : String ? = null ): Unit","title":"Publish"},{"location":"messaging_rabbitmq/com.hexagonkt.messaging.rabbitmq/-rabbit-mq-client/publish/#publish","text":"fun publish ( queue : String , message : String , correlationId : String ? = null ): Unit fun publish ( exchange : String , routingKey : String , message : String , correlationId : String ? = null ): Unit","title":"publish"},{"location":"port_http_client/","text":"TODO Packages \u00b6 Name Summary com.hexagonkt.http.client Index \u00b6 All Types","title":"Async HTTP Client"},{"location":"port_http_client/#packages","text":"Name Summary com.hexagonkt.http.client","title":"Packages"},{"location":"port_http_client/#index","text":"All Types","title":"Index"},{"location":"port_http_client/alltypes/","text":"TODO All Types \u00b6 Name Summary com.hexagonkt.http.client.Client Client to use other REST services.","title":"Home"},{"location":"port_http_client/alltypes/#all-types","text":"Name Summary com.hexagonkt.http.client.Client Client to use other REST services.","title":"All Types"},{"location":"port_http_client/com.hexagonkt.http.client/","text":"com.hexagonkt.http.client Package com.hexagonkt.http.client \u00b6 Types \u00b6 Name Summary Client class Client Client to use other REST services.","title":"Home"},{"location":"port_http_client/com.hexagonkt.http.client/#package-comhexagonkthttpclient","text":"","title":"Package com.hexagonkt.http.client"},{"location":"port_http_client/com.hexagonkt.http.client/#types","text":"Name Summary Client class Client Client to use other REST services.","title":"Types"},{"location":"port_http_client/com.hexagonkt.http.client/-client/","text":"com.hexagonkt.http.client / Client Client \u00b6 class Client Client to use other REST services. Constructors \u00b6 Name Summary <init> Client ( endpoint : String = \"\" , format : SerializationFormat , useCookies : Boolean = true , headers : Map < String , List < String >> = LinkedHashMap (), user : String ? = null , password : String ? = null , insecure : Boolean = false ) `` Client ( endpoint : String = \"\" , contentType : String ? = null , useCookies : Boolean = true , headers : Map < String , List < String >> = LinkedHashMap (), user : String ? = null , password : String ? = null , insecure : Boolean = false ) Client to use other REST services. Properties \u00b6 Name Summary contentType val contentType: String ? cookies val cookies: MutableMap < String , Cookie > endpoint val endpoint: String headers val headers: Map < String , List < String >> useCookies val useCookies: Boolean Functions \u00b6 Name Summary delete fun delete ( url : String , body : Any ? = null , contentType : String ? = this . contentType , callback : Response .() -> Unit = {} ): Response get fun get ( url : String , callHeaders : Map < String , List < String >> = emptyMap (), callback : Response .() -> Unit = {} ): Response head fun head ( url : String , callHeaders : Map < String , List < String >> = emptyMap (), callback : Response .() -> Unit = {} ): Response options fun options ( url : String , body : Any ? = null , contentType : String ? = this . contentType , callback : Response .() -> Unit = {} ): Response patch fun patch ( url : String , body : Any ? = null , contentType : String ? = this . contentType , callback : Response .() -> Unit = {} ): Response post fun post ( url : String , body : Any ? = null , contentType : String ? = this . contentType , callback : Response .() -> Unit = {} ): Response put fun put ( url : String , body : Any ? = null , contentType : String ? = this . contentType , callback : Response .() -> Unit = {} ): Response send fun send ( method : Method , url : String = \"\" , body : Any ? = null , contentType : String ? = this . contentType , callHeaders : Map < String , List < String >> = LinkedHashMap (), parts : List < Part > = emptyList ()): Response Synchronous execution. trace fun trace ( url : String , body : Any ? = null , contentType : String ? = this . contentType , callback : Response .() -> Unit = {} ): Response","title":"Home"},{"location":"port_http_client/com.hexagonkt.http.client/-client/#client","text":"class Client Client to use other REST services.","title":"Client"},{"location":"port_http_client/com.hexagonkt.http.client/-client/#constructors","text":"Name Summary <init> Client ( endpoint : String = \"\" , format : SerializationFormat , useCookies : Boolean = true , headers : Map < String , List < String >> = LinkedHashMap (), user : String ? = null , password : String ? = null , insecure : Boolean = false ) `` Client ( endpoint : String = \"\" , contentType : String ? = null , useCookies : Boolean = true , headers : Map < String , List < String >> = LinkedHashMap (), user : String ? = null , password : String ? = null , insecure : Boolean = false ) Client to use other REST services.","title":"Constructors"},{"location":"port_http_client/com.hexagonkt.http.client/-client/#properties","text":"Name Summary contentType val contentType: String ? cookies val cookies: MutableMap < String , Cookie > endpoint val endpoint: String headers val headers: Map < String , List < String >> useCookies val useCookies: Boolean","title":"Properties"},{"location":"port_http_client/com.hexagonkt.http.client/-client/#functions","text":"Name Summary delete fun delete ( url : String , body : Any ? = null , contentType : String ? = this . contentType , callback : Response .() -> Unit = {} ): Response get fun get ( url : String , callHeaders : Map < String , List < String >> = emptyMap (), callback : Response .() -> Unit = {} ): Response head fun head ( url : String , callHeaders : Map < String , List < String >> = emptyMap (), callback : Response .() -> Unit = {} ): Response options fun options ( url : String , body : Any ? = null , contentType : String ? = this . contentType , callback : Response .() -> Unit = {} ): Response patch fun patch ( url : String , body : Any ? = null , contentType : String ? = this . contentType , callback : Response .() -> Unit = {} ): Response post fun post ( url : String , body : Any ? = null , contentType : String ? = this . contentType , callback : Response .() -> Unit = {} ): Response put fun put ( url : String , body : Any ? = null , contentType : String ? = this . contentType , callback : Response .() -> Unit = {} ): Response send fun send ( method : Method , url : String = \"\" , body : Any ? = null , contentType : String ? = this . contentType , callHeaders : Map < String , List < String >> = LinkedHashMap (), parts : List < Part > = emptyList ()): Response Synchronous execution. trace fun trace ( url : String , body : Any ? = null , contentType : String ? = this . contentType , callback : Response .() -> Unit = {} ): Response","title":"Functions"},{"location":"port_http_client/com.hexagonkt.http.client/-client/-init-/","text":"com.hexagonkt.http.client / Client / <init> <init> \u00b6 Client ( endpoint : String = \"\" , format : SerializationFormat , useCookies : Boolean = true , headers : Map < String , List < String >> = LinkedHashMap (), user : String ? = null , password : String ? = null , insecure : Boolean = false ) `` Client ( endpoint : String = \"\" , contentType : String ? = null , useCookies : Boolean = true , headers : Map < String , List < String >> = LinkedHashMap (), user : String ? = null , password : String ? = null , insecure : Boolean = false ) Client to use other REST services.","title":" init "},{"location":"port_http_client/com.hexagonkt.http.client/-client/-init-/#init","text":"Client ( endpoint : String = \"\" , format : SerializationFormat , useCookies : Boolean = true , headers : Map < String , List < String >> = LinkedHashMap (), user : String ? = null , password : String ? = null , insecure : Boolean = false ) `` Client ( endpoint : String = \"\" , contentType : String ? = null , useCookies : Boolean = true , headers : Map < String , List < String >> = LinkedHashMap (), user : String ? = null , password : String ? = null , insecure : Boolean = false ) Client to use other REST services.","title":"&lt;init&gt;"},{"location":"port_http_client/com.hexagonkt.http.client/-client/content-type/","text":"com.hexagonkt.http.client / Client / contentType contentType \u00b6 val contentType: String ?","title":"Content type"},{"location":"port_http_client/com.hexagonkt.http.client/-client/content-type/#contenttype","text":"val contentType: String ?","title":"contentType"},{"location":"port_http_client/com.hexagonkt.http.client/-client/cookies/","text":"com.hexagonkt.http.client / Client / cookies cookies \u00b6 val cookies: MutableMap < String , Cookie >","title":"Cookies"},{"location":"port_http_client/com.hexagonkt.http.client/-client/cookies/#cookies","text":"val cookies: MutableMap < String , Cookie >","title":"cookies"},{"location":"port_http_client/com.hexagonkt.http.client/-client/delete/","text":"com.hexagonkt.http.client / Client / delete delete \u00b6 fun delete ( url : String , body : Any ? = null , contentType : String ? = this . contentType , callback : Response .() -> Unit = {} ): Response","title":"Delete"},{"location":"port_http_client/com.hexagonkt.http.client/-client/delete/#delete","text":"fun delete ( url : String , body : Any ? = null , contentType : String ? = this . contentType , callback : Response .() -> Unit = {} ): Response","title":"delete"},{"location":"port_http_client/com.hexagonkt.http.client/-client/endpoint/","text":"com.hexagonkt.http.client / Client / endpoint endpoint \u00b6 val endpoint: String","title":"Endpoint"},{"location":"port_http_client/com.hexagonkt.http.client/-client/endpoint/#endpoint","text":"val endpoint: String","title":"endpoint"},{"location":"port_http_client/com.hexagonkt.http.client/-client/get/","text":"com.hexagonkt.http.client / Client / get get \u00b6 fun get ( url : String , callHeaders : Map < String , List < String >> = emptyMap (), callback : Response .() -> Unit = {} ): Response","title":"Get"},{"location":"port_http_client/com.hexagonkt.http.client/-client/get/#get","text":"fun get ( url : String , callHeaders : Map < String , List < String >> = emptyMap (), callback : Response .() -> Unit = {} ): Response","title":"get"},{"location":"port_http_client/com.hexagonkt.http.client/-client/head/","text":"com.hexagonkt.http.client / Client / head head \u00b6 fun head ( url : String , callHeaders : Map < String , List < String >> = emptyMap (), callback : Response .() -> Unit = {} ): Response","title":"Head"},{"location":"port_http_client/com.hexagonkt.http.client/-client/head/#head","text":"fun head ( url : String , callHeaders : Map < String , List < String >> = emptyMap (), callback : Response .() -> Unit = {} ): Response","title":"head"},{"location":"port_http_client/com.hexagonkt.http.client/-client/headers/","text":"com.hexagonkt.http.client / Client / headers headers \u00b6 val headers: Map < String , List < String >>","title":"Headers"},{"location":"port_http_client/com.hexagonkt.http.client/-client/headers/#headers","text":"val headers: Map < String , List < String >>","title":"headers"},{"location":"port_http_client/com.hexagonkt.http.client/-client/options/","text":"com.hexagonkt.http.client / Client / options options \u00b6 fun options ( url : String , body : Any ? = null , contentType : String ? = this . contentType , callback : Response .() -> Unit = {} ): Response","title":"Options"},{"location":"port_http_client/com.hexagonkt.http.client/-client/options/#options","text":"fun options ( url : String , body : Any ? = null , contentType : String ? = this . contentType , callback : Response .() -> Unit = {} ): Response","title":"options"},{"location":"port_http_client/com.hexagonkt.http.client/-client/patch/","text":"com.hexagonkt.http.client / Client / patch patch \u00b6 fun patch ( url : String , body : Any ? = null , contentType : String ? = this . contentType , callback : Response .() -> Unit = {} ): Response","title":"Patch"},{"location":"port_http_client/com.hexagonkt.http.client/-client/patch/#patch","text":"fun patch ( url : String , body : Any ? = null , contentType : String ? = this . contentType , callback : Response .() -> Unit = {} ): Response","title":"patch"},{"location":"port_http_client/com.hexagonkt.http.client/-client/post/","text":"com.hexagonkt.http.client / Client / post post \u00b6 fun post ( url : String , body : Any ? = null , contentType : String ? = this . contentType , callback : Response .() -> Unit = {} ): Response","title":"Post"},{"location":"port_http_client/com.hexagonkt.http.client/-client/post/#post","text":"fun post ( url : String , body : Any ? = null , contentType : String ? = this . contentType , callback : Response .() -> Unit = {} ): Response","title":"post"},{"location":"port_http_client/com.hexagonkt.http.client/-client/put/","text":"com.hexagonkt.http.client / Client / put put \u00b6 fun put ( url : String , body : Any ? = null , contentType : String ? = this . contentType , callback : Response .() -> Unit = {} ): Response","title":"Put"},{"location":"port_http_client/com.hexagonkt.http.client/-client/put/#put","text":"fun put ( url : String , body : Any ? = null , contentType : String ? = this . contentType , callback : Response .() -> Unit = {} ): Response","title":"put"},{"location":"port_http_client/com.hexagonkt.http.client/-client/send/","text":"com.hexagonkt.http.client / Client / send send \u00b6 fun send ( method : Method , url : String = \"\" , body : Any ? = null , contentType : String ? = this . contentType , callHeaders : Map < String , List < String >> = LinkedHashMap (), parts : List < Part > = emptyList ()): Response Synchronous execution.","title":"Send"},{"location":"port_http_client/com.hexagonkt.http.client/-client/send/#send","text":"fun send ( method : Method , url : String = \"\" , body : Any ? = null , contentType : String ? = this . contentType , callHeaders : Map < String , List < String >> = LinkedHashMap (), parts : List < Part > = emptyList ()): Response Synchronous execution.","title":"send"},{"location":"port_http_client/com.hexagonkt.http.client/-client/trace/","text":"com.hexagonkt.http.client / Client / trace trace \u00b6 fun trace ( url : String , body : Any ? = null , contentType : String ? = this . contentType , callback : Response .() -> Unit = {} ): Response","title":"Trace"},{"location":"port_http_client/com.hexagonkt.http.client/-client/trace/#trace","text":"fun trace ( url : String , body : Any ? = null , contentType : String ? = this . contentType , callback : Response .() -> Unit = {} ): Response","title":"trace"},{"location":"port_http_client/com.hexagonkt.http.client/-client/use-cookies/","text":"com.hexagonkt.http.client / Client / useCookies useCookies \u00b6 val useCookies: Boolean","title":"Use cookies"},{"location":"port_http_client/com.hexagonkt.http.client/-client/use-cookies/#usecookies","text":"val useCookies: Boolean","title":"useCookies"},{"location":"port_http_server/","text":"This port's purpose is to develop HTTP servers (REST services or Web applications). It defines a DSL to declare HTTP request handlers. Adapters implementing this port are responsible of transforming the DSL into a runtime. And allows you to switch implementations without changing the service. The hexagon_web module provides utilities on top of this port for Web application development (like templates helpers). Server \u00b6 A server is a process listening to HTTP requests on a TCP port. You can run multiple ones on different ports at the same time (this can be useful to test many microservices at the same time). The server can be configured with different properties. If you do not provide a value for them, they are searched inside the application settings and lastly, a default value is picked. This is the parameters list: serviceName: name of this service, it is only informative and it is displayed on the logs. If not set < undefined > is used. bindAddress: address to which this process is bound. If none is provided, 127 . 0 . 0 . 1 is taken. bindPort: the port that the process listens to. By default it is 2010 contextPath: initial path used for the rest of the routes, by default it is empty. You can inject an adapter for the Server port using the InjectionManager object: InjectionManager . bindObject < ServerPort > ( JettyServletAdapter ()) To create a server, you need to provide a router (check the next section for more information), and after creating a server you can run it or stop it with start and stop methods. /* * All settings are optional, you can supply any combination * Parameters not set will fall back to the defaults */ val settings = ServerSettings ( serverName = \"name\" , bindAddress = InetAddress . getByName ( \"0.0.0\" ), bindPort = 2020 , contextPath = \"/context\" ) val router = Router { get ( \"/hello\" ) { ok ( \"Hello World!\" ) } } val customServer = Server ( adapter , router , settings ) customServer . start () val customClient = Client ( \"http://localhost:${customServer.runtimePort}\" ) assert ( customServer . started ()) assert ( customClient . get ( \"/context/hello\" ). responseBody == \"Hello World!\" ) customServer . stop () /* * You can skip the adapter is you previously bound one * You may also skip the settings an the defaults will be used */ InjectionManager . bindObject ( adapter ) val defaultServer = Server ( router = router ) defaultServer . start () val defaultClient = Client ( \"http://localhost:${defaultServer.runtimePort}\" ) assert ( defaultServer . started ()) assert ( defaultClient . get ( \"/hello\" ). responseBody == \"Hello World!\" ) defaultServer . stop () Servlet Web server \u00b6 There is an special server adapter for running inside Servlet Containers. To use it you should import the Servlet HTTP Server Adapter into your project. Check the http_server_servlet module for more information. Routes \u00b6 The main building block of a Hexagon HTTP service is a set of routes. A route is made up of three simple pieces: A verb (get, post, put, delete, head, trace, connect, options). It can also be any . A path (/hello, /users/{name}). Paths must start with '/' and trailing slash is ignored. A callback code block. The callback has a void return type. You should use Call . send () to set the response which will be returned to the user. Routes are matched in the order they are defined. The first route that matches the request is invoked and the following ones are ignored. Check the next snippet for usage examples: get ( \"/hello\" ) { ok ( \"Get greeting\" )} put ( \"/hello\" ) { ok ( \"Put greeting\" )} post ( \"/hello\" ) { ok ( \"Post greeting\" )} any ( \"/hello\" ) { ok ( \"Fallback if HTTP verb was not used before\" )} get { ok ( \"Get at '/' if no route matched before\" ) } HTTP clients will be able to reuse the routes to create REST services clients. Route groups \u00b6 Routes can be nested by calling the path () method, which takes a String prefix and gives you a scope to declare routes and filters (or more nested paths). Ie: path ( \"/nested\" ) { get ( \"/hello\" ) { ok ( \"Greeting\" )} path ( \"/secondLevel\" ) { get ( \"/hello\" ) { ok ( \"Second level greeting\" )} } get { ok ( \"Get at '/nested'\" ) } } Routers \u00b6 If you have a lot of routes, it can be helpful to group them into routers. You can create routers to mount a group of routes in different paths (allowing you to reuse them). Check this snippet: fun personRouter ( kind : String ) = Router { get { ok ( \"Get $kind\" ) } put { ok ( \"Put $kind\" ) } post { ok ( \"Post $kind\" ) } } val server = Server ( adapter ) { path ( \"/clients\" , personRouter ( \"client\" )) path ( \"/customers\" , personRouter ( \"customer\" )) } Callbacks \u00b6 Callbacks are request's handling blocks that are bound to routes or filters. They make the request, response and session objects available to the handling code. Call \u00b6 The Call object provides you with everything you need to handle a http-request. It contains the underlying request and response, and a bunch of utility methods to return results, read parameters or pass attributes among filters/routes. The methods are available directly from the callback ( Call is the callback receiver). You can check the API documentation for the full list of methods. This sample code illustrates the usage: get ( \"/call\" ) { attributes // the attributes list attributes [ \"foo\" ] // value of foo attribute attributes [ \"A\" ] = \"V\" // sets value of attribute A to V ok ( \"Response body\" ) // returns a 200 status send ( 400 , \"Invalid request\" ) // returns any status } Request \u00b6 Request functionality is provided by the request field: get ( \"/request\" ) { request . method // the HTTP method (GET, ..etc) request . scheme // http or https request . secure // true if scheme is https request . host // the host, e.g. \"example.com\" request . ip // client IP address request . port // the server port request . path // the request path, e.g. /result.jsp request . body // request body sent by the client request . url // the url. e.g. \"http://example.com/foo\" request . contentLength // length of request body request . contentType // content type of request.body request . accept // Client accepted content types request . headers // the HTTP header list request . headers [ \"BAR\" ] // value of BAR header request . userAgent // user agent (browser requests) request . origin // origin (browser requests) request . body ( Type :: class ) // Object passed in the body as a typed object request . body < Type >() // Syntactic sugar for the previous statement request . bodyObjects ( Type :: class ) // Object(s) passed in the body as a typed list request . bodyObjects < Type >() // Syntactic sugar for the previous statement request . body ( Map :: class ) // Object passed in the body as a field map request . body < Map <*, *>>() // Syntactic sugar for the previous statement request . bodyObjects ( Map :: class ) // Object(s) passed in the body as a list of maps request . bodyObjects < Map <*, *>>() // Syntactic sugar for the previous statement } Response \u00b6 Response information is provided by the response field: get ( \"/response\" ) { response . body // get response content response . body = \"Hello\" // sets content to Hello response . headers [ \"FOO\" ] = listOf ( \"bar\" ) // sets header FOO with value bar response . status // get the response status response . status = 401 // set status code to 401 response . contentType // get the content type response . contentType = \"text/xml\" // set content type to text/xml } Path Parameters \u00b6 Route patterns can include named parameters, accessible via the pathParameters map on the request object: get ( \"/pathParam/{foo}\" ) { request . pathParameters [ \"foo\" ] // value of foo path parameter request . pathParameters // map with all parameters } Query Parameters \u00b6 It is possible to access the whole query string or only an specific query parameter using the parameters map on the request object: get ( \"/queryParam\" ) { request . queryString request . queryParameters // the query param list request . queryParameters [ \"FOO\" ] ?. first () // value of FOO query param request . queryParameters [ \"FOO\" ] // all values of FOO query param } Redirects \u00b6 You can redirect requests (returning 30x codes) by using Call utility methods: get ( \"/redirect\" ) { redirect ( \"/call\" ) // browser redirect to /call } Cookies \u00b6 The request and response cookie functions provide a convenient way for sharing information between handlers, requests, or even servers. You can read client sent cookies from the request's cookies read only map. To change cookies or add new ones you have to use response . addCookie () and response . removeCookie () methods. Check the following sample code for details: get ( \"/cookie\" ) { request . cookies // get map of all request cookies request . cookies [ \"foo\" ] // access request cookie by name val cookie = HttpCookie ( \"new_foo\" , \"bar\" ) response . addCookie ( cookie ) // set cookie with a value cookie . maxAge = 3600 response . addCookie ( cookie ) // set cookie with a max-age cookie . secure = true response . addCookie ( cookie ) // secure cookie response . removeCookie ( \"foo\" ) // remove cookie } Sessions \u00b6 Every request has access to the session created on the server side, the session object provides the following methods: get ( \"/session\" ) { session // create and return session session . attributes [ \"user\" ] // Get session attribute 'user' session . set ( \"user\" , \"foo\" ) // Set session attribute 'user' session . removeAttribute ( \"user\" ) // Remove session attribute 'user' session . attributes // Get all session attributes session . id // Get session id session . isNew () // Check if session is new } Halting \u00b6 To immediately stop a request within a filter or route use halt () . halt () is not intended to be used inside exception-mappers. Check the following snippet for an example: get ( \"/halt\" ) { halt () // halt with status 500 and stop route processing /* * These are just examples the following code will never be reached */ halt ( 401 ) // halt with status halt ( \"Body Message\" ) // halt with message (status 500) halt ( 401 , \"Go away!\" ) // halt with status and message } Filters \u00b6 You might know filters as interceptors, or middleware from other libraries. Filters are blocks of code executed before or after one or more routes. They can read the request and read/modify the response. All filters that match a route are executed in the order they are declared. Filters optionally take a pattern, causing them to be executed only if the request path matches that pattern. Before and after filters are always executed (if the route is matched). But any of them may stop the execution chain if halted. If halt () is called in one filter, filter processing is stopped for that kind of filter ( before or after ). In the case of before filters, this also prevent the route from being executed (but after filters are executed anyway). The following code details filters usage: before { response . headers [ \"b_all\" ] = listOf ( \"true\" ) } before ( \"/filters/*\" ) { response . headers [ \"b_filters\" ] = listOf ( \"true\" ) } get ( \"/filters/route\" ) { ok ( \"filters route\" ) } after ( \"/filters/*\" ) { response . headers [ \"a_filters\" ] = listOf ( \"true\" ) } get ( \"/filters\" ) { ok ( \"filters\" ) } path ( \"/nested\" ) { before { response . headers [ \"b_nested\" ] = listOf ( \"true\" ) } before ( \"/\" ) { response . headers [ \"b_nested_2\" ] = listOf ( \"true\" ) } get ( \"/filters\" ) { ok ( \"nested filters\" ) } get ( \"/halted\" ) { halt ( 499 , \"halted\" ) } get { ok ( \"nested also\" ) } after { response . headers [ \"a_nested\" ] = listOf ( \"true\" ) } } after { response . headers [ \"a_all\" ] = listOf ( \"true\" ) } Error Handling \u00b6 You can provide handlers for runtime errors. Errors are unhandled thrown exceptions in the callbacks, or handlers halted with an error code. Error handlers for a given code or exception are unique, and the first one defined is the one that will be used. HTTP Errors Handlers \u00b6 Allows to handle routes halted with a given code. These handlers are only applied if the route is halted, if the error code is returned with send it won't be handled as an error. Example: // Register handler for routes halted with 512 code error ( 512 ) { send ( 500 , \"Ouch\" )} // If status code (512) is returned with `send` error won't be triggered get ( \"/errors\" ) { halt ( 512 ) } Exception Mapping \u00b6 You can handle exceptions of a given type for all routes and filters. The handler allows you to refer to the thrown exception. Look at the following code for a detailed example: // Register handler for routes which callbacks throw exceptions error ( CodedException :: class ) { send ( 599 , it . message ?: \"empty\" ) } error ( IllegalStateException :: class ) { send ( 505 , it . message ?: \"empty\" ) } get ( \"/exceptions\" ) { error ( \"Message\" ) } get ( \"/codedExceptions\" ) { halt ( 509 , \"code\" ) } Static Files \u00b6 You can use a folder in the classpath for serving static files with the get () methods. Note that the public directory name is not included in the URL. Asset mapping is handled like any other route, so if an asset mapping is matched, no other route will be checked (assets or other routes). And also, if a previous route is matched, the asset mapping will never be checked. Being get ( resource ) a shortcut of get ( \"/*\" , resource ) it should be placed as the last route. Check the next example for details: get ( \"/web/file.txt\" ) { ok ( \"It matches this route and won't search for the file\" ) } // Expose resources on the '/public' resource folder over the '/web' HTTP path get ( \"/web/*\" , Resource ( \"public\" )) // Maps resources on 'assets' on the server root (assets/f.css -> /f.css) // '/public/css/style.css' resource would be: 'http://{host}:{port}/css/style.css' get ( Resource ( \"assets\" )) MIME types \u00b6 The MIME types of static files are computed from the file extension using the SerializationManager.contentTypeOf method. Testing \u00b6 Integration tests \u00b6 To test HTTP servers from outside using a real Adapter, you can create a server setting 0 as port. This will pick a random free port that you can check later: val router = Router { get ( \"/hello\" ) { ok ( \"Hi!\" ) } } val serverSettings = ServerSettings ( \"name\" , InetAddress . getLoopbackAddress (), 0 ) val server = Server ( adapter , router , serverSettings ) server . start () val client = Client ( \"http://localhost:${server.runtimePort}\" ) assert ( client . get ( \"/hello\" ). responseBody == \"Hi!\" ) server . stop () To do this kind of tests without creating a custom server (using the real production code). Check the tests of the starter projects . Mocking calls \u00b6 To unit test callbacks you can create test calls with hardcoded requests, responses and sessions. To use it in your project you'll have to include a dependency (with test scope): build.gradle testImplementation ( \"com.hexagonkt:port_http_server:$hexagonVersion:test\" ) pom.xml <dependency> <groupId> com.hexagonkt </groupId> <artifactId> port_http_server </artifactId> <version> $hexagonVersion </version> <scope> test </scope> </dependency> Check testCall , TestRequest , TestResponse and TestSession for more details. For a quick sample, check the snipped below: private fun Call . testedCallback () { if ( request . body == \"weird\" ) send ( 999 , \"Weird error\" ) } @Test fun `Test call behaves as expected` () { val testCall = testCall ( TestRequest ( body = \"weird\" )) testCall . testedCallback () assert ( testCall . response . status == 999 ) assert ( testCall . response . body == \"Weird error\" ) } Packages \u00b6 Name Summary com.hexagonkt.http.server This package defines the classes used in the HTTP DSL. Index \u00b6 All Types","title":"HTTP Server"},{"location":"port_http_server/#server","text":"A server is a process listening to HTTP requests on a TCP port. You can run multiple ones on different ports at the same time (this can be useful to test many microservices at the same time). The server can be configured with different properties. If you do not provide a value for them, they are searched inside the application settings and lastly, a default value is picked. This is the parameters list: serviceName: name of this service, it is only informative and it is displayed on the logs. If not set < undefined > is used. bindAddress: address to which this process is bound. If none is provided, 127 . 0 . 0 . 1 is taken. bindPort: the port that the process listens to. By default it is 2010 contextPath: initial path used for the rest of the routes, by default it is empty. You can inject an adapter for the Server port using the InjectionManager object: InjectionManager . bindObject < ServerPort > ( JettyServletAdapter ()) To create a server, you need to provide a router (check the next section for more information), and after creating a server you can run it or stop it with start and stop methods. /* * All settings are optional, you can supply any combination * Parameters not set will fall back to the defaults */ val settings = ServerSettings ( serverName = \"name\" , bindAddress = InetAddress . getByName ( \"0.0.0\" ), bindPort = 2020 , contextPath = \"/context\" ) val router = Router { get ( \"/hello\" ) { ok ( \"Hello World!\" ) } } val customServer = Server ( adapter , router , settings ) customServer . start () val customClient = Client ( \"http://localhost:${customServer.runtimePort}\" ) assert ( customServer . started ()) assert ( customClient . get ( \"/context/hello\" ). responseBody == \"Hello World!\" ) customServer . stop () /* * You can skip the adapter is you previously bound one * You may also skip the settings an the defaults will be used */ InjectionManager . bindObject ( adapter ) val defaultServer = Server ( router = router ) defaultServer . start () val defaultClient = Client ( \"http://localhost:${defaultServer.runtimePort}\" ) assert ( defaultServer . started ()) assert ( defaultClient . get ( \"/hello\" ). responseBody == \"Hello World!\" ) defaultServer . stop ()","title":"Server"},{"location":"port_http_server/#servlet-web-server","text":"There is an special server adapter for running inside Servlet Containers. To use it you should import the Servlet HTTP Server Adapter into your project. Check the http_server_servlet module for more information.","title":"Servlet Web server"},{"location":"port_http_server/#routes","text":"The main building block of a Hexagon HTTP service is a set of routes. A route is made up of three simple pieces: A verb (get, post, put, delete, head, trace, connect, options). It can also be any . A path (/hello, /users/{name}). Paths must start with '/' and trailing slash is ignored. A callback code block. The callback has a void return type. You should use Call . send () to set the response which will be returned to the user. Routes are matched in the order they are defined. The first route that matches the request is invoked and the following ones are ignored. Check the next snippet for usage examples: get ( \"/hello\" ) { ok ( \"Get greeting\" )} put ( \"/hello\" ) { ok ( \"Put greeting\" )} post ( \"/hello\" ) { ok ( \"Post greeting\" )} any ( \"/hello\" ) { ok ( \"Fallback if HTTP verb was not used before\" )} get { ok ( \"Get at '/' if no route matched before\" ) } HTTP clients will be able to reuse the routes to create REST services clients.","title":"Routes"},{"location":"port_http_server/#route-groups","text":"Routes can be nested by calling the path () method, which takes a String prefix and gives you a scope to declare routes and filters (or more nested paths). Ie: path ( \"/nested\" ) { get ( \"/hello\" ) { ok ( \"Greeting\" )} path ( \"/secondLevel\" ) { get ( \"/hello\" ) { ok ( \"Second level greeting\" )} } get { ok ( \"Get at '/nested'\" ) } }","title":"Route groups"},{"location":"port_http_server/#routers","text":"If you have a lot of routes, it can be helpful to group them into routers. You can create routers to mount a group of routes in different paths (allowing you to reuse them). Check this snippet: fun personRouter ( kind : String ) = Router { get { ok ( \"Get $kind\" ) } put { ok ( \"Put $kind\" ) } post { ok ( \"Post $kind\" ) } } val server = Server ( adapter ) { path ( \"/clients\" , personRouter ( \"client\" )) path ( \"/customers\" , personRouter ( \"customer\" )) }","title":"Routers"},{"location":"port_http_server/#callbacks","text":"Callbacks are request's handling blocks that are bound to routes or filters. They make the request, response and session objects available to the handling code.","title":"Callbacks"},{"location":"port_http_server/#call","text":"The Call object provides you with everything you need to handle a http-request. It contains the underlying request and response, and a bunch of utility methods to return results, read parameters or pass attributes among filters/routes. The methods are available directly from the callback ( Call is the callback receiver). You can check the API documentation for the full list of methods. This sample code illustrates the usage: get ( \"/call\" ) { attributes // the attributes list attributes [ \"foo\" ] // value of foo attribute attributes [ \"A\" ] = \"V\" // sets value of attribute A to V ok ( \"Response body\" ) // returns a 200 status send ( 400 , \"Invalid request\" ) // returns any status }","title":"Call"},{"location":"port_http_server/#request","text":"Request functionality is provided by the request field: get ( \"/request\" ) { request . method // the HTTP method (GET, ..etc) request . scheme // http or https request . secure // true if scheme is https request . host // the host, e.g. \"example.com\" request . ip // client IP address request . port // the server port request . path // the request path, e.g. /result.jsp request . body // request body sent by the client request . url // the url. e.g. \"http://example.com/foo\" request . contentLength // length of request body request . contentType // content type of request.body request . accept // Client accepted content types request . headers // the HTTP header list request . headers [ \"BAR\" ] // value of BAR header request . userAgent // user agent (browser requests) request . origin // origin (browser requests) request . body ( Type :: class ) // Object passed in the body as a typed object request . body < Type >() // Syntactic sugar for the previous statement request . bodyObjects ( Type :: class ) // Object(s) passed in the body as a typed list request . bodyObjects < Type >() // Syntactic sugar for the previous statement request . body ( Map :: class ) // Object passed in the body as a field map request . body < Map <*, *>>() // Syntactic sugar for the previous statement request . bodyObjects ( Map :: class ) // Object(s) passed in the body as a list of maps request . bodyObjects < Map <*, *>>() // Syntactic sugar for the previous statement }","title":"Request"},{"location":"port_http_server/#response","text":"Response information is provided by the response field: get ( \"/response\" ) { response . body // get response content response . body = \"Hello\" // sets content to Hello response . headers [ \"FOO\" ] = listOf ( \"bar\" ) // sets header FOO with value bar response . status // get the response status response . status = 401 // set status code to 401 response . contentType // get the content type response . contentType = \"text/xml\" // set content type to text/xml }","title":"Response"},{"location":"port_http_server/#path-parameters","text":"Route patterns can include named parameters, accessible via the pathParameters map on the request object: get ( \"/pathParam/{foo}\" ) { request . pathParameters [ \"foo\" ] // value of foo path parameter request . pathParameters // map with all parameters }","title":"Path Parameters"},{"location":"port_http_server/#query-parameters","text":"It is possible to access the whole query string or only an specific query parameter using the parameters map on the request object: get ( \"/queryParam\" ) { request . queryString request . queryParameters // the query param list request . queryParameters [ \"FOO\" ] ?. first () // value of FOO query param request . queryParameters [ \"FOO\" ] // all values of FOO query param }","title":"Query Parameters"},{"location":"port_http_server/#redirects","text":"You can redirect requests (returning 30x codes) by using Call utility methods: get ( \"/redirect\" ) { redirect ( \"/call\" ) // browser redirect to /call }","title":"Redirects"},{"location":"port_http_server/#cookies","text":"The request and response cookie functions provide a convenient way for sharing information between handlers, requests, or even servers. You can read client sent cookies from the request's cookies read only map. To change cookies or add new ones you have to use response . addCookie () and response . removeCookie () methods. Check the following sample code for details: get ( \"/cookie\" ) { request . cookies // get map of all request cookies request . cookies [ \"foo\" ] // access request cookie by name val cookie = HttpCookie ( \"new_foo\" , \"bar\" ) response . addCookie ( cookie ) // set cookie with a value cookie . maxAge = 3600 response . addCookie ( cookie ) // set cookie with a max-age cookie . secure = true response . addCookie ( cookie ) // secure cookie response . removeCookie ( \"foo\" ) // remove cookie }","title":"Cookies"},{"location":"port_http_server/#sessions","text":"Every request has access to the session created on the server side, the session object provides the following methods: get ( \"/session\" ) { session // create and return session session . attributes [ \"user\" ] // Get session attribute 'user' session . set ( \"user\" , \"foo\" ) // Set session attribute 'user' session . removeAttribute ( \"user\" ) // Remove session attribute 'user' session . attributes // Get all session attributes session . id // Get session id session . isNew () // Check if session is new }","title":"Sessions"},{"location":"port_http_server/#halting","text":"To immediately stop a request within a filter or route use halt () . halt () is not intended to be used inside exception-mappers. Check the following snippet for an example: get ( \"/halt\" ) { halt () // halt with status 500 and stop route processing /* * These are just examples the following code will never be reached */ halt ( 401 ) // halt with status halt ( \"Body Message\" ) // halt with message (status 500) halt ( 401 , \"Go away!\" ) // halt with status and message }","title":"Halting"},{"location":"port_http_server/#filters","text":"You might know filters as interceptors, or middleware from other libraries. Filters are blocks of code executed before or after one or more routes. They can read the request and read/modify the response. All filters that match a route are executed in the order they are declared. Filters optionally take a pattern, causing them to be executed only if the request path matches that pattern. Before and after filters are always executed (if the route is matched). But any of them may stop the execution chain if halted. If halt () is called in one filter, filter processing is stopped for that kind of filter ( before or after ). In the case of before filters, this also prevent the route from being executed (but after filters are executed anyway). The following code details filters usage: before { response . headers [ \"b_all\" ] = listOf ( \"true\" ) } before ( \"/filters/*\" ) { response . headers [ \"b_filters\" ] = listOf ( \"true\" ) } get ( \"/filters/route\" ) { ok ( \"filters route\" ) } after ( \"/filters/*\" ) { response . headers [ \"a_filters\" ] = listOf ( \"true\" ) } get ( \"/filters\" ) { ok ( \"filters\" ) } path ( \"/nested\" ) { before { response . headers [ \"b_nested\" ] = listOf ( \"true\" ) } before ( \"/\" ) { response . headers [ \"b_nested_2\" ] = listOf ( \"true\" ) } get ( \"/filters\" ) { ok ( \"nested filters\" ) } get ( \"/halted\" ) { halt ( 499 , \"halted\" ) } get { ok ( \"nested also\" ) } after { response . headers [ \"a_nested\" ] = listOf ( \"true\" ) } } after { response . headers [ \"a_all\" ] = listOf ( \"true\" ) }","title":"Filters"},{"location":"port_http_server/#error-handling","text":"You can provide handlers for runtime errors. Errors are unhandled thrown exceptions in the callbacks, or handlers halted with an error code. Error handlers for a given code or exception are unique, and the first one defined is the one that will be used.","title":"Error Handling"},{"location":"port_http_server/#http-errors-handlers","text":"Allows to handle routes halted with a given code. These handlers are only applied if the route is halted, if the error code is returned with send it won't be handled as an error. Example: // Register handler for routes halted with 512 code error ( 512 ) { send ( 500 , \"Ouch\" )} // If status code (512) is returned with `send` error won't be triggered get ( \"/errors\" ) { halt ( 512 ) }","title":"HTTP Errors Handlers"},{"location":"port_http_server/#exception-mapping","text":"You can handle exceptions of a given type for all routes and filters. The handler allows you to refer to the thrown exception. Look at the following code for a detailed example: // Register handler for routes which callbacks throw exceptions error ( CodedException :: class ) { send ( 599 , it . message ?: \"empty\" ) } error ( IllegalStateException :: class ) { send ( 505 , it . message ?: \"empty\" ) } get ( \"/exceptions\" ) { error ( \"Message\" ) } get ( \"/codedExceptions\" ) { halt ( 509 , \"code\" ) }","title":"Exception Mapping"},{"location":"port_http_server/#static-files","text":"You can use a folder in the classpath for serving static files with the get () methods. Note that the public directory name is not included in the URL. Asset mapping is handled like any other route, so if an asset mapping is matched, no other route will be checked (assets or other routes). And also, if a previous route is matched, the asset mapping will never be checked. Being get ( resource ) a shortcut of get ( \"/*\" , resource ) it should be placed as the last route. Check the next example for details: get ( \"/web/file.txt\" ) { ok ( \"It matches this route and won't search for the file\" ) } // Expose resources on the '/public' resource folder over the '/web' HTTP path get ( \"/web/*\" , Resource ( \"public\" )) // Maps resources on 'assets' on the server root (assets/f.css -> /f.css) // '/public/css/style.css' resource would be: 'http://{host}:{port}/css/style.css' get ( Resource ( \"assets\" ))","title":"Static Files"},{"location":"port_http_server/#mime-types","text":"The MIME types of static files are computed from the file extension using the SerializationManager.contentTypeOf method.","title":"MIME types"},{"location":"port_http_server/#testing","text":"","title":"Testing"},{"location":"port_http_server/#integration-tests","text":"To test HTTP servers from outside using a real Adapter, you can create a server setting 0 as port. This will pick a random free port that you can check later: val router = Router { get ( \"/hello\" ) { ok ( \"Hi!\" ) } } val serverSettings = ServerSettings ( \"name\" , InetAddress . getLoopbackAddress (), 0 ) val server = Server ( adapter , router , serverSettings ) server . start () val client = Client ( \"http://localhost:${server.runtimePort}\" ) assert ( client . get ( \"/hello\" ). responseBody == \"Hi!\" ) server . stop () To do this kind of tests without creating a custom server (using the real production code). Check the tests of the starter projects .","title":"Integration tests"},{"location":"port_http_server/#mocking-calls","text":"To unit test callbacks you can create test calls with hardcoded requests, responses and sessions. To use it in your project you'll have to include a dependency (with test scope): build.gradle testImplementation ( \"com.hexagonkt:port_http_server:$hexagonVersion:test\" ) pom.xml <dependency> <groupId> com.hexagonkt </groupId> <artifactId> port_http_server </artifactId> <version> $hexagonVersion </version> <scope> test </scope> </dependency> Check testCall , TestRequest , TestResponse and TestSession for more details. For a quick sample, check the snipped below: private fun Call . testedCallback () { if ( request . body == \"weird\" ) send ( 999 , \"Weird error\" ) } @Test fun `Test call behaves as expected` () { val testCall = testCall ( TestRequest ( body = \"weird\" )) testCall . testedCallback () assert ( testCall . response . status == 999 ) assert ( testCall . response . body == \"Weird error\" ) }","title":"Mocking calls"},{"location":"port_http_server/#packages","text":"Name Summary com.hexagonkt.http.server This package defines the classes used in the HTTP DSL.","title":"Packages"},{"location":"port_http_server/#index","text":"All Types","title":"Index"},{"location":"port_http_server/alltypes/","text":"This port's purpose is to develop HTTP servers (REST services or Web applications). It defines a DSL to declare HTTP request handlers. All Types \u00b6 Name Summary com.hexagonkt.http.server.Call HTTP request context. It holds client supplied data and methods to change the response. com.hexagonkt.http.server.ErrorCodeCallback Alias for errors' callbacks. Functions executed to handle a HTTP error code. com.hexagonkt.http.server.ExceptionCallback Alias for exceptions' callbacks. Functions executed when an exception is thrown. com.hexagonkt.http.server.FilterOrder Type of filter. Indicates when the filter is executed. com.hexagonkt.http.server.Part com.hexagonkt.http.server.PortHttpServerSamplesTest com.hexagonkt.http.server.Request Lists would be initialized loading all elements when they are used (set it as lazy in implementations) this will have a performance penalty in favor of ease of use. The alternative would be using a 'Map/List wrapper that delegates calls to abstract methods in the interface (I won't do this just now). com.hexagonkt.http.server.RequestHandler com.hexagonkt.http.server.Response Check 'Request' comment. And also note that lists should be updated by engines after callback is processed, this data is like a buffer that needs to be dumped to the real response. com.hexagonkt.http.server.RouteCallback Alias for routes' and filters' callbacks. Functions executed when a route is matched. com.hexagonkt.http.server.Router TODO Document. TODO Index routes (ie: GET /foo) TODO Map with routes to all handlers needed Creates and initializes a Router based on a code block. com.hexagonkt.http.server.Server A server that listen to HTTP connections on a port and address and route requests using a router. com.hexagonkt.http.server.ServerPort Represents a server instance of one kind. com.hexagonkt.http.server.ServerSettings com.hexagonkt.http.server.Session Provides session information.","title":"Home"},{"location":"port_http_server/alltypes/#all-types","text":"Name Summary com.hexagonkt.http.server.Call HTTP request context. It holds client supplied data and methods to change the response. com.hexagonkt.http.server.ErrorCodeCallback Alias for errors' callbacks. Functions executed to handle a HTTP error code. com.hexagonkt.http.server.ExceptionCallback Alias for exceptions' callbacks. Functions executed when an exception is thrown. com.hexagonkt.http.server.FilterOrder Type of filter. Indicates when the filter is executed. com.hexagonkt.http.server.Part com.hexagonkt.http.server.PortHttpServerSamplesTest com.hexagonkt.http.server.Request Lists would be initialized loading all elements when they are used (set it as lazy in implementations) this will have a performance penalty in favor of ease of use. The alternative would be using a 'Map/List wrapper that delegates calls to abstract methods in the interface (I won't do this just now). com.hexagonkt.http.server.RequestHandler com.hexagonkt.http.server.Response Check 'Request' comment. And also note that lists should be updated by engines after callback is processed, this data is like a buffer that needs to be dumped to the real response. com.hexagonkt.http.server.RouteCallback Alias for routes' and filters' callbacks. Functions executed when a route is matched. com.hexagonkt.http.server.Router TODO Document. TODO Index routes (ie: GET /foo) TODO Map with routes to all handlers needed Creates and initializes a Router based on a code block. com.hexagonkt.http.server.Server A server that listen to HTTP connections on a port and address and route requests using a router. com.hexagonkt.http.server.ServerPort Represents a server instance of one kind. com.hexagonkt.http.server.ServerSettings com.hexagonkt.http.server.Session Provides session information.","title":"All Types"},{"location":"port_http_server/com.hexagonkt.http.server/","text":"com.hexagonkt.http.server Package com.hexagonkt.http.server \u00b6 This package defines the classes used in the HTTP DSL. Types \u00b6 Name Summary Call class Call HTTP request context. It holds client supplied data and methods to change the response. FilterOrder enum class FilterOrder Type of filter. Indicates when the filter is executed. Part data class Part PortHttpServerSamplesTest abstract class PortHttpServerSamplesTest Request abstract class Request Lists would be initialized loading all elements when they are used (set it as lazy in implementations) this will have a performance penalty in favor of ease of use. The alternative would be using a 'Map/List wrapper that delegates calls to abstract methods in the interface (I won't do this just now). RequestHandler sealed class RequestHandler Response abstract class Response Check 'Request' comment. And also note that lists should be updated by engines after callback is processed, this data is like a buffer that needs to be dumped to the real response. Router class Router TODO Document. TODO Index routes (ie: GET /foo) TODO Map with routes to all handlers needed Creates and initializes a Router based on a code block. Server data class Server A server that listen to HTTP connections on a port and address and route requests using a router. ServerPort interface ServerPort Represents a server instance of one kind. ServerSettings data class ServerSettings Session abstract class Session Provides session information. Type Aliases \u00b6 Name Summary ErrorCodeCallback typealias ErrorCodeCallback = Call .( CodedException ) -> Unit Alias for errors' callbacks. Functions executed to handle a HTTP error code. ExceptionCallback typealias ExceptionCallback = Call .( Exception ) -> Unit Alias for exceptions' callbacks. Functions executed when an exception is thrown. RouteCallback typealias RouteCallback = Call .() -> Unit Alias for routes' and filters' callbacks. Functions executed when a route is matched.","title":"Home"},{"location":"port_http_server/com.hexagonkt.http.server/#package-comhexagonkthttpserver","text":"This package defines the classes used in the HTTP DSL.","title":"Package com.hexagonkt.http.server"},{"location":"port_http_server/com.hexagonkt.http.server/#types","text":"Name Summary Call class Call HTTP request context. It holds client supplied data and methods to change the response. FilterOrder enum class FilterOrder Type of filter. Indicates when the filter is executed. Part data class Part PortHttpServerSamplesTest abstract class PortHttpServerSamplesTest Request abstract class Request Lists would be initialized loading all elements when they are used (set it as lazy in implementations) this will have a performance penalty in favor of ease of use. The alternative would be using a 'Map/List wrapper that delegates calls to abstract methods in the interface (I won't do this just now). RequestHandler sealed class RequestHandler Response abstract class Response Check 'Request' comment. And also note that lists should be updated by engines after callback is processed, this data is like a buffer that needs to be dumped to the real response. Router class Router TODO Document. TODO Index routes (ie: GET /foo) TODO Map with routes to all handlers needed Creates and initializes a Router based on a code block. Server data class Server A server that listen to HTTP connections on a port and address and route requests using a router. ServerPort interface ServerPort Represents a server instance of one kind. ServerSettings data class ServerSettings Session abstract class Session Provides session information.","title":"Types"},{"location":"port_http_server/com.hexagonkt.http.server/#type-aliases","text":"Name Summary ErrorCodeCallback typealias ErrorCodeCallback = Call .( CodedException ) -> Unit Alias for errors' callbacks. Functions executed to handle a HTTP error code. ExceptionCallback typealias ExceptionCallback = Call .( Exception ) -> Unit Alias for exceptions' callbacks. Functions executed when an exception is thrown. RouteCallback typealias RouteCallback = Call .() -> Unit Alias for routes' and filters' callbacks. Functions executed when a route is matched.","title":"Type Aliases"},{"location":"port_http_server/com.hexagonkt.http.server/-error-code-callback/","text":"com.hexagonkt.http.server / ErrorCodeCallback ErrorCodeCallback \u00b6 typealias ErrorCodeCallback = Call .( CodedException ) -> Unit Alias for errors' callbacks. Functions executed to handle a HTTP error code.","title":" error code callback"},{"location":"port_http_server/com.hexagonkt.http.server/-error-code-callback/#errorcodecallback","text":"typealias ErrorCodeCallback = Call .( CodedException ) -> Unit Alias for errors' callbacks. Functions executed to handle a HTTP error code.","title":"ErrorCodeCallback"},{"location":"port_http_server/com.hexagonkt.http.server/-exception-callback/","text":"com.hexagonkt.http.server / ExceptionCallback ExceptionCallback \u00b6 typealias ExceptionCallback = Call .( Exception ) -> Unit Alias for exceptions' callbacks. Functions executed when an exception is thrown.","title":" exception callback"},{"location":"port_http_server/com.hexagonkt.http.server/-exception-callback/#exceptioncallback","text":"typealias ExceptionCallback = Call .( Exception ) -> Unit Alias for exceptions' callbacks. Functions executed when an exception is thrown.","title":"ExceptionCallback"},{"location":"port_http_server/com.hexagonkt.http.server/-route-callback/","text":"com.hexagonkt.http.server / RouteCallback RouteCallback \u00b6 typealias RouteCallback = Call .() -> Unit Alias for routes' and filters' callbacks. Functions executed when a route is matched.","title":" route callback"},{"location":"port_http_server/com.hexagonkt.http.server/-route-callback/#routecallback","text":"typealias RouteCallback = Call .() -> Unit Alias for routes' and filters' callbacks. Functions executed when a route is matched.","title":"RouteCallback"},{"location":"port_http_server/com.hexagonkt.http.server/-call/","text":"com.hexagonkt.http.server / Call Call \u00b6 class Call HTTP request context. It holds client supplied data and methods to change the response. Constructors \u00b6 Name Summary <init> Call ( request : Request , response : Response , session : Session ) HTTP request context. It holds client supplied data and methods to change the response. Properties \u00b6 Name Summary attributes val attributes: MutableMap < String , Any > Call attributes (for the current request). Same as HttpServletRequest.setAttribute(). formParameters val formParameters: Map < String , List < String >> parameters val parameters: Map < String , List < String >> pathParameters val pathParameters: RequiredKeysMap < String , String > queryParameters val queryParameters: Map < String , List < String >> request val request: Request requestFormat val requestFormat: SerializationFormat requestType val requestType: String response val response: Response responseFormat val responseFormat: SerializationFormat responseType val responseType: String session val session: Session Functions \u00b6 Name Summary halt fun halt ( content : Any ): Nothing fun halt ( code : Int = 500 , content : Any = \"\" ): Nothing ok fun ok ( content : Any = \"\" , contentType : String ? = null ): Unit fun ok ( content : Any , serializationFormat : SerializationFormat = responseFormat , charset : Charset ? = null ): Unit redirect fun redirect ( url : String ): Unit send fun send ( code : Int , content : Any = \"\" , contentType : String ? = null ): Unit fun send ( code : Int , content : Any , serializationFormat : SerializationFormat , charset : Charset ? ): Unit fun send ( code : Int , content : Any , contentType : ContentType ): Unit","title":"Home"},{"location":"port_http_server/com.hexagonkt.http.server/-call/#call","text":"class Call HTTP request context. It holds client supplied data and methods to change the response.","title":"Call"},{"location":"port_http_server/com.hexagonkt.http.server/-call/#constructors","text":"Name Summary <init> Call ( request : Request , response : Response , session : Session ) HTTP request context. It holds client supplied data and methods to change the response.","title":"Constructors"},{"location":"port_http_server/com.hexagonkt.http.server/-call/#properties","text":"Name Summary attributes val attributes: MutableMap < String , Any > Call attributes (for the current request). Same as HttpServletRequest.setAttribute(). formParameters val formParameters: Map < String , List < String >> parameters val parameters: Map < String , List < String >> pathParameters val pathParameters: RequiredKeysMap < String , String > queryParameters val queryParameters: Map < String , List < String >> request val request: Request requestFormat val requestFormat: SerializationFormat requestType val requestType: String response val response: Response responseFormat val responseFormat: SerializationFormat responseType val responseType: String session val session: Session","title":"Properties"},{"location":"port_http_server/com.hexagonkt.http.server/-call/#functions","text":"Name Summary halt fun halt ( content : Any ): Nothing fun halt ( code : Int = 500 , content : Any = \"\" ): Nothing ok fun ok ( content : Any = \"\" , contentType : String ? = null ): Unit fun ok ( content : Any , serializationFormat : SerializationFormat = responseFormat , charset : Charset ? = null ): Unit redirect fun redirect ( url : String ): Unit send fun send ( code : Int , content : Any = \"\" , contentType : String ? = null ): Unit fun send ( code : Int , content : Any , serializationFormat : SerializationFormat , charset : Charset ? ): Unit fun send ( code : Int , content : Any , contentType : ContentType ): Unit","title":"Functions"},{"location":"port_http_server/com.hexagonkt.http.server/-call/-init-/","text":"com.hexagonkt.http.server / Call / <init> <init> \u00b6 Call ( request : Request , response : Response , session : Session ) HTTP request context. It holds client supplied data and methods to change the response.","title":" init "},{"location":"port_http_server/com.hexagonkt.http.server/-call/-init-/#init","text":"Call ( request : Request , response : Response , session : Session ) HTTP request context. It holds client supplied data and methods to change the response.","title":"&lt;init&gt;"},{"location":"port_http_server/com.hexagonkt.http.server/-call/attributes/","text":"com.hexagonkt.http.server / Call / attributes attributes \u00b6 val attributes: MutableMap < String , Any > Call attributes (for the current request). Same as HttpServletRequest.setAttribute(). Getter Call attributes (for the current request). Same as HttpServletRequest.setAttribute().","title":"Attributes"},{"location":"port_http_server/com.hexagonkt.http.server/-call/attributes/#attributes","text":"val attributes: MutableMap < String , Any > Call attributes (for the current request). Same as HttpServletRequest.setAttribute(). Getter Call attributes (for the current request). Same as HttpServletRequest.setAttribute().","title":"attributes"},{"location":"port_http_server/com.hexagonkt.http.server/-call/form-parameters/","text":"com.hexagonkt.http.server / Call / formParameters formParameters \u00b6 val formParameters: Map < String , List < String >>","title":"Form parameters"},{"location":"port_http_server/com.hexagonkt.http.server/-call/form-parameters/#formparameters","text":"val formParameters: Map < String , List < String >>","title":"formParameters"},{"location":"port_http_server/com.hexagonkt.http.server/-call/halt/","text":"com.hexagonkt.http.server / Call / halt halt \u00b6 fun halt ( content : Any ): Nothing fun halt ( code : Int = 500 , content : Any = \"\" ): Nothing","title":"Halt"},{"location":"port_http_server/com.hexagonkt.http.server/-call/halt/#halt","text":"fun halt ( content : Any ): Nothing fun halt ( code : Int = 500 , content : Any = \"\" ): Nothing","title":"halt"},{"location":"port_http_server/com.hexagonkt.http.server/-call/ok/","text":"com.hexagonkt.http.server / Call / ok ok \u00b6 fun ok ( content : Any = \"\" , contentType : String ? = null ): Unit fun ok ( content : Any , serializationFormat : SerializationFormat = responseFormat , charset : Charset ? = null ): Unit","title":"Ok"},{"location":"port_http_server/com.hexagonkt.http.server/-call/ok/#ok","text":"fun ok ( content : Any = \"\" , contentType : String ? = null ): Unit fun ok ( content : Any , serializationFormat : SerializationFormat = responseFormat , charset : Charset ? = null ): Unit","title":"ok"},{"location":"port_http_server/com.hexagonkt.http.server/-call/parameters/","text":"com.hexagonkt.http.server / Call / parameters parameters \u00b6 val parameters: Map < String , List < String >>","title":"Parameters"},{"location":"port_http_server/com.hexagonkt.http.server/-call/parameters/#parameters","text":"val parameters: Map < String , List < String >>","title":"parameters"},{"location":"port_http_server/com.hexagonkt.http.server/-call/path-parameters/","text":"com.hexagonkt.http.server / Call / pathParameters pathParameters \u00b6 val pathParameters: RequiredKeysMap < String , String >","title":"Path parameters"},{"location":"port_http_server/com.hexagonkt.http.server/-call/path-parameters/#pathparameters","text":"val pathParameters: RequiredKeysMap < String , String >","title":"pathParameters"},{"location":"port_http_server/com.hexagonkt.http.server/-call/query-parameters/","text":"com.hexagonkt.http.server / Call / queryParameters queryParameters \u00b6 val queryParameters: Map < String , List < String >>","title":"Query parameters"},{"location":"port_http_server/com.hexagonkt.http.server/-call/query-parameters/#queryparameters","text":"val queryParameters: Map < String , List < String >>","title":"queryParameters"},{"location":"port_http_server/com.hexagonkt.http.server/-call/redirect/","text":"com.hexagonkt.http.server / Call / redirect redirect \u00b6 fun redirect ( url : String ): Unit","title":"Redirect"},{"location":"port_http_server/com.hexagonkt.http.server/-call/redirect/#redirect","text":"fun redirect ( url : String ): Unit","title":"redirect"},{"location":"port_http_server/com.hexagonkt.http.server/-call/request-format/","text":"com.hexagonkt.http.server / Call / requestFormat requestFormat \u00b6 val requestFormat: SerializationFormat","title":"Request format"},{"location":"port_http_server/com.hexagonkt.http.server/-call/request-format/#requestformat","text":"val requestFormat: SerializationFormat","title":"requestFormat"},{"location":"port_http_server/com.hexagonkt.http.server/-call/request-type/","text":"com.hexagonkt.http.server / Call / requestType requestType \u00b6 val requestType: String","title":"Request type"},{"location":"port_http_server/com.hexagonkt.http.server/-call/request-type/#requesttype","text":"val requestType: String","title":"requestType"},{"location":"port_http_server/com.hexagonkt.http.server/-call/request/","text":"com.hexagonkt.http.server / Call / request request \u00b6 val request: Request","title":"Request"},{"location":"port_http_server/com.hexagonkt.http.server/-call/request/#request","text":"val request: Request","title":"request"},{"location":"port_http_server/com.hexagonkt.http.server/-call/response-format/","text":"com.hexagonkt.http.server / Call / responseFormat responseFormat \u00b6 val responseFormat: SerializationFormat","title":"Response format"},{"location":"port_http_server/com.hexagonkt.http.server/-call/response-format/#responseformat","text":"val responseFormat: SerializationFormat","title":"responseFormat"},{"location":"port_http_server/com.hexagonkt.http.server/-call/response-type/","text":"com.hexagonkt.http.server / Call / responseType responseType \u00b6 val responseType: String","title":"Response type"},{"location":"port_http_server/com.hexagonkt.http.server/-call/response-type/#responsetype","text":"val responseType: String","title":"responseType"},{"location":"port_http_server/com.hexagonkt.http.server/-call/response/","text":"com.hexagonkt.http.server / Call / response response \u00b6 val response: Response","title":"Response"},{"location":"port_http_server/com.hexagonkt.http.server/-call/response/#response","text":"val response: Response","title":"response"},{"location":"port_http_server/com.hexagonkt.http.server/-call/send/","text":"com.hexagonkt.http.server / Call / send send \u00b6 fun send ( code : Int , content : Any = \"\" , contentType : String ? = null ): Unit fun send ( code : Int , content : Any , serializationFormat : SerializationFormat , charset : Charset ? ): Unit fun send ( code : Int , content : Any , contentType : ContentType ): Unit","title":"Send"},{"location":"port_http_server/com.hexagonkt.http.server/-call/send/#send","text":"fun send ( code : Int , content : Any = \"\" , contentType : String ? = null ): Unit fun send ( code : Int , content : Any , serializationFormat : SerializationFormat , charset : Charset ? ): Unit fun send ( code : Int , content : Any , contentType : ContentType ): Unit","title":"send"},{"location":"port_http_server/com.hexagonkt.http.server/-call/session/","text":"com.hexagonkt.http.server / Call / session session \u00b6 val session: Session","title":"Session"},{"location":"port_http_server/com.hexagonkt.http.server/-call/session/#session","text":"val session: Session","title":"session"},{"location":"port_http_server/com.hexagonkt.http.server/-filter-order/","text":"com.hexagonkt.http.server / FilterOrder FilterOrder \u00b6 enum class FilterOrder Type of filter. Indicates when the filter is executed. Enum Values \u00b6 Name Summary AFTER Filter executed after the route is processed. BEFORE Filter executed before the route is processed.","title":"Home"},{"location":"port_http_server/com.hexagonkt.http.server/-filter-order/#filterorder","text":"enum class FilterOrder Type of filter. Indicates when the filter is executed.","title":"FilterOrder"},{"location":"port_http_server/com.hexagonkt.http.server/-filter-order/#enum-values","text":"Name Summary AFTER Filter executed after the route is processed. BEFORE Filter executed before the route is processed.","title":"Enum Values"},{"location":"port_http_server/com.hexagonkt.http.server/-filter-order/-a-f-t-e-r/","text":"com.hexagonkt.http.server / FilterOrder / AFTER AFTER \u00b6 AFTER Filter executed after the route is processed.","title":" a f t e r"},{"location":"port_http_server/com.hexagonkt.http.server/-filter-order/-a-f-t-e-r/#after","text":"AFTER Filter executed after the route is processed.","title":"AFTER"},{"location":"port_http_server/com.hexagonkt.http.server/-filter-order/-b-e-f-o-r-e/","text":"com.hexagonkt.http.server / FilterOrder / BEFORE BEFORE \u00b6 BEFORE Filter executed before the route is processed.","title":" b e f o r e"},{"location":"port_http_server/com.hexagonkt.http.server/-filter-order/-b-e-f-o-r-e/#before","text":"BEFORE Filter executed before the route is processed.","title":"BEFORE"},{"location":"port_http_server/com.hexagonkt.http.server/-part/","text":"com.hexagonkt.http.server / Part Part \u00b6 data class Part Constructors \u00b6 Name Summary <init> Part ( contentType : String ? , headers : Map < String , List < String >> , inputStream : InputStream , name : String , size : Long , submittedFileName : String ? ) Properties \u00b6 Name Summary contentType val contentType: String ? headers val headers: Map < String , List < String >> inputStream val inputStream: InputStream name val name: String size val size: Long submittedFileName val submittedFileName: String ?","title":"Home"},{"location":"port_http_server/com.hexagonkt.http.server/-part/#part","text":"data class Part","title":"Part"},{"location":"port_http_server/com.hexagonkt.http.server/-part/#constructors","text":"Name Summary <init> Part ( contentType : String ? , headers : Map < String , List < String >> , inputStream : InputStream , name : String , size : Long , submittedFileName : String ? )","title":"Constructors"},{"location":"port_http_server/com.hexagonkt.http.server/-part/#properties","text":"Name Summary contentType val contentType: String ? headers val headers: Map < String , List < String >> inputStream val inputStream: InputStream name val name: String size val size: Long submittedFileName val submittedFileName: String ?","title":"Properties"},{"location":"port_http_server/com.hexagonkt.http.server/-part/-init-/","text":"com.hexagonkt.http.server / Part / <init> <init> \u00b6 Part ( contentType : String ? , headers : Map < String , List < String >> , inputStream : InputStream , name : String , size : Long , submittedFileName : String ? )","title":" init "},{"location":"port_http_server/com.hexagonkt.http.server/-part/-init-/#init","text":"Part ( contentType : String ? , headers : Map < String , List < String >> , inputStream : InputStream , name : String , size : Long , submittedFileName : String ? )","title":"&lt;init&gt;"},{"location":"port_http_server/com.hexagonkt.http.server/-part/content-type/","text":"com.hexagonkt.http.server / Part / contentType contentType \u00b6 val contentType: String ?","title":"Content type"},{"location":"port_http_server/com.hexagonkt.http.server/-part/content-type/#contenttype","text":"val contentType: String ?","title":"contentType"},{"location":"port_http_server/com.hexagonkt.http.server/-part/headers/","text":"com.hexagonkt.http.server / Part / headers headers \u00b6 val headers: Map < String , List < String >>","title":"Headers"},{"location":"port_http_server/com.hexagonkt.http.server/-part/headers/#headers","text":"val headers: Map < String , List < String >>","title":"headers"},{"location":"port_http_server/com.hexagonkt.http.server/-part/input-stream/","text":"com.hexagonkt.http.server / Part / inputStream inputStream \u00b6 val inputStream: InputStream","title":"Input stream"},{"location":"port_http_server/com.hexagonkt.http.server/-part/input-stream/#inputstream","text":"val inputStream: InputStream","title":"inputStream"},{"location":"port_http_server/com.hexagonkt.http.server/-part/name/","text":"com.hexagonkt.http.server / Part / name name \u00b6 val name: String","title":"Name"},{"location":"port_http_server/com.hexagonkt.http.server/-part/name/#name","text":"val name: String","title":"name"},{"location":"port_http_server/com.hexagonkt.http.server/-part/size/","text":"com.hexagonkt.http.server / Part / size size \u00b6 val size: Long","title":"Size"},{"location":"port_http_server/com.hexagonkt.http.server/-part/size/#size","text":"val size: Long","title":"size"},{"location":"port_http_server/com.hexagonkt.http.server/-part/submitted-file-name/","text":"com.hexagonkt.http.server / Part / submittedFileName submittedFileName \u00b6 val submittedFileName: String ?","title":"Submitted file name"},{"location":"port_http_server/com.hexagonkt.http.server/-part/submitted-file-name/#submittedfilename","text":"val submittedFileName: String ?","title":"submittedFileName"},{"location":"port_http_server/com.hexagonkt.http.server/-port-http-server-samples-test/","text":"com.hexagonkt.http.server / PortHttpServerSamplesTest PortHttpServerSamplesTest \u00b6 abstract class PortHttpServerSamplesTest Constructors \u00b6 Name Summary <init> PortHttpServerSamplesTest ( adapter : ServerPort ) Properties \u00b6 Name Summary adapter val adapter: ServerPort Functions \u00b6 Name Summary callbacks fun callbacks (): Unit errors fun errors (): Unit files fun files (): Unit filters fun filters (): Unit routeGroups fun routeGroups (): Unit routers fun routers (): Unit routesCreation fun routesCreation (): Unit serverCreation fun serverCreation (): Unit test fun test (): Unit","title":"Home"},{"location":"port_http_server/com.hexagonkt.http.server/-port-http-server-samples-test/#porthttpserversamplestest","text":"abstract class PortHttpServerSamplesTest","title":"PortHttpServerSamplesTest"},{"location":"port_http_server/com.hexagonkt.http.server/-port-http-server-samples-test/#constructors","text":"Name Summary <init> PortHttpServerSamplesTest ( adapter : ServerPort )","title":"Constructors"},{"location":"port_http_server/com.hexagonkt.http.server/-port-http-server-samples-test/#properties","text":"Name Summary adapter val adapter: ServerPort","title":"Properties"},{"location":"port_http_server/com.hexagonkt.http.server/-port-http-server-samples-test/#functions","text":"Name Summary callbacks fun callbacks (): Unit errors fun errors (): Unit files fun files (): Unit filters fun filters (): Unit routeGroups fun routeGroups (): Unit routers fun routers (): Unit routesCreation fun routesCreation (): Unit serverCreation fun serverCreation (): Unit test fun test (): Unit","title":"Functions"},{"location":"port_http_server/com.hexagonkt.http.server/-port-http-server-samples-test/-init-/","text":"com.hexagonkt.http.server / PortHttpServerSamplesTest / <init> <init> \u00b6 PortHttpServerSamplesTest ( adapter : ServerPort )","title":" init "},{"location":"port_http_server/com.hexagonkt.http.server/-port-http-server-samples-test/-init-/#init","text":"PortHttpServerSamplesTest ( adapter : ServerPort )","title":"&lt;init&gt;"},{"location":"port_http_server/com.hexagonkt.http.server/-port-http-server-samples-test/adapter/","text":"com.hexagonkt.http.server / PortHttpServerSamplesTest / adapter adapter \u00b6 val adapter: ServerPort","title":"Adapter"},{"location":"port_http_server/com.hexagonkt.http.server/-port-http-server-samples-test/adapter/#adapter","text":"val adapter: ServerPort","title":"adapter"},{"location":"port_http_server/com.hexagonkt.http.server/-port-http-server-samples-test/callbacks/","text":"com.hexagonkt.http.server / PortHttpServerSamplesTest / callbacks callbacks \u00b6 fun callbacks (): Unit","title":"Callbacks"},{"location":"port_http_server/com.hexagonkt.http.server/-port-http-server-samples-test/callbacks/#callbacks","text":"fun callbacks (): Unit","title":"callbacks"},{"location":"port_http_server/com.hexagonkt.http.server/-port-http-server-samples-test/errors/","text":"com.hexagonkt.http.server / PortHttpServerSamplesTest / errors errors \u00b6 fun errors (): Unit","title":"Errors"},{"location":"port_http_server/com.hexagonkt.http.server/-port-http-server-samples-test/errors/#errors","text":"fun errors (): Unit","title":"errors"},{"location":"port_http_server/com.hexagonkt.http.server/-port-http-server-samples-test/files/","text":"com.hexagonkt.http.server / PortHttpServerSamplesTest / files files \u00b6 fun files (): Unit","title":"Files"},{"location":"port_http_server/com.hexagonkt.http.server/-port-http-server-samples-test/files/#files","text":"fun files (): Unit","title":"files"},{"location":"port_http_server/com.hexagonkt.http.server/-port-http-server-samples-test/filters/","text":"com.hexagonkt.http.server / PortHttpServerSamplesTest / filters filters \u00b6 fun filters (): Unit","title":"Filters"},{"location":"port_http_server/com.hexagonkt.http.server/-port-http-server-samples-test/filters/#filters","text":"fun filters (): Unit","title":"filters"},{"location":"port_http_server/com.hexagonkt.http.server/-port-http-server-samples-test/route-groups/","text":"com.hexagonkt.http.server / PortHttpServerSamplesTest / routeGroups routeGroups \u00b6 fun routeGroups (): Unit","title":"Route groups"},{"location":"port_http_server/com.hexagonkt.http.server/-port-http-server-samples-test/route-groups/#routegroups","text":"fun routeGroups (): Unit","title":"routeGroups"},{"location":"port_http_server/com.hexagonkt.http.server/-port-http-server-samples-test/routers/","text":"com.hexagonkt.http.server / PortHttpServerSamplesTest / routers routers \u00b6 fun routers (): Unit","title":"Routers"},{"location":"port_http_server/com.hexagonkt.http.server/-port-http-server-samples-test/routers/#routers","text":"fun routers (): Unit","title":"routers"},{"location":"port_http_server/com.hexagonkt.http.server/-port-http-server-samples-test/routes-creation/","text":"com.hexagonkt.http.server / PortHttpServerSamplesTest / routesCreation routesCreation \u00b6 fun routesCreation (): Unit","title":"Routes creation"},{"location":"port_http_server/com.hexagonkt.http.server/-port-http-server-samples-test/routes-creation/#routescreation","text":"fun routesCreation (): Unit","title":"routesCreation"},{"location":"port_http_server/com.hexagonkt.http.server/-port-http-server-samples-test/server-creation/","text":"com.hexagonkt.http.server / PortHttpServerSamplesTest / serverCreation serverCreation \u00b6 fun serverCreation (): Unit","title":"Server creation"},{"location":"port_http_server/com.hexagonkt.http.server/-port-http-server-samples-test/server-creation/#servercreation","text":"fun serverCreation (): Unit","title":"serverCreation"},{"location":"port_http_server/com.hexagonkt.http.server/-port-http-server-samples-test/test/","text":"com.hexagonkt.http.server / PortHttpServerSamplesTest / test test \u00b6 fun test (): Unit","title":"Test"},{"location":"port_http_server/com.hexagonkt.http.server/-port-http-server-samples-test/test/#test","text":"fun test (): Unit","title":"test"},{"location":"port_http_server/com.hexagonkt.http.server/-request/","text":"com.hexagonkt.http.server / Request Request \u00b6 abstract class Request Lists would be initialized loading all elements when they are used (set it as lazy in implementations) this will have a performance penalty in favor of ease of use. The alternative would be using a 'Map/List wrapper that delegates calls to abstract methods in the interface (I won't do this just now). HTTP request context. It holds client supplied data and methods to change the response. Constructors \u00b6 Name Summary <init> Request () Lists would be initialized loading all elements when they are used (set it as lazy in implementations) this will have a performance penalty in favor of ease of use. The alternative would be using a 'Map/List wrapper that delegates calls to abstract methods in the interface (I won't do this just now). Properties \u00b6 Name Summary accept val accept: List < String > body val body: String contentLength val contentLength: Long contentType val contentType: String ? cookies val cookies: Map < String , HttpCookie > formParameters val formParameters: Map < String , List < String >> headers val headers: Map < String , List < String >> host val host: String ip val ip: String method val method: Method origin val origin: String ? parameters val parameters: Map < String , List < String >> parts val parts: Map < String , Part > path val path: String pathParameters val pathParameters: RequiredKeysMap < String , String > port val port: Int preferredType val preferredType: String ? queryParameters val queryParameters: Map < String , List < String >> queryString val queryString: String referer val referer: String ? scheme val scheme: String secure val secure: Boolean url val url: String userAgent val userAgent: String ? Functions \u00b6 Name Summary body fun < T : Any > body ( type : KClass < T > ): T fun < T : Any > body (): T bodyObjects fun < T : Any > bodyObjects ( type : KClass < T > ): List < T > fun < T : Any > bodyObjects (): List < T > contentLength abstract fun contentLength (): Long contentType abstract fun contentType (): String ? cookies abstract fun cookies (): Map < String , HttpCookie > formParameters abstract fun formParameters (): Map < String , List < String >> headers abstract fun headers (): Map < String , List < String >> host abstract fun host (): String ip abstract fun ip (): String loadBody abstract fun loadBody (): String method abstract fun method (): Method parameters abstract fun parameters (): Map < String , List < String >> parts abstract fun parts (): Map < String , Part > path abstract fun path (): String pathParameters abstract fun pathParameters (): Map < String , String > port abstract fun port (): Int queryParameters abstract fun queryParameters (): Map < String , List < String >> queryString abstract fun queryString (): String scheme abstract fun scheme (): String url abstract fun url (): String","title":"Home"},{"location":"port_http_server/com.hexagonkt.http.server/-request/#request","text":"abstract class Request Lists would be initialized loading all elements when they are used (set it as lazy in implementations) this will have a performance penalty in favor of ease of use. The alternative would be using a 'Map/List wrapper that delegates calls to abstract methods in the interface (I won't do this just now). HTTP request context. It holds client supplied data and methods to change the response.","title":"Request"},{"location":"port_http_server/com.hexagonkt.http.server/-request/#constructors","text":"Name Summary <init> Request () Lists would be initialized loading all elements when they are used (set it as lazy in implementations) this will have a performance penalty in favor of ease of use. The alternative would be using a 'Map/List wrapper that delegates calls to abstract methods in the interface (I won't do this just now).","title":"Constructors"},{"location":"port_http_server/com.hexagonkt.http.server/-request/#properties","text":"Name Summary accept val accept: List < String > body val body: String contentLength val contentLength: Long contentType val contentType: String ? cookies val cookies: Map < String , HttpCookie > formParameters val formParameters: Map < String , List < String >> headers val headers: Map < String , List < String >> host val host: String ip val ip: String method val method: Method origin val origin: String ? parameters val parameters: Map < String , List < String >> parts val parts: Map < String , Part > path val path: String pathParameters val pathParameters: RequiredKeysMap < String , String > port val port: Int preferredType val preferredType: String ? queryParameters val queryParameters: Map < String , List < String >> queryString val queryString: String referer val referer: String ? scheme val scheme: String secure val secure: Boolean url val url: String userAgent val userAgent: String ?","title":"Properties"},{"location":"port_http_server/com.hexagonkt.http.server/-request/#functions","text":"Name Summary body fun < T : Any > body ( type : KClass < T > ): T fun < T : Any > body (): T bodyObjects fun < T : Any > bodyObjects ( type : KClass < T > ): List < T > fun < T : Any > bodyObjects (): List < T > contentLength abstract fun contentLength (): Long contentType abstract fun contentType (): String ? cookies abstract fun cookies (): Map < String , HttpCookie > formParameters abstract fun formParameters (): Map < String , List < String >> headers abstract fun headers (): Map < String , List < String >> host abstract fun host (): String ip abstract fun ip (): String loadBody abstract fun loadBody (): String method abstract fun method (): Method parameters abstract fun parameters (): Map < String , List < String >> parts abstract fun parts (): Map < String , Part > path abstract fun path (): String pathParameters abstract fun pathParameters (): Map < String , String > port abstract fun port (): Int queryParameters abstract fun queryParameters (): Map < String , List < String >> queryString abstract fun queryString (): String scheme abstract fun scheme (): String url abstract fun url (): String","title":"Functions"},{"location":"port_http_server/com.hexagonkt.http.server/-request/-init-/","text":"com.hexagonkt.http.server / Request / <init> <init> \u00b6 Request () Lists would be initialized loading all elements when they are used (set it as lazy in implementations) this will have a performance penalty in favor of ease of use. The alternative would be using a 'Map/List wrapper that delegates calls to abstract methods in the interface (I won't do this just now). HTTP request context. It holds client supplied data and methods to change the response.","title":" init "},{"location":"port_http_server/com.hexagonkt.http.server/-request/-init-/#init","text":"Request () Lists would be initialized loading all elements when they are used (set it as lazy in implementations) this will have a performance penalty in favor of ease of use. The alternative would be using a 'Map/List wrapper that delegates calls to abstract methods in the interface (I won't do this just now). HTTP request context. It holds client supplied data and methods to change the response.","title":"&lt;init&gt;"},{"location":"port_http_server/com.hexagonkt.http.server/-request/accept/","text":"com.hexagonkt.http.server / Request / accept accept \u00b6 val accept: List < String >","title":"Accept"},{"location":"port_http_server/com.hexagonkt.http.server/-request/accept/#accept","text":"val accept: List < String >","title":"accept"},{"location":"port_http_server/com.hexagonkt.http.server/-request/body-objects/","text":"com.hexagonkt.http.server / Request / bodyObjects bodyObjects \u00b6 fun < T : Any > bodyObjects ( type : KClass < T > ): List < T > inline fun < reified T : Any > bodyObjects (): List < T >","title":"Body objects"},{"location":"port_http_server/com.hexagonkt.http.server/-request/body-objects/#bodyobjects","text":"fun < T : Any > bodyObjects ( type : KClass < T > ): List < T > inline fun < reified T : Any > bodyObjects (): List < T >","title":"bodyObjects"},{"location":"port_http_server/com.hexagonkt.http.server/-request/body/","text":"com.hexagonkt.http.server / Request / body body \u00b6 val body: String fun < T : Any > body ( type : KClass < T > ): T inline fun < reified T : Any > body (): T","title":"Body"},{"location":"port_http_server/com.hexagonkt.http.server/-request/body/#body","text":"val body: String fun < T : Any > body ( type : KClass < T > ): T inline fun < reified T : Any > body (): T","title":"body"},{"location":"port_http_server/com.hexagonkt.http.server/-request/content-length/","text":"com.hexagonkt.http.server / Request / contentLength contentLength \u00b6 val contentLength: Long protected abstract fun contentLength (): Long","title":"Content length"},{"location":"port_http_server/com.hexagonkt.http.server/-request/content-length/#contentlength","text":"val contentLength: Long protected abstract fun contentLength (): Long","title":"contentLength"},{"location":"port_http_server/com.hexagonkt.http.server/-request/content-type/","text":"com.hexagonkt.http.server / Request / contentType contentType \u00b6 val contentType: String ? protected abstract fun contentType (): String ?","title":"Content type"},{"location":"port_http_server/com.hexagonkt.http.server/-request/content-type/#contenttype","text":"val contentType: String ? protected abstract fun contentType (): String ?","title":"contentType"},{"location":"port_http_server/com.hexagonkt.http.server/-request/cookies/","text":"com.hexagonkt.http.server / Request / cookies cookies \u00b6 val cookies: Map < String , HttpCookie > protected abstract fun cookies (): Map < String , HttpCookie >","title":"Cookies"},{"location":"port_http_server/com.hexagonkt.http.server/-request/cookies/#cookies","text":"val cookies: Map < String , HttpCookie > protected abstract fun cookies (): Map < String , HttpCookie >","title":"cookies"},{"location":"port_http_server/com.hexagonkt.http.server/-request/form-parameters/","text":"com.hexagonkt.http.server / Request / formParameters formParameters \u00b6 val formParameters: Map < String , List < String >> protected abstract fun formParameters (): Map < String , List < String >>","title":"Form parameters"},{"location":"port_http_server/com.hexagonkt.http.server/-request/form-parameters/#formparameters","text":"val formParameters: Map < String , List < String >> protected abstract fun formParameters (): Map < String , List < String >>","title":"formParameters"},{"location":"port_http_server/com.hexagonkt.http.server/-request/headers/","text":"com.hexagonkt.http.server / Request / headers headers \u00b6 val headers: Map < String , List < String >> protected abstract fun headers (): Map < String , List < String >>","title":"Headers"},{"location":"port_http_server/com.hexagonkt.http.server/-request/headers/#headers","text":"val headers: Map < String , List < String >> protected abstract fun headers (): Map < String , List < String >>","title":"headers"},{"location":"port_http_server/com.hexagonkt.http.server/-request/host/","text":"com.hexagonkt.http.server / Request / host host \u00b6 val host: String protected abstract fun host (): String","title":"Host"},{"location":"port_http_server/com.hexagonkt.http.server/-request/host/#host","text":"val host: String protected abstract fun host (): String","title":"host"},{"location":"port_http_server/com.hexagonkt.http.server/-request/ip/","text":"com.hexagonkt.http.server / Request / ip ip \u00b6 val ip: String protected abstract fun ip (): String","title":"Ip"},{"location":"port_http_server/com.hexagonkt.http.server/-request/ip/#ip","text":"val ip: String protected abstract fun ip (): String","title":"ip"},{"location":"port_http_server/com.hexagonkt.http.server/-request/load-body/","text":"com.hexagonkt.http.server / Request / loadBody loadBody \u00b6 protected abstract fun loadBody (): String","title":"Load body"},{"location":"port_http_server/com.hexagonkt.http.server/-request/load-body/#loadbody","text":"protected abstract fun loadBody (): String","title":"loadBody"},{"location":"port_http_server/com.hexagonkt.http.server/-request/method/","text":"com.hexagonkt.http.server / Request / method method \u00b6 val method: Method protected abstract fun method (): Method","title":"Method"},{"location":"port_http_server/com.hexagonkt.http.server/-request/method/#method","text":"val method: Method protected abstract fun method (): Method","title":"method"},{"location":"port_http_server/com.hexagonkt.http.server/-request/origin/","text":"com.hexagonkt.http.server / Request / origin origin \u00b6 val origin: String ?","title":"Origin"},{"location":"port_http_server/com.hexagonkt.http.server/-request/origin/#origin","text":"val origin: String ?","title":"origin"},{"location":"port_http_server/com.hexagonkt.http.server/-request/parameters/","text":"com.hexagonkt.http.server / Request / parameters parameters \u00b6 val parameters: Map < String , List < String >> protected abstract fun parameters (): Map < String , List < String >>","title":"Parameters"},{"location":"port_http_server/com.hexagonkt.http.server/-request/parameters/#parameters","text":"val parameters: Map < String , List < String >> protected abstract fun parameters (): Map < String , List < String >>","title":"parameters"},{"location":"port_http_server/com.hexagonkt.http.server/-request/parts/","text":"com.hexagonkt.http.server / Request / parts parts \u00b6 val parts: Map < String , Part > protected abstract fun parts (): Map < String , Part >","title":"Parts"},{"location":"port_http_server/com.hexagonkt.http.server/-request/parts/#parts","text":"val parts: Map < String , Part > protected abstract fun parts (): Map < String , Part >","title":"parts"},{"location":"port_http_server/com.hexagonkt.http.server/-request/path-parameters/","text":"com.hexagonkt.http.server / Request / pathParameters pathParameters \u00b6 val pathParameters: RequiredKeysMap < String , String > protected abstract fun pathParameters (): Map < String , String >","title":"Path parameters"},{"location":"port_http_server/com.hexagonkt.http.server/-request/path-parameters/#pathparameters","text":"val pathParameters: RequiredKeysMap < String , String > protected abstract fun pathParameters (): Map < String , String >","title":"pathParameters"},{"location":"port_http_server/com.hexagonkt.http.server/-request/path/","text":"com.hexagonkt.http.server / Request / path path \u00b6 val path: String protected abstract fun path (): String","title":"Path"},{"location":"port_http_server/com.hexagonkt.http.server/-request/path/#path","text":"val path: String protected abstract fun path (): String","title":"path"},{"location":"port_http_server/com.hexagonkt.http.server/-request/port/","text":"com.hexagonkt.http.server / Request / port port \u00b6 val port: Int protected abstract fun port (): Int","title":"Port"},{"location":"port_http_server/com.hexagonkt.http.server/-request/port/#port","text":"val port: Int protected abstract fun port (): Int","title":"port"},{"location":"port_http_server/com.hexagonkt.http.server/-request/preferred-type/","text":"com.hexagonkt.http.server / Request / preferredType preferredType \u00b6 val preferredType: String ?","title":"Preferred type"},{"location":"port_http_server/com.hexagonkt.http.server/-request/preferred-type/#preferredtype","text":"val preferredType: String ?","title":"preferredType"},{"location":"port_http_server/com.hexagonkt.http.server/-request/query-parameters/","text":"com.hexagonkt.http.server / Request / queryParameters queryParameters \u00b6 val queryParameters: Map < String , List < String >> protected abstract fun queryParameters (): Map < String , List < String >>","title":"Query parameters"},{"location":"port_http_server/com.hexagonkt.http.server/-request/query-parameters/#queryparameters","text":"val queryParameters: Map < String , List < String >> protected abstract fun queryParameters (): Map < String , List < String >>","title":"queryParameters"},{"location":"port_http_server/com.hexagonkt.http.server/-request/query-string/","text":"com.hexagonkt.http.server / Request / queryString queryString \u00b6 val queryString: String protected abstract fun queryString (): String","title":"Query string"},{"location":"port_http_server/com.hexagonkt.http.server/-request/query-string/#querystring","text":"val queryString: String protected abstract fun queryString (): String","title":"queryString"},{"location":"port_http_server/com.hexagonkt.http.server/-request/referer/","text":"com.hexagonkt.http.server / Request / referer referer \u00b6 val referer: String ?","title":"Referer"},{"location":"port_http_server/com.hexagonkt.http.server/-request/referer/#referer","text":"val referer: String ?","title":"referer"},{"location":"port_http_server/com.hexagonkt.http.server/-request/scheme/","text":"com.hexagonkt.http.server / Request / scheme scheme \u00b6 val scheme: String protected abstract fun scheme (): String","title":"Scheme"},{"location":"port_http_server/com.hexagonkt.http.server/-request/scheme/#scheme","text":"val scheme: String protected abstract fun scheme (): String","title":"scheme"},{"location":"port_http_server/com.hexagonkt.http.server/-request/secure/","text":"com.hexagonkt.http.server / Request / secure secure \u00b6 val secure: Boolean","title":"Secure"},{"location":"port_http_server/com.hexagonkt.http.server/-request/secure/#secure","text":"val secure: Boolean","title":"secure"},{"location":"port_http_server/com.hexagonkt.http.server/-request/url/","text":"com.hexagonkt.http.server / Request / url url \u00b6 val url: String protected abstract fun url (): String","title":"Url"},{"location":"port_http_server/com.hexagonkt.http.server/-request/url/#url","text":"val url: String protected abstract fun url (): String","title":"url"},{"location":"port_http_server/com.hexagonkt.http.server/-request/user-agent/","text":"com.hexagonkt.http.server / Request / userAgent userAgent \u00b6 val userAgent: String ?","title":"User agent"},{"location":"port_http_server/com.hexagonkt.http.server/-request/user-agent/#useragent","text":"val userAgent: String ?","title":"userAgent"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/","text":"com.hexagonkt.http.server / RequestHandler RequestHandler \u00b6 sealed class RequestHandler Types \u00b6 Name Summary CodeHandler data class CodeHandler : RequestHandler ExceptionHandler data class ExceptionHandler : RequestHandler FileHandler data class FileHandler : RequestHandler FilterHandler data class FilterHandler : RequestHandler PathHandler data class PathHandler : RequestHandler ResourceHandler data class ResourceHandler : RequestHandler RouteHandler data class RouteHandler : RequestHandler Properties \u00b6 Name Summary route abstract val route: Route Inheritors \u00b6 Name Summary CodeHandler data class CodeHandler : RequestHandler ExceptionHandler data class ExceptionHandler : RequestHandler FileHandler data class FileHandler : RequestHandler FilterHandler data class FilterHandler : RequestHandler PathHandler data class PathHandler : RequestHandler ResourceHandler data class ResourceHandler : RequestHandler RouteHandler data class RouteHandler : RequestHandler","title":"Home"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/#requesthandler","text":"sealed class RequestHandler","title":"RequestHandler"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/#types","text":"Name Summary CodeHandler data class CodeHandler : RequestHandler ExceptionHandler data class ExceptionHandler : RequestHandler FileHandler data class FileHandler : RequestHandler FilterHandler data class FilterHandler : RequestHandler PathHandler data class PathHandler : RequestHandler ResourceHandler data class ResourceHandler : RequestHandler RouteHandler data class RouteHandler : RequestHandler","title":"Types"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/#properties","text":"Name Summary route abstract val route: Route","title":"Properties"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/#inheritors","text":"Name Summary CodeHandler data class CodeHandler : RequestHandler ExceptionHandler data class ExceptionHandler : RequestHandler FileHandler data class FileHandler : RequestHandler FilterHandler data class FilterHandler : RequestHandler PathHandler data class PathHandler : RequestHandler ResourceHandler data class ResourceHandler : RequestHandler RouteHandler data class RouteHandler : RequestHandler","title":"Inheritors"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/route/","text":"com.hexagonkt.http.server / RequestHandler / route route \u00b6 abstract val route: Route","title":"Route"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/route/#route","text":"abstract val route: Route","title":"route"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-code-handler/","text":"com.hexagonkt.http.server / RequestHandler / CodeHandler CodeHandler \u00b6 data class CodeHandler : RequestHandler Constructors \u00b6 Name Summary <init> CodeHandler ( route : Route , code : Int , callback : ErrorCodeCallback ) Properties \u00b6 Name Summary callback val callback: ErrorCodeCallback code val code: Int route val route: Route","title":"Home"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-code-handler/#codehandler","text":"data class CodeHandler : RequestHandler","title":"CodeHandler"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-code-handler/#constructors","text":"Name Summary <init> CodeHandler ( route : Route , code : Int , callback : ErrorCodeCallback )","title":"Constructors"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-code-handler/#properties","text":"Name Summary callback val callback: ErrorCodeCallback code val code: Int route val route: Route","title":"Properties"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-code-handler/-init-/","text":"com.hexagonkt.http.server / RequestHandler / CodeHandler / <init> <init> \u00b6 CodeHandler ( route : Route , code : Int , callback : ErrorCodeCallback )","title":" init "},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-code-handler/-init-/#init","text":"CodeHandler ( route : Route , code : Int , callback : ErrorCodeCallback )","title":"&lt;init&gt;"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-code-handler/callback/","text":"com.hexagonkt.http.server / RequestHandler / CodeHandler / callback callback \u00b6 val callback: ErrorCodeCallback","title":"Callback"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-code-handler/callback/#callback","text":"val callback: ErrorCodeCallback","title":"callback"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-code-handler/code/","text":"com.hexagonkt.http.server / RequestHandler / CodeHandler / code code \u00b6 val code: Int","title":"Code"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-code-handler/code/#code","text":"val code: Int","title":"code"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-code-handler/route/","text":"com.hexagonkt.http.server / RequestHandler / CodeHandler / route route \u00b6 val route: Route Overrides RequestHandler.route","title":"Route"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-code-handler/route/#route","text":"val route: Route Overrides RequestHandler.route","title":"route"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-exception-handler/","text":"com.hexagonkt.http.server / RequestHandler / ExceptionHandler ExceptionHandler \u00b6 data class ExceptionHandler : RequestHandler Constructors \u00b6 Name Summary <init> ExceptionHandler ( route : Route , exception : Class < Exception > , callback : ExceptionCallback ) Properties \u00b6 Name Summary callback val callback: ExceptionCallback exception val exception: Class < Exception > route val route: Route","title":"Home"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-exception-handler/#exceptionhandler","text":"data class ExceptionHandler : RequestHandler","title":"ExceptionHandler"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-exception-handler/#constructors","text":"Name Summary <init> ExceptionHandler ( route : Route , exception : Class < Exception > , callback : ExceptionCallback )","title":"Constructors"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-exception-handler/#properties","text":"Name Summary callback val callback: ExceptionCallback exception val exception: Class < Exception > route val route: Route","title":"Properties"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-exception-handler/-init-/","text":"com.hexagonkt.http.server / RequestHandler / ExceptionHandler / <init> <init> \u00b6 ExceptionHandler ( route : Route , exception : Class < Exception > , callback : ExceptionCallback )","title":" init "},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-exception-handler/-init-/#init","text":"ExceptionHandler ( route : Route , exception : Class < Exception > , callback : ExceptionCallback )","title":"&lt;init&gt;"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-exception-handler/callback/","text":"com.hexagonkt.http.server / RequestHandler / ExceptionHandler / callback callback \u00b6 val callback: ExceptionCallback","title":"Callback"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-exception-handler/callback/#callback","text":"val callback: ExceptionCallback","title":"callback"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-exception-handler/exception/","text":"com.hexagonkt.http.server / RequestHandler / ExceptionHandler / exception exception \u00b6 val exception: Class < Exception >","title":"Exception"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-exception-handler/exception/#exception","text":"val exception: Class < Exception >","title":"exception"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-exception-handler/route/","text":"com.hexagonkt.http.server / RequestHandler / ExceptionHandler / route route \u00b6 val route: Route Overrides RequestHandler.route","title":"Route"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-exception-handler/route/#route","text":"val route: Route Overrides RequestHandler.route","title":"route"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-file-handler/","text":"com.hexagonkt.http.server / RequestHandler / FileHandler FileHandler \u00b6 data class FileHandler : RequestHandler Constructors \u00b6 Name Summary <init> FileHandler ( route : Route , file : File ) Properties \u00b6 Name Summary file val file: File route val route: Route","title":"Home"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-file-handler/#filehandler","text":"data class FileHandler : RequestHandler","title":"FileHandler"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-file-handler/#constructors","text":"Name Summary <init> FileHandler ( route : Route , file : File )","title":"Constructors"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-file-handler/#properties","text":"Name Summary file val file: File route val route: Route","title":"Properties"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-file-handler/-init-/","text":"com.hexagonkt.http.server / RequestHandler / FileHandler / <init> <init> \u00b6 FileHandler ( route : Route , file : File )","title":" init "},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-file-handler/-init-/#init","text":"FileHandler ( route : Route , file : File )","title":"&lt;init&gt;"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-file-handler/file/","text":"com.hexagonkt.http.server / RequestHandler / FileHandler / file file \u00b6 val file: File","title":"File"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-file-handler/file/#file","text":"val file: File","title":"file"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-file-handler/route/","text":"com.hexagonkt.http.server / RequestHandler / FileHandler / route route \u00b6 val route: Route Overrides RequestHandler.route","title":"Route"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-file-handler/route/#route","text":"val route: Route Overrides RequestHandler.route","title":"route"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-filter-handler/","text":"com.hexagonkt.http.server / RequestHandler / FilterHandler FilterHandler \u00b6 data class FilterHandler : RequestHandler Constructors \u00b6 Name Summary <init> FilterHandler ( route : Route , order : FilterOrder , callback : RouteCallback ) Properties \u00b6 Name Summary callback val callback: RouteCallback order val order: FilterOrder route val route: Route","title":"Home"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-filter-handler/#filterhandler","text":"data class FilterHandler : RequestHandler","title":"FilterHandler"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-filter-handler/#constructors","text":"Name Summary <init> FilterHandler ( route : Route , order : FilterOrder , callback : RouteCallback )","title":"Constructors"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-filter-handler/#properties","text":"Name Summary callback val callback: RouteCallback order val order: FilterOrder route val route: Route","title":"Properties"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-filter-handler/-init-/","text":"com.hexagonkt.http.server / RequestHandler / FilterHandler / <init> <init> \u00b6 FilterHandler ( route : Route , order : FilterOrder , callback : RouteCallback )","title":" init "},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-filter-handler/-init-/#init","text":"FilterHandler ( route : Route , order : FilterOrder , callback : RouteCallback )","title":"&lt;init&gt;"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-filter-handler/callback/","text":"com.hexagonkt.http.server / RequestHandler / FilterHandler / callback callback \u00b6 val callback: RouteCallback","title":"Callback"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-filter-handler/callback/#callback","text":"val callback: RouteCallback","title":"callback"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-filter-handler/order/","text":"com.hexagonkt.http.server / RequestHandler / FilterHandler / order order \u00b6 val order: FilterOrder","title":"Order"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-filter-handler/order/#order","text":"val order: FilterOrder","title":"order"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-filter-handler/route/","text":"com.hexagonkt.http.server / RequestHandler / FilterHandler / route route \u00b6 val route: Route Overrides RequestHandler.route","title":"Route"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-filter-handler/route/#route","text":"val route: Route Overrides RequestHandler.route","title":"route"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-path-handler/","text":"com.hexagonkt.http.server / RequestHandler / PathHandler PathHandler \u00b6 data class PathHandler : RequestHandler Constructors \u00b6 Name Summary <init> PathHandler ( route : Route , router : Router ) Properties \u00b6 Name Summary route val route: Route router val router: Router","title":"Home"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-path-handler/#pathhandler","text":"data class PathHandler : RequestHandler","title":"PathHandler"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-path-handler/#constructors","text":"Name Summary <init> PathHandler ( route : Route , router : Router )","title":"Constructors"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-path-handler/#properties","text":"Name Summary route val route: Route router val router: Router","title":"Properties"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-path-handler/-init-/","text":"com.hexagonkt.http.server / RequestHandler / PathHandler / <init> <init> \u00b6 PathHandler ( route : Route , router : Router )","title":" init "},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-path-handler/-init-/#init","text":"PathHandler ( route : Route , router : Router )","title":"&lt;init&gt;"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-path-handler/route/","text":"com.hexagonkt.http.server / RequestHandler / PathHandler / route route \u00b6 val route: Route Overrides RequestHandler.route","title":"Route"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-path-handler/route/#route","text":"val route: Route Overrides RequestHandler.route","title":"route"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-path-handler/router/","text":"com.hexagonkt.http.server / RequestHandler / PathHandler / router router \u00b6 val router: Router","title":"Router"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-path-handler/router/#router","text":"val router: Router","title":"router"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-resource-handler/","text":"com.hexagonkt.http.server / RequestHandler / ResourceHandler ResourceHandler \u00b6 data class ResourceHandler : RequestHandler Constructors \u00b6 Name Summary <init> ResourceHandler ( route : Route , resource : Resource ) Properties \u00b6 Name Summary resource val resource: Resource route val route: Route","title":"Home"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-resource-handler/#resourcehandler","text":"data class ResourceHandler : RequestHandler","title":"ResourceHandler"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-resource-handler/#constructors","text":"Name Summary <init> ResourceHandler ( route : Route , resource : Resource )","title":"Constructors"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-resource-handler/#properties","text":"Name Summary resource val resource: Resource route val route: Route","title":"Properties"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-resource-handler/-init-/","text":"com.hexagonkt.http.server / RequestHandler / ResourceHandler / <init> <init> \u00b6 ResourceHandler ( route : Route , resource : Resource )","title":" init "},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-resource-handler/-init-/#init","text":"ResourceHandler ( route : Route , resource : Resource )","title":"&lt;init&gt;"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-resource-handler/resource/","text":"com.hexagonkt.http.server / RequestHandler / ResourceHandler / resource resource \u00b6 val resource: Resource","title":"Resource"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-resource-handler/resource/#resource","text":"val resource: Resource","title":"resource"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-resource-handler/route/","text":"com.hexagonkt.http.server / RequestHandler / ResourceHandler / route route \u00b6 val route: Route Overrides RequestHandler.route","title":"Route"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-resource-handler/route/#route","text":"val route: Route Overrides RequestHandler.route","title":"route"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-route-handler/","text":"com.hexagonkt.http.server / RequestHandler / RouteHandler RouteHandler \u00b6 data class RouteHandler : RequestHandler Constructors \u00b6 Name Summary <init> RouteHandler ( route : Route , callback : RouteCallback ) Properties \u00b6 Name Summary callback val callback: RouteCallback route val route: Route","title":"Home"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-route-handler/#routehandler","text":"data class RouteHandler : RequestHandler","title":"RouteHandler"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-route-handler/#constructors","text":"Name Summary <init> RouteHandler ( route : Route , callback : RouteCallback )","title":"Constructors"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-route-handler/#properties","text":"Name Summary callback val callback: RouteCallback route val route: Route","title":"Properties"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-route-handler/-init-/","text":"com.hexagonkt.http.server / RequestHandler / RouteHandler / <init> <init> \u00b6 RouteHandler ( route : Route , callback : RouteCallback )","title":" init "},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-route-handler/-init-/#init","text":"RouteHandler ( route : Route , callback : RouteCallback )","title":"&lt;init&gt;"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-route-handler/callback/","text":"com.hexagonkt.http.server / RequestHandler / RouteHandler / callback callback \u00b6 val callback: RouteCallback","title":"Callback"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-route-handler/callback/#callback","text":"val callback: RouteCallback","title":"callback"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-route-handler/route/","text":"com.hexagonkt.http.server / RequestHandler / RouteHandler / route route \u00b6 val route: Route Overrides RequestHandler.route","title":"Route"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-route-handler/route/#route","text":"val route: Route Overrides RequestHandler.route","title":"route"},{"location":"port_http_server/com.hexagonkt.http.server/-response/","text":"com.hexagonkt.http.server / Response Response \u00b6 abstract class Response Check 'Request' comment. And also note that lists should be updated by engines after callback is processed, this data is like a buffer that needs to be dumped to the real response. HTTP response context. Constructors \u00b6 Name Summary <init> Response () Check 'Request' comment. And also note that lists should be updated by engines after callback is processed, this data is like a buffer that needs to be dumped to the real response. Properties \u00b6 Name Summary body var body : Any contentType var contentType : String ? headers val headers: MutableMap < String , List < Any >> outputStream val outputStream: OutputStream status var status : Int Functions \u00b6 Name Summary addCookie abstract fun addCookie ( cookie : HttpCookie ): Unit body abstract fun body (): Any abstract fun body ( value : Any ): Unit contentType abstract fun contentType (): String ? abstract fun contentType ( value : String ? ): Unit outputStream abstract fun outputStream (): OutputStream redirect abstract fun redirect ( url : String ): Unit removeCookie abstract fun removeCookie ( name : String ): Unit setHeader fun setHeader ( name : String , value : Any ? ): Unit status abstract fun status (): Int abstract fun status ( value : Int ): Unit","title":"Home"},{"location":"port_http_server/com.hexagonkt.http.server/-response/#response","text":"abstract class Response Check 'Request' comment. And also note that lists should be updated by engines after callback is processed, this data is like a buffer that needs to be dumped to the real response. HTTP response context.","title":"Response"},{"location":"port_http_server/com.hexagonkt.http.server/-response/#constructors","text":"Name Summary <init> Response () Check 'Request' comment. And also note that lists should be updated by engines after callback is processed, this data is like a buffer that needs to be dumped to the real response.","title":"Constructors"},{"location":"port_http_server/com.hexagonkt.http.server/-response/#properties","text":"Name Summary body var body : Any contentType var contentType : String ? headers val headers: MutableMap < String , List < Any >> outputStream val outputStream: OutputStream status var status : Int","title":"Properties"},{"location":"port_http_server/com.hexagonkt.http.server/-response/#functions","text":"Name Summary addCookie abstract fun addCookie ( cookie : HttpCookie ): Unit body abstract fun body (): Any abstract fun body ( value : Any ): Unit contentType abstract fun contentType (): String ? abstract fun contentType ( value : String ? ): Unit outputStream abstract fun outputStream (): OutputStream redirect abstract fun redirect ( url : String ): Unit removeCookie abstract fun removeCookie ( name : String ): Unit setHeader fun setHeader ( name : String , value : Any ? ): Unit status abstract fun status (): Int abstract fun status ( value : Int ): Unit","title":"Functions"},{"location":"port_http_server/com.hexagonkt.http.server/-response/-init-/","text":"com.hexagonkt.http.server / Response / <init> <init> \u00b6 Response () Check 'Request' comment. And also note that lists should be updated by engines after callback is processed, this data is like a buffer that needs to be dumped to the real response. HTTP response context.","title":" init "},{"location":"port_http_server/com.hexagonkt.http.server/-response/-init-/#init","text":"Response () Check 'Request' comment. And also note that lists should be updated by engines after callback is processed, this data is like a buffer that needs to be dumped to the real response. HTTP response context.","title":"&lt;init&gt;"},{"location":"port_http_server/com.hexagonkt.http.server/-response/add-cookie/","text":"com.hexagonkt.http.server / Response / addCookie addCookie \u00b6 abstract fun addCookie ( cookie : HttpCookie ): Unit","title":"Add cookie"},{"location":"port_http_server/com.hexagonkt.http.server/-response/add-cookie/#addcookie","text":"abstract fun addCookie ( cookie : HttpCookie ): Unit","title":"addCookie"},{"location":"port_http_server/com.hexagonkt.http.server/-response/body/","text":"com.hexagonkt.http.server / Response / body body \u00b6 var body : Any protected abstract fun body (): Any protected abstract fun body ( value : Any ): Unit","title":"Body"},{"location":"port_http_server/com.hexagonkt.http.server/-response/body/#body","text":"var body : Any protected abstract fun body (): Any protected abstract fun body ( value : Any ): Unit","title":"body"},{"location":"port_http_server/com.hexagonkt.http.server/-response/content-type/","text":"com.hexagonkt.http.server / Response / contentType contentType \u00b6 var contentType : String ? protected abstract fun contentType (): String ? protected abstract fun contentType ( value : String ? ): Unit","title":"Content type"},{"location":"port_http_server/com.hexagonkt.http.server/-response/content-type/#contenttype","text":"var contentType : String ? protected abstract fun contentType (): String ? protected abstract fun contentType ( value : String ? ): Unit","title":"contentType"},{"location":"port_http_server/com.hexagonkt.http.server/-response/headers/","text":"com.hexagonkt.http.server / Response / headers headers \u00b6 val headers: MutableMap < String , List < Any >>","title":"Headers"},{"location":"port_http_server/com.hexagonkt.http.server/-response/headers/#headers","text":"val headers: MutableMap < String , List < Any >>","title":"headers"},{"location":"port_http_server/com.hexagonkt.http.server/-response/output-stream/","text":"com.hexagonkt.http.server / Response / outputStream outputStream \u00b6 val outputStream: OutputStream protected abstract fun outputStream (): OutputStream","title":"Output stream"},{"location":"port_http_server/com.hexagonkt.http.server/-response/output-stream/#outputstream","text":"val outputStream: OutputStream protected abstract fun outputStream (): OutputStream","title":"outputStream"},{"location":"port_http_server/com.hexagonkt.http.server/-response/redirect/","text":"com.hexagonkt.http.server / Response / redirect redirect \u00b6 abstract fun redirect ( url : String ): Unit","title":"Redirect"},{"location":"port_http_server/com.hexagonkt.http.server/-response/redirect/#redirect","text":"abstract fun redirect ( url : String ): Unit","title":"redirect"},{"location":"port_http_server/com.hexagonkt.http.server/-response/remove-cookie/","text":"com.hexagonkt.http.server / Response / removeCookie removeCookie \u00b6 abstract fun removeCookie ( name : String ): Unit","title":"Remove cookie"},{"location":"port_http_server/com.hexagonkt.http.server/-response/remove-cookie/#removecookie","text":"abstract fun removeCookie ( name : String ): Unit","title":"removeCookie"},{"location":"port_http_server/com.hexagonkt.http.server/-response/set-header/","text":"com.hexagonkt.http.server / Response / setHeader setHeader \u00b6 fun setHeader ( name : String , value : Any ? ): Unit","title":"Set header"},{"location":"port_http_server/com.hexagonkt.http.server/-response/set-header/#setheader","text":"fun setHeader ( name : String , value : Any ? ): Unit","title":"setHeader"},{"location":"port_http_server/com.hexagonkt.http.server/-response/status/","text":"com.hexagonkt.http.server / Response / status status \u00b6 var status : Int protected abstract fun status (): Int protected abstract fun status ( value : Int ): Unit","title":"Status"},{"location":"port_http_server/com.hexagonkt.http.server/-response/status/#status","text":"var status : Int protected abstract fun status (): Int protected abstract fun status ( value : Int ): Unit","title":"status"},{"location":"port_http_server/com.hexagonkt.http.server/-router/","text":"com.hexagonkt.http.server / Router Router \u00b6 class Router TODO Document. TODO Index routes (ie: GET /foo) TODO Map with routes to all handlers needed Creates and initializes a Router based on a code block. Parameters \u00b6 block - Router's setup block. Return A new router initialized by the passed block. Constructors \u00b6 Name Summary <init> Router ( block : Router .() -> Unit = {} ) TODO Document. TODO Index routes (ie: GET /foo) TODO Map with routes to all handlers needed Creates and initializes a Router based on a code block. Properties \u00b6 Name Summary requestHandlers var requestHandlers : List < RequestHandler > Functions \u00b6 Name Summary after fun after ( path : String = \"*\" , block : RouteCallback ): Unit any fun any ( path : String = \"/\" , block : RouteCallback ): Unit before fun before ( path : String = \"*\" , block : RouteCallback ): Unit delete fun delete ( path : String = \"/\" , block : RouteCallback ): Unit error fun error ( code : Int , block : ErrorCodeCallback ): Unit fun error ( exception : KClass < Exception > , block : ExceptionCallback ): Unit fun error ( exception : Class < Exception > , block : ExceptionCallback ): Unit flatRequestHandlers fun flatRequestHandlers ( h : List < RequestHandler > = requestHandlers ): List < RequestHandler > get fun get ( path : String = \"/\" , block : RouteCallback ): Unit fun get ( resource : Resource ): Unit fun get ( path : String , resource : Resource ): Unit fun get ( file : File ): Unit fun get ( path : String , file : File ): Unit head fun head ( path : String = \"/\" , block : RouteCallback ): Unit options fun options ( path : String = \"/\" , block : RouteCallback ): Unit patch fun patch ( path : String = \"/\" , block : RouteCallback ): Unit path fun path ( path : Path , router : Router ): Unit fun path ( handler : Router ): Unit fun path ( block : Router .() -> Unit ): Unit fun path ( path : String , router : Router ): Unit fun path ( path : String , block : Router .() -> Unit ): Unit post fun post ( path : String = \"/\" , block : RouteCallback ): Unit put fun put ( path : String = \"/\" , block : RouteCallback ): Unit trace fun trace ( path : String = \"/\" , block : RouteCallback ): Unit","title":"Home"},{"location":"port_http_server/com.hexagonkt.http.server/-router/#router","text":"class Router TODO Document. TODO Index routes (ie: GET /foo) TODO Map with routes to all handlers needed Creates and initializes a Router based on a code block.","title":"Router"},{"location":"port_http_server/com.hexagonkt.http.server/-router/#parameters","text":"block - Router's setup block. Return A new router initialized by the passed block.","title":"Parameters"},{"location":"port_http_server/com.hexagonkt.http.server/-router/#constructors","text":"Name Summary <init> Router ( block : Router .() -> Unit = {} ) TODO Document. TODO Index routes (ie: GET /foo) TODO Map with routes to all handlers needed Creates and initializes a Router based on a code block.","title":"Constructors"},{"location":"port_http_server/com.hexagonkt.http.server/-router/#properties","text":"Name Summary requestHandlers var requestHandlers : List < RequestHandler >","title":"Properties"},{"location":"port_http_server/com.hexagonkt.http.server/-router/#functions","text":"Name Summary after fun after ( path : String = \"*\" , block : RouteCallback ): Unit any fun any ( path : String = \"/\" , block : RouteCallback ): Unit before fun before ( path : String = \"*\" , block : RouteCallback ): Unit delete fun delete ( path : String = \"/\" , block : RouteCallback ): Unit error fun error ( code : Int , block : ErrorCodeCallback ): Unit fun error ( exception : KClass < Exception > , block : ExceptionCallback ): Unit fun error ( exception : Class < Exception > , block : ExceptionCallback ): Unit flatRequestHandlers fun flatRequestHandlers ( h : List < RequestHandler > = requestHandlers ): List < RequestHandler > get fun get ( path : String = \"/\" , block : RouteCallback ): Unit fun get ( resource : Resource ): Unit fun get ( path : String , resource : Resource ): Unit fun get ( file : File ): Unit fun get ( path : String , file : File ): Unit head fun head ( path : String = \"/\" , block : RouteCallback ): Unit options fun options ( path : String = \"/\" , block : RouteCallback ): Unit patch fun patch ( path : String = \"/\" , block : RouteCallback ): Unit path fun path ( path : Path , router : Router ): Unit fun path ( handler : Router ): Unit fun path ( block : Router .() -> Unit ): Unit fun path ( path : String , router : Router ): Unit fun path ( path : String , block : Router .() -> Unit ): Unit post fun post ( path : String = \"/\" , block : RouteCallback ): Unit put fun put ( path : String = \"/\" , block : RouteCallback ): Unit trace fun trace ( path : String = \"/\" , block : RouteCallback ): Unit","title":"Functions"},{"location":"port_http_server/com.hexagonkt.http.server/-router/-init-/","text":"com.hexagonkt.http.server / Router / <init> <init> \u00b6 Router ( block : Router .() -> Unit = {} ) TODO Document. TODO Index routes (ie: GET /foo) TODO Map with routes to all handlers needed Creates and initializes a Router based on a code block. Parameters \u00b6 block - Router's setup block. Return A new router initialized by the passed block.","title":" init "},{"location":"port_http_server/com.hexagonkt.http.server/-router/-init-/#init","text":"Router ( block : Router .() -> Unit = {} ) TODO Document. TODO Index routes (ie: GET /foo) TODO Map with routes to all handlers needed Creates and initializes a Router based on a code block.","title":"&lt;init&gt;"},{"location":"port_http_server/com.hexagonkt.http.server/-router/-init-/#parameters","text":"block - Router's setup block. Return A new router initialized by the passed block.","title":"Parameters"},{"location":"port_http_server/com.hexagonkt.http.server/-router/after/","text":"com.hexagonkt.http.server / Router / after after \u00b6 fun after ( path : String = \"*\" , block : RouteCallback ): Unit","title":"After"},{"location":"port_http_server/com.hexagonkt.http.server/-router/after/#after","text":"fun after ( path : String = \"*\" , block : RouteCallback ): Unit","title":"after"},{"location":"port_http_server/com.hexagonkt.http.server/-router/any/","text":"com.hexagonkt.http.server / Router / any any \u00b6 fun any ( path : String = \"/\" , block : RouteCallback ): Unit","title":"Any"},{"location":"port_http_server/com.hexagonkt.http.server/-router/any/#any","text":"fun any ( path : String = \"/\" , block : RouteCallback ): Unit","title":"any"},{"location":"port_http_server/com.hexagonkt.http.server/-router/before/","text":"com.hexagonkt.http.server / Router / before before \u00b6 fun before ( path : String = \"*\" , block : RouteCallback ): Unit","title":"Before"},{"location":"port_http_server/com.hexagonkt.http.server/-router/before/#before","text":"fun before ( path : String = \"*\" , block : RouteCallback ): Unit","title":"before"},{"location":"port_http_server/com.hexagonkt.http.server/-router/delete/","text":"com.hexagonkt.http.server / Router / delete delete \u00b6 fun delete ( path : String = \"/\" , block : RouteCallback ): Unit","title":"Delete"},{"location":"port_http_server/com.hexagonkt.http.server/-router/delete/#delete","text":"fun delete ( path : String = \"/\" , block : RouteCallback ): Unit","title":"delete"},{"location":"port_http_server/com.hexagonkt.http.server/-router/error/","text":"com.hexagonkt.http.server / Router / error error \u00b6 fun error ( code : Int , block : ErrorCodeCallback ): Unit fun error ( exception : KClass < Exception > , block : ExceptionCallback ): Unit fun error ( exception : Class < Exception > , block : ExceptionCallback ): Unit","title":"Error"},{"location":"port_http_server/com.hexagonkt.http.server/-router/error/#error","text":"fun error ( code : Int , block : ErrorCodeCallback ): Unit fun error ( exception : KClass < Exception > , block : ExceptionCallback ): Unit fun error ( exception : Class < Exception > , block : ExceptionCallback ): Unit","title":"error"},{"location":"port_http_server/com.hexagonkt.http.server/-router/flat-request-handlers/","text":"com.hexagonkt.http.server / Router / flatRequestHandlers flatRequestHandlers \u00b6 fun flatRequestHandlers ( h : List < RequestHandler > = requestHandlers ): List < RequestHandler >","title":"Flat request handlers"},{"location":"port_http_server/com.hexagonkt.http.server/-router/flat-request-handlers/#flatrequesthandlers","text":"fun flatRequestHandlers ( h : List < RequestHandler > = requestHandlers ): List < RequestHandler >","title":"flatRequestHandlers"},{"location":"port_http_server/com.hexagonkt.http.server/-router/get/","text":"com.hexagonkt.http.server / Router / get get \u00b6 fun get ( path : String = \"/\" , block : RouteCallback ): Unit fun get ( resource : Resource ): Unit fun get ( path : String , resource : Resource ): Unit fun get ( file : File ): Unit fun get ( path : String , file : File ): Unit","title":"Get"},{"location":"port_http_server/com.hexagonkt.http.server/-router/get/#get","text":"fun get ( path : String = \"/\" , block : RouteCallback ): Unit fun get ( resource : Resource ): Unit fun get ( path : String , resource : Resource ): Unit fun get ( file : File ): Unit fun get ( path : String , file : File ): Unit","title":"get"},{"location":"port_http_server/com.hexagonkt.http.server/-router/head/","text":"com.hexagonkt.http.server / Router / head head \u00b6 fun head ( path : String = \"/\" , block : RouteCallback ): Unit","title":"Head"},{"location":"port_http_server/com.hexagonkt.http.server/-router/head/#head","text":"fun head ( path : String = \"/\" , block : RouteCallback ): Unit","title":"head"},{"location":"port_http_server/com.hexagonkt.http.server/-router/options/","text":"com.hexagonkt.http.server / Router / options options \u00b6 fun options ( path : String = \"/\" , block : RouteCallback ): Unit","title":"Options"},{"location":"port_http_server/com.hexagonkt.http.server/-router/options/#options","text":"fun options ( path : String = \"/\" , block : RouteCallback ): Unit","title":"options"},{"location":"port_http_server/com.hexagonkt.http.server/-router/patch/","text":"com.hexagonkt.http.server / Router / patch patch \u00b6 fun patch ( path : String = \"/\" , block : RouteCallback ): Unit","title":"Patch"},{"location":"port_http_server/com.hexagonkt.http.server/-router/patch/#patch","text":"fun patch ( path : String = \"/\" , block : RouteCallback ): Unit","title":"patch"},{"location":"port_http_server/com.hexagonkt.http.server/-router/path/","text":"com.hexagonkt.http.server / Router / path path \u00b6 fun path ( path : Path , router : Router ): Unit fun path ( handler : Router ): Unit fun path ( block : Router .() -> Unit ): Unit fun path ( path : String , router : Router ): Unit fun path ( path : String , block : Router .() -> Unit ): Unit","title":"Path"},{"location":"port_http_server/com.hexagonkt.http.server/-router/path/#path","text":"fun path ( path : Path , router : Router ): Unit fun path ( handler : Router ): Unit fun path ( block : Router .() -> Unit ): Unit fun path ( path : String , router : Router ): Unit fun path ( path : String , block : Router .() -> Unit ): Unit","title":"path"},{"location":"port_http_server/com.hexagonkt.http.server/-router/post/","text":"com.hexagonkt.http.server / Router / post post \u00b6 fun post ( path : String = \"/\" , block : RouteCallback ): Unit","title":"Post"},{"location":"port_http_server/com.hexagonkt.http.server/-router/post/#post","text":"fun post ( path : String = \"/\" , block : RouteCallback ): Unit","title":"post"},{"location":"port_http_server/com.hexagonkt.http.server/-router/put/","text":"com.hexagonkt.http.server / Router / put put \u00b6 fun put ( path : String = \"/\" , block : RouteCallback ): Unit","title":"Put"},{"location":"port_http_server/com.hexagonkt.http.server/-router/put/#put","text":"fun put ( path : String = \"/\" , block : RouteCallback ): Unit","title":"put"},{"location":"port_http_server/com.hexagonkt.http.server/-router/request-handlers/","text":"com.hexagonkt.http.server / Router / requestHandlers requestHandlers \u00b6 var requestHandlers : List < RequestHandler >","title":"Request handlers"},{"location":"port_http_server/com.hexagonkt.http.server/-router/request-handlers/#requesthandlers","text":"var requestHandlers : List < RequestHandler >","title":"requestHandlers"},{"location":"port_http_server/com.hexagonkt.http.server/-router/trace/","text":"com.hexagonkt.http.server / Router / trace trace \u00b6 fun trace ( path : String = \"/\" , block : RouteCallback ): Unit","title":"Trace"},{"location":"port_http_server/com.hexagonkt.http.server/-router/trace/#trace","text":"fun trace ( path : String = \"/\" , block : RouteCallback ): Unit","title":"trace"},{"location":"port_http_server/com.hexagonkt.http.server/-server/","text":"com.hexagonkt.http.server / Server Server \u00b6 data class Server A server that listen to HTTP connections on a port and address and route requests using a router. TODO Write documentation. Constructors \u00b6 Name Summary <init> Server ( adapter : ServerPort = inject (), settings : Map < String , *> = SettingsManager . settings , block : Router .() -> Unit ) Creates a server with a router. It is a combination of Server and Router . Server ( adapter : ServerPort , router : Router , settings : Map < String , *> ) `` Server ( adapter : ServerPort = inject (), router : Router , settings : ServerSettings = ServerSettings ()) A server that listen to HTTP connections on a port and address and route requests using a router. Properties \u00b6 Name Summary contextRouter val contextRouter: Router portName val portName: String runtimePort val runtimePort: Int settings val settings: ServerSettings Functions \u00b6 Name Summary start fun start (): Unit started fun started (): Boolean stop fun stop (): Unit","title":"Home"},{"location":"port_http_server/com.hexagonkt.http.server/-server/#server","text":"data class Server A server that listen to HTTP connections on a port and address and route requests using a router. TODO Write documentation.","title":"Server"},{"location":"port_http_server/com.hexagonkt.http.server/-server/#constructors","text":"Name Summary <init> Server ( adapter : ServerPort = inject (), settings : Map < String , *> = SettingsManager . settings , block : Router .() -> Unit ) Creates a server with a router. It is a combination of Server and Router . Server ( adapter : ServerPort , router : Router , settings : Map < String , *> ) `` Server ( adapter : ServerPort = inject (), router : Router , settings : ServerSettings = ServerSettings ()) A server that listen to HTTP connections on a port and address and route requests using a router.","title":"Constructors"},{"location":"port_http_server/com.hexagonkt.http.server/-server/#properties","text":"Name Summary contextRouter val contextRouter: Router portName val portName: String runtimePort val runtimePort: Int settings val settings: ServerSettings","title":"Properties"},{"location":"port_http_server/com.hexagonkt.http.server/-server/#functions","text":"Name Summary start fun start (): Unit started fun started (): Boolean stop fun stop (): Unit","title":"Functions"},{"location":"port_http_server/com.hexagonkt.http.server/-server/-init-/","text":"com.hexagonkt.http.server / Server / <init> <init> \u00b6 Server ( adapter : ServerPort = inject (), settings : Map < String , *> = SettingsManager . settings , block : Router .() -> Unit ) Creates a server with a router. It is a combination of Server and Router . Parameters \u00b6 adapter - The server engine. settings - Server settings. Port and address will be searched in this map. block - Router's setup block. Return A new server with the built router. Server ( adapter : ServerPort , router : Router , settings : Map < String , *> ) `` Server ( adapter : ServerPort = inject (), router : Router , settings : ServerSettings = ServerSettings ()) A server that listen to HTTP connections on a port and address and route requests using a router. TODO Write documentation.","title":" init "},{"location":"port_http_server/com.hexagonkt.http.server/-server/-init-/#init","text":"Server ( adapter : ServerPort = inject (), settings : Map < String , *> = SettingsManager . settings , block : Router .() -> Unit ) Creates a server with a router. It is a combination of Server and Router .","title":"&lt;init&gt;"},{"location":"port_http_server/com.hexagonkt.http.server/-server/-init-/#parameters","text":"adapter - The server engine. settings - Server settings. Port and address will be searched in this map. block - Router's setup block. Return A new server with the built router. Server ( adapter : ServerPort , router : Router , settings : Map < String , *> ) `` Server ( adapter : ServerPort = inject (), router : Router , settings : ServerSettings = ServerSettings ()) A server that listen to HTTP connections on a port and address and route requests using a router. TODO Write documentation.","title":"Parameters"},{"location":"port_http_server/com.hexagonkt.http.server/-server/context-router/","text":"com.hexagonkt.http.server / Server / contextRouter contextRouter \u00b6 val contextRouter: Router","title":"Context router"},{"location":"port_http_server/com.hexagonkt.http.server/-server/context-router/#contextrouter","text":"val contextRouter: Router","title":"contextRouter"},{"location":"port_http_server/com.hexagonkt.http.server/-server/port-name/","text":"com.hexagonkt.http.server / Server / portName portName \u00b6 val portName: String","title":"Port name"},{"location":"port_http_server/com.hexagonkt.http.server/-server/port-name/#portname","text":"val portName: String","title":"portName"},{"location":"port_http_server/com.hexagonkt.http.server/-server/runtime-port/","text":"com.hexagonkt.http.server / Server / runtimePort runtimePort \u00b6 val runtimePort: Int","title":"Runtime port"},{"location":"port_http_server/com.hexagonkt.http.server/-server/runtime-port/#runtimeport","text":"val runtimePort: Int","title":"runtimePort"},{"location":"port_http_server/com.hexagonkt.http.server/-server/settings/","text":"com.hexagonkt.http.server / Server / settings settings \u00b6 val settings: ServerSettings","title":"Settings"},{"location":"port_http_server/com.hexagonkt.http.server/-server/settings/#settings","text":"val settings: ServerSettings","title":"settings"},{"location":"port_http_server/com.hexagonkt.http.server/-server/start/","text":"com.hexagonkt.http.server / Server / start start \u00b6 fun start (): Unit","title":"Start"},{"location":"port_http_server/com.hexagonkt.http.server/-server/start/#start","text":"fun start (): Unit","title":"start"},{"location":"port_http_server/com.hexagonkt.http.server/-server/started/","text":"com.hexagonkt.http.server / Server / started started \u00b6 fun started (): Boolean","title":"Started"},{"location":"port_http_server/com.hexagonkt.http.server/-server/started/#started","text":"fun started (): Boolean","title":"started"},{"location":"port_http_server/com.hexagonkt.http.server/-server/stop/","text":"com.hexagonkt.http.server / Server / stop stop \u00b6 fun stop (): Unit","title":"Stop"},{"location":"port_http_server/com.hexagonkt.http.server/-server/stop/#stop","text":"fun stop (): Unit","title":"stop"},{"location":"port_http_server/com.hexagonkt.http.server/-server-port/","text":"com.hexagonkt.http.server / ServerPort ServerPort \u00b6 interface ServerPort Represents a server instance of one kind. Functions \u00b6 Name Summary runtimePort abstract fun runtimePort (): Int Gets the runtime port if started, throw an exception otherwise. shutdown abstract fun shutdown (): Unit Stops the instance of the engine. started abstract fun started (): Boolean . startup abstract fun startup ( server : Server ): Unit Builds a server of a certain engine from a server definition and runs it.","title":"Home"},{"location":"port_http_server/com.hexagonkt.http.server/-server-port/#serverport","text":"interface ServerPort Represents a server instance of one kind.","title":"ServerPort"},{"location":"port_http_server/com.hexagonkt.http.server/-server-port/#functions","text":"Name Summary runtimePort abstract fun runtimePort (): Int Gets the runtime port if started, throw an exception otherwise. shutdown abstract fun shutdown (): Unit Stops the instance of the engine. started abstract fun started (): Boolean . startup abstract fun startup ( server : Server ): Unit Builds a server of a certain engine from a server definition and runs it.","title":"Functions"},{"location":"port_http_server/com.hexagonkt.http.server/-server-port/runtime-port/","text":"com.hexagonkt.http.server / ServerPort / runtimePort runtimePort \u00b6 abstract fun runtimePort (): Int Gets the runtime port if started, throw an exception otherwise.","title":"Runtime port"},{"location":"port_http_server/com.hexagonkt.http.server/-server-port/runtime-port/#runtimeport","text":"abstract fun runtimePort (): Int Gets the runtime port if started, throw an exception otherwise.","title":"runtimePort"},{"location":"port_http_server/com.hexagonkt.http.server/-server-port/shutdown/","text":"com.hexagonkt.http.server / ServerPort / shutdown shutdown \u00b6 abstract fun shutdown (): Unit Stops the instance of the engine.","title":"Shutdown"},{"location":"port_http_server/com.hexagonkt.http.server/-server-port/shutdown/#shutdown","text":"abstract fun shutdown (): Unit Stops the instance of the engine.","title":"shutdown"},{"location":"port_http_server/com.hexagonkt.http.server/-server-port/started/","text":"com.hexagonkt.http.server / ServerPort / started started \u00b6 abstract fun started (): Boolean .","title":"Started"},{"location":"port_http_server/com.hexagonkt.http.server/-server-port/started/#started","text":"abstract fun started (): Boolean .","title":"started"},{"location":"port_http_server/com.hexagonkt.http.server/-server-port/startup/","text":"com.hexagonkt.http.server / ServerPort / startup startup \u00b6 abstract fun startup ( server : Server ): Unit Builds a server of a certain engine from a server definition and runs it.","title":"Startup"},{"location":"port_http_server/com.hexagonkt.http.server/-server-port/startup/#startup","text":"abstract fun startup ( server : Server ): Unit Builds a server of a certain engine from a server definition and runs it.","title":"startup"},{"location":"port_http_server/com.hexagonkt.http.server/-server-settings/","text":"com.hexagonkt.http.server / ServerSettings ServerSettings \u00b6 data class ServerSettings Constructors \u00b6 Name Summary <init> ServerSettings ( serverName : String = \"<undefined>\" , bindAddress : InetAddress = InetAddress . getLoopbackAddress (), bindPort : Int = 2010 , contextPath : String = \"\" ) Properties \u00b6 Name Summary bindAddress val bindAddress: InetAddress bindPort val bindPort: Int contextPath val contextPath: String serverName val serverName: String","title":"Home"},{"location":"port_http_server/com.hexagonkt.http.server/-server-settings/#serversettings","text":"data class ServerSettings","title":"ServerSettings"},{"location":"port_http_server/com.hexagonkt.http.server/-server-settings/#constructors","text":"Name Summary <init> ServerSettings ( serverName : String = \"<undefined>\" , bindAddress : InetAddress = InetAddress . getLoopbackAddress (), bindPort : Int = 2010 , contextPath : String = \"\" )","title":"Constructors"},{"location":"port_http_server/com.hexagonkt.http.server/-server-settings/#properties","text":"Name Summary bindAddress val bindAddress: InetAddress bindPort val bindPort: Int contextPath val contextPath: String serverName val serverName: String","title":"Properties"},{"location":"port_http_server/com.hexagonkt.http.server/-server-settings/-init-/","text":"com.hexagonkt.http.server / ServerSettings / <init> <init> \u00b6 ServerSettings ( serverName : String = \"<undefined>\" , bindAddress : InetAddress = InetAddress . getLoopbackAddress (), bindPort : Int = 2010 , contextPath : String = \"\" )","title":" init "},{"location":"port_http_server/com.hexagonkt.http.server/-server-settings/-init-/#init","text":"ServerSettings ( serverName : String = \"<undefined>\" , bindAddress : InetAddress = InetAddress . getLoopbackAddress (), bindPort : Int = 2010 , contextPath : String = \"\" )","title":"&lt;init&gt;"},{"location":"port_http_server/com.hexagonkt.http.server/-server-settings/bind-address/","text":"com.hexagonkt.http.server / ServerSettings / bindAddress bindAddress \u00b6 val bindAddress: InetAddress","title":"Bind address"},{"location":"port_http_server/com.hexagonkt.http.server/-server-settings/bind-address/#bindaddress","text":"val bindAddress: InetAddress","title":"bindAddress"},{"location":"port_http_server/com.hexagonkt.http.server/-server-settings/bind-port/","text":"com.hexagonkt.http.server / ServerSettings / bindPort bindPort \u00b6 val bindPort: Int","title":"Bind port"},{"location":"port_http_server/com.hexagonkt.http.server/-server-settings/bind-port/#bindport","text":"val bindPort: Int","title":"bindPort"},{"location":"port_http_server/com.hexagonkt.http.server/-server-settings/context-path/","text":"com.hexagonkt.http.server / ServerSettings / contextPath contextPath \u00b6 val contextPath: String","title":"Context path"},{"location":"port_http_server/com.hexagonkt.http.server/-server-settings/context-path/#contextpath","text":"val contextPath: String","title":"contextPath"},{"location":"port_http_server/com.hexagonkt.http.server/-server-settings/server-name/","text":"com.hexagonkt.http.server / ServerSettings / serverName serverName \u00b6 val serverName: String","title":"Server name"},{"location":"port_http_server/com.hexagonkt.http.server/-server-settings/server-name/#servername","text":"val serverName: String","title":"serverName"},{"location":"port_http_server/com.hexagonkt.http.server/-session/","text":"com.hexagonkt.http.server / Session Session \u00b6 abstract class Session Provides session information. Constructors \u00b6 Name Summary <init> Session () Provides session information. Properties \u00b6 Name Summary attributes val attributes: Map < String , Any ?> creationTime val creationTime: Long ? id val id: String ? A string containing the unique identifier assigned to this session (Cookie). lastAccessedTime val lastAccessedTime: Long ? maxInactiveInterval var maxInactiveInterval : Int ? Functions \u00b6 Name Summary attributes abstract fun attributes (): Map < String , Any ?> creationTime abstract fun creationTime (): Long ? get fun get ( name : String ): Any ? getAttribute abstract fun getAttribute ( name : String ): Any ? id abstract fun id (): String ? A string containing the unique identifier assigned to this session (Cookie). invalidate abstract fun invalidate (): Unit isNew abstract fun isNew (): Boolean lastAccessedTime abstract fun lastAccessedTime (): Long ? maxInactiveInterval abstract fun maxInactiveInterval (): Int ? abstract fun maxInactiveInterval ( value : Int ? ): Unit remove fun remove ( name : String ): Unit removeAttribute abstract fun removeAttribute ( name : String ): Unit set fun set ( name : String , value : Any ): Unit setAttribute abstract fun setAttribute ( name : String , value : Any ): Unit","title":"Home"},{"location":"port_http_server/com.hexagonkt.http.server/-session/#session","text":"abstract class Session Provides session information.","title":"Session"},{"location":"port_http_server/com.hexagonkt.http.server/-session/#constructors","text":"Name Summary <init> Session () Provides session information.","title":"Constructors"},{"location":"port_http_server/com.hexagonkt.http.server/-session/#properties","text":"Name Summary attributes val attributes: Map < String , Any ?> creationTime val creationTime: Long ? id val id: String ? A string containing the unique identifier assigned to this session (Cookie). lastAccessedTime val lastAccessedTime: Long ? maxInactiveInterval var maxInactiveInterval : Int ?","title":"Properties"},{"location":"port_http_server/com.hexagonkt.http.server/-session/#functions","text":"Name Summary attributes abstract fun attributes (): Map < String , Any ?> creationTime abstract fun creationTime (): Long ? get fun get ( name : String ): Any ? getAttribute abstract fun getAttribute ( name : String ): Any ? id abstract fun id (): String ? A string containing the unique identifier assigned to this session (Cookie). invalidate abstract fun invalidate (): Unit isNew abstract fun isNew (): Boolean lastAccessedTime abstract fun lastAccessedTime (): Long ? maxInactiveInterval abstract fun maxInactiveInterval (): Int ? abstract fun maxInactiveInterval ( value : Int ? ): Unit remove fun remove ( name : String ): Unit removeAttribute abstract fun removeAttribute ( name : String ): Unit set fun set ( name : String , value : Any ): Unit setAttribute abstract fun setAttribute ( name : String , value : Any ): Unit","title":"Functions"},{"location":"port_http_server/com.hexagonkt.http.server/-session/-init-/","text":"com.hexagonkt.http.server / Session / <init> <init> \u00b6 Session () Provides session information.","title":" init "},{"location":"port_http_server/com.hexagonkt.http.server/-session/-init-/#init","text":"Session () Provides session information.","title":"&lt;init&gt;"},{"location":"port_http_server/com.hexagonkt.http.server/-session/attributes/","text":"com.hexagonkt.http.server / Session / attributes attributes \u00b6 val attributes: Map < String , Any ?> protected abstract fun attributes (): Map < String , Any ?>","title":"Attributes"},{"location":"port_http_server/com.hexagonkt.http.server/-session/attributes/#attributes","text":"val attributes: Map < String , Any ?> protected abstract fun attributes (): Map < String , Any ?>","title":"attributes"},{"location":"port_http_server/com.hexagonkt.http.server/-session/creation-time/","text":"com.hexagonkt.http.server / Session / creationTime creationTime \u00b6 val creationTime: Long ? protected abstract fun creationTime (): Long ?","title":"Creation time"},{"location":"port_http_server/com.hexagonkt.http.server/-session/creation-time/#creationtime","text":"val creationTime: Long ? protected abstract fun creationTime (): Long ?","title":"creationTime"},{"location":"port_http_server/com.hexagonkt.http.server/-session/get-attribute/","text":"com.hexagonkt.http.server / Session / getAttribute getAttribute \u00b6 abstract fun getAttribute ( name : String ): Any ?","title":"Get attribute"},{"location":"port_http_server/com.hexagonkt.http.server/-session/get-attribute/#getattribute","text":"abstract fun getAttribute ( name : String ): Any ?","title":"getAttribute"},{"location":"port_http_server/com.hexagonkt.http.server/-session/get/","text":"com.hexagonkt.http.server / Session / get get \u00b6 fun get ( name : String ): Any ?","title":"Get"},{"location":"port_http_server/com.hexagonkt.http.server/-session/get/#get","text":"fun get ( name : String ): Any ?","title":"get"},{"location":"port_http_server/com.hexagonkt.http.server/-session/id/","text":"com.hexagonkt.http.server / Session / id id \u00b6 val id: String ? A string containing the unique identifier assigned to this session (Cookie). Getter A string containing the unique identifier assigned to this session (Cookie). protected abstract fun id (): String ? A string containing the unique identifier assigned to this session (Cookie).","title":"Id"},{"location":"port_http_server/com.hexagonkt.http.server/-session/id/#id","text":"val id: String ? A string containing the unique identifier assigned to this session (Cookie). Getter A string containing the unique identifier assigned to this session (Cookie). protected abstract fun id (): String ? A string containing the unique identifier assigned to this session (Cookie).","title":"id"},{"location":"port_http_server/com.hexagonkt.http.server/-session/invalidate/","text":"com.hexagonkt.http.server / Session / invalidate invalidate \u00b6 abstract fun invalidate (): Unit","title":"Invalidate"},{"location":"port_http_server/com.hexagonkt.http.server/-session/invalidate/#invalidate","text":"abstract fun invalidate (): Unit","title":"invalidate"},{"location":"port_http_server/com.hexagonkt.http.server/-session/is-new/","text":"com.hexagonkt.http.server / Session / isNew isNew \u00b6 abstract fun isNew (): Boolean","title":"Is new"},{"location":"port_http_server/com.hexagonkt.http.server/-session/is-new/#isnew","text":"abstract fun isNew (): Boolean","title":"isNew"},{"location":"port_http_server/com.hexagonkt.http.server/-session/last-accessed-time/","text":"com.hexagonkt.http.server / Session / lastAccessedTime lastAccessedTime \u00b6 val lastAccessedTime: Long ? protected abstract fun lastAccessedTime (): Long ?","title":"Last accessed time"},{"location":"port_http_server/com.hexagonkt.http.server/-session/last-accessed-time/#lastaccessedtime","text":"val lastAccessedTime: Long ? protected abstract fun lastAccessedTime (): Long ?","title":"lastAccessedTime"},{"location":"port_http_server/com.hexagonkt.http.server/-session/max-inactive-interval/","text":"com.hexagonkt.http.server / Session / maxInactiveInterval maxInactiveInterval \u00b6 var maxInactiveInterval : Int ? protected abstract fun maxInactiveInterval (): Int ? protected abstract fun maxInactiveInterval ( value : Int ? ): Unit","title":"Max inactive interval"},{"location":"port_http_server/com.hexagonkt.http.server/-session/max-inactive-interval/#maxinactiveinterval","text":"var maxInactiveInterval : Int ? protected abstract fun maxInactiveInterval (): Int ? protected abstract fun maxInactiveInterval ( value : Int ? ): Unit","title":"maxInactiveInterval"},{"location":"port_http_server/com.hexagonkt.http.server/-session/remove-attribute/","text":"com.hexagonkt.http.server / Session / removeAttribute removeAttribute \u00b6 abstract fun removeAttribute ( name : String ): Unit","title":"Remove attribute"},{"location":"port_http_server/com.hexagonkt.http.server/-session/remove-attribute/#removeattribute","text":"abstract fun removeAttribute ( name : String ): Unit","title":"removeAttribute"},{"location":"port_http_server/com.hexagonkt.http.server/-session/remove/","text":"com.hexagonkt.http.server / Session / remove remove \u00b6 fun remove ( name : String ): Unit","title":"Remove"},{"location":"port_http_server/com.hexagonkt.http.server/-session/remove/#remove","text":"fun remove ( name : String ): Unit","title":"remove"},{"location":"port_http_server/com.hexagonkt.http.server/-session/set-attribute/","text":"com.hexagonkt.http.server / Session / setAttribute setAttribute \u00b6 abstract fun setAttribute ( name : String , value : Any ): Unit","title":"Set attribute"},{"location":"port_http_server/com.hexagonkt.http.server/-session/set-attribute/#setattribute","text":"abstract fun setAttribute ( name : String , value : Any ): Unit","title":"setAttribute"},{"location":"port_http_server/com.hexagonkt.http.server/-session/set/","text":"com.hexagonkt.http.server / Session / set set \u00b6 fun set ( name : String , value : Any ): Unit","title":"Set"},{"location":"port_http_server/com.hexagonkt.http.server/-session/set/#set","text":"fun set ( name : String , value : Any ): Unit","title":"set"},{"location":"port_messaging/","text":"TODO Packages \u00b6 Name Summary com.hexagonkt.messaging TODO Index \u00b6 All Types","title":"Messaging"},{"location":"port_messaging/#packages","text":"Name Summary com.hexagonkt.messaging TODO","title":"Packages"},{"location":"port_messaging/#index","text":"All Types","title":"Index"},{"location":"port_messaging/alltypes/","text":"TODO All Types \u00b6 Name Summary com.hexagonkt.messaging.Message com.hexagonkt.messaging.MessagingPort","title":"Home"},{"location":"port_messaging/alltypes/#all-types","text":"Name Summary com.hexagonkt.messaging.Message com.hexagonkt.messaging.MessagingPort","title":"All Types"},{"location":"port_messaging/com.hexagonkt.messaging/","text":"com.hexagonkt.messaging Package com.hexagonkt.messaging \u00b6 TODO Types \u00b6 Name Summary Message open class Message MessagingPort interface MessagingPort","title":"Home"},{"location":"port_messaging/com.hexagonkt.messaging/#package-comhexagonktmessaging","text":"TODO","title":"Package com.hexagonkt.messaging"},{"location":"port_messaging/com.hexagonkt.messaging/#types","text":"Name Summary Message open class Message MessagingPort interface MessagingPort","title":"Types"},{"location":"port_messaging/com.hexagonkt.messaging/-message/","text":"com.hexagonkt.messaging / Message Message \u00b6 open class Message Constructors \u00b6 Name Summary <init> Message ( timestamp : Long = currentTimeMillis (), dateTime : Long = LocalDateTime . now (). toNumber (), hostname : String = Jvm . hostname , ip : String = Jvm . ip , jvmid : String = Jvm . id , thread : String = currentThread (). name ) Properties \u00b6 Name Summary dateTime val dateTime: Long hostname val hostname: String ip val ip: String jvmid val jvmid: String thread val thread: String timestamp val timestamp: Long","title":"Home"},{"location":"port_messaging/com.hexagonkt.messaging/-message/#message","text":"open class Message","title":"Message"},{"location":"port_messaging/com.hexagonkt.messaging/-message/#constructors","text":"Name Summary <init> Message ( timestamp : Long = currentTimeMillis (), dateTime : Long = LocalDateTime . now (). toNumber (), hostname : String = Jvm . hostname , ip : String = Jvm . ip , jvmid : String = Jvm . id , thread : String = currentThread (). name )","title":"Constructors"},{"location":"port_messaging/com.hexagonkt.messaging/-message/#properties","text":"Name Summary dateTime val dateTime: Long hostname val hostname: String ip val ip: String jvmid val jvmid: String thread val thread: String timestamp val timestamp: Long","title":"Properties"},{"location":"port_messaging/com.hexagonkt.messaging/-message/-init-/","text":"com.hexagonkt.messaging / Message / <init> <init> \u00b6 Message ( timestamp : Long = currentTimeMillis (), dateTime : Long = LocalDateTime . now (). toNumber (), hostname : String = Jvm . hostname , ip : String = Jvm . ip , jvmid : String = Jvm . id , thread : String = currentThread (). name )","title":" init "},{"location":"port_messaging/com.hexagonkt.messaging/-message/-init-/#init","text":"Message ( timestamp : Long = currentTimeMillis (), dateTime : Long = LocalDateTime . now (). toNumber (), hostname : String = Jvm . hostname , ip : String = Jvm . ip , jvmid : String = Jvm . id , thread : String = currentThread (). name )","title":"&lt;init&gt;"},{"location":"port_messaging/com.hexagonkt.messaging/-message/date-time/","text":"com.hexagonkt.messaging / Message / dateTime dateTime \u00b6 val dateTime: Long","title":"Date time"},{"location":"port_messaging/com.hexagonkt.messaging/-message/date-time/#datetime","text":"val dateTime: Long","title":"dateTime"},{"location":"port_messaging/com.hexagonkt.messaging/-message/hostname/","text":"com.hexagonkt.messaging / Message / hostname hostname \u00b6 val hostname: String","title":"Hostname"},{"location":"port_messaging/com.hexagonkt.messaging/-message/hostname/#hostname","text":"val hostname: String","title":"hostname"},{"location":"port_messaging/com.hexagonkt.messaging/-message/ip/","text":"com.hexagonkt.messaging / Message / ip ip \u00b6 val ip: String","title":"Ip"},{"location":"port_messaging/com.hexagonkt.messaging/-message/ip/#ip","text":"val ip: String","title":"ip"},{"location":"port_messaging/com.hexagonkt.messaging/-message/jvmid/","text":"com.hexagonkt.messaging / Message / jvmid jvmid \u00b6 val jvmid: String","title":"Jvmid"},{"location":"port_messaging/com.hexagonkt.messaging/-message/jvmid/#jvmid","text":"val jvmid: String","title":"jvmid"},{"location":"port_messaging/com.hexagonkt.messaging/-message/thread/","text":"com.hexagonkt.messaging / Message / thread thread \u00b6 val thread: String","title":"Thread"},{"location":"port_messaging/com.hexagonkt.messaging/-message/thread/#thread","text":"val thread: String","title":"thread"},{"location":"port_messaging/com.hexagonkt.messaging/-message/timestamp/","text":"com.hexagonkt.messaging / Message / timestamp timestamp \u00b6 val timestamp: Long","title":"Timestamp"},{"location":"port_messaging/com.hexagonkt.messaging/-message/timestamp/#timestamp","text":"val timestamp: Long","title":"timestamp"},{"location":"port_messaging/com.hexagonkt.messaging/-messaging-port/","text":"com.hexagonkt.messaging / MessagingPort MessagingPort \u00b6 interface MessagingPort Functions \u00b6 Name Summary consume abstract fun < T : Message > consume ( type : KClass < T > , address : String , consumer : ( T ) -> Unit ): Unit open fun < T : Message > consume ( type : KClass < T > , consumer : ( T ) -> Unit ): Unit publish abstract fun publish ( message : Message , address : String ): Unit open fun publish ( message : Message ): Unit","title":"Home"},{"location":"port_messaging/com.hexagonkt.messaging/-messaging-port/#messagingport","text":"interface MessagingPort","title":"MessagingPort"},{"location":"port_messaging/com.hexagonkt.messaging/-messaging-port/#functions","text":"Name Summary consume abstract fun < T : Message > consume ( type : KClass < T > , address : String , consumer : ( T ) -> Unit ): Unit open fun < T : Message > consume ( type : KClass < T > , consumer : ( T ) -> Unit ): Unit publish abstract fun publish ( message : Message , address : String ): Unit open fun publish ( message : Message ): Unit","title":"Functions"},{"location":"port_messaging/com.hexagonkt.messaging/-messaging-port/consume/","text":"com.hexagonkt.messaging / MessagingPort / consume consume \u00b6 abstract fun < T : Message > consume ( type : KClass < T > , address : String , consumer : ( T ) -> Unit ): Unit open fun < T : Message > consume ( type : KClass < T > , consumer : ( T ) -> Unit ): Unit","title":"Consume"},{"location":"port_messaging/com.hexagonkt.messaging/-messaging-port/consume/#consume","text":"abstract fun < T : Message > consume ( type : KClass < T > , address : String , consumer : ( T ) -> Unit ): Unit open fun < T : Message > consume ( type : KClass < T > , consumer : ( T ) -> Unit ): Unit","title":"consume"},{"location":"port_messaging/com.hexagonkt.messaging/-messaging-port/publish/","text":"com.hexagonkt.messaging / MessagingPort / publish publish \u00b6 abstract fun publish ( message : Message , address : String ): Unit open fun publish ( message : Message ): Unit","title":"Publish"},{"location":"port_messaging/com.hexagonkt.messaging/-messaging-port/publish/#publish","text":"abstract fun publish ( message : Message , address : String ): Unit open fun publish ( message : Message ): Unit","title":"publish"},{"location":"port_store/","text":"Hexagon's storage utilities for data classes. Packages \u00b6 Name Summary com.hexagonkt.store TODO Index \u00b6 All Types","title":"Store"},{"location":"port_store/#packages","text":"Name Summary com.hexagonkt.store TODO","title":"Packages"},{"location":"port_store/#index","text":"All Types","title":"Index"},{"location":"port_store/alltypes/","text":"Hexagon's storage utilities for data classes. All Types \u00b6 Name Summary com.hexagonkt.store.IndexOrder com.hexagonkt.store.Mapper Maps objects and fields from/to stores and filters. com.hexagonkt.store.Store TODO All methods accepting maps rely on mapOf returning an insertion ordered map. Take care of this in the future to avoid possible bugs","title":"Home"},{"location":"port_store/alltypes/#all-types","text":"Name Summary com.hexagonkt.store.IndexOrder com.hexagonkt.store.Mapper Maps objects and fields from/to stores and filters. com.hexagonkt.store.Store TODO All methods accepting maps rely on mapOf returning an insertion ordered map. Take care of this in the future to avoid possible bugs","title":"All Types"},{"location":"port_store/com.hexagonkt.store/","text":"com.hexagonkt.store Package com.hexagonkt.store \u00b6 TODO Types \u00b6 Name Summary IndexOrder enum class IndexOrder Mapper interface Mapper < T : Any > Maps objects and fields from/to stores and filters. Store interface Store < T : Any , K : Any > TODO All methods accepting maps rely on mapOf returning an insertion ordered map. Take care of this in the future to avoid possible bugs","title":"Home"},{"location":"port_store/com.hexagonkt.store/#package-comhexagonktstore","text":"TODO","title":"Package com.hexagonkt.store"},{"location":"port_store/com.hexagonkt.store/#types","text":"Name Summary IndexOrder enum class IndexOrder Mapper interface Mapper < T : Any > Maps objects and fields from/to stores and filters. Store interface Store < T : Any , K : Any > TODO All methods accepting maps rely on mapOf returning an insertion ordered map. Take care of this in the future to avoid possible bugs","title":"Types"},{"location":"port_store/com.hexagonkt.store/-index-order/","text":"com.hexagonkt.store / IndexOrder IndexOrder \u00b6 enum class IndexOrder Enum Values \u00b6 Name Summary ASCENDING DESCENDING","title":"Home"},{"location":"port_store/com.hexagonkt.store/-index-order/#indexorder","text":"enum class IndexOrder","title":"IndexOrder"},{"location":"port_store/com.hexagonkt.store/-index-order/#enum-values","text":"Name Summary ASCENDING DESCENDING","title":"Enum Values"},{"location":"port_store/com.hexagonkt.store/-index-order/-a-s-c-e-n-d-i-n-g/","text":"com.hexagonkt.store / IndexOrder / ASCENDING ASCENDING \u00b6 ASCENDING","title":" a s c e n d i n g"},{"location":"port_store/com.hexagonkt.store/-index-order/-a-s-c-e-n-d-i-n-g/#ascending","text":"ASCENDING","title":"ASCENDING"},{"location":"port_store/com.hexagonkt.store/-index-order/-d-e-s-c-e-n-d-i-n-g/","text":"com.hexagonkt.store / IndexOrder / DESCENDING DESCENDING \u00b6 DESCENDING","title":" d e s c e n d i n g"},{"location":"port_store/com.hexagonkt.store/-index-order/-d-e-s-c-e-n-d-i-n-g/#descending","text":"DESCENDING","title":"DESCENDING"},{"location":"port_store/com.hexagonkt.store/-mapper/","text":"com.hexagonkt.store / Mapper Mapper \u00b6 interface Mapper < T : Any > Maps objects and fields from/to stores and filters. Properties \u00b6 Name Summary fields abstract val fields: Map < String , KProperty1 <* , *>> Functions \u00b6 Name Summary fromStore abstract fun fromStore ( map : Map < String , Any > ): T open fun fromStore ( property : String , value : Any ): Any toStore abstract fun toStore ( instance : T ): Map < String , Any > open fun toStore ( property : String , value : Any ): Any","title":"Home"},{"location":"port_store/com.hexagonkt.store/-mapper/#mapper","text":"interface Mapper < T : Any > Maps objects and fields from/to stores and filters.","title":"Mapper"},{"location":"port_store/com.hexagonkt.store/-mapper/#properties","text":"Name Summary fields abstract val fields: Map < String , KProperty1 <* , *>>","title":"Properties"},{"location":"port_store/com.hexagonkt.store/-mapper/#functions","text":"Name Summary fromStore abstract fun fromStore ( map : Map < String , Any > ): T open fun fromStore ( property : String , value : Any ): Any toStore abstract fun toStore ( instance : T ): Map < String , Any > open fun toStore ( property : String , value : Any ): Any","title":"Functions"},{"location":"port_store/com.hexagonkt.store/-mapper/fields/","text":"com.hexagonkt.store / Mapper / fields fields \u00b6 abstract val fields: Map < String , KProperty1 <* , *>>","title":"Fields"},{"location":"port_store/com.hexagonkt.store/-mapper/fields/#fields","text":"abstract val fields: Map < String , KProperty1 <* , *>>","title":"fields"},{"location":"port_store/com.hexagonkt.store/-mapper/from-store/","text":"com.hexagonkt.store / Mapper / fromStore fromStore \u00b6 abstract fun fromStore ( map : Map < String , Any > ): T open fun fromStore ( property : String , value : Any ): Any","title":"From store"},{"location":"port_store/com.hexagonkt.store/-mapper/from-store/#fromstore","text":"abstract fun fromStore ( map : Map < String , Any > ): T open fun fromStore ( property : String , value : Any ): Any","title":"fromStore"},{"location":"port_store/com.hexagonkt.store/-mapper/to-store/","text":"com.hexagonkt.store / Mapper / toStore toStore \u00b6 abstract fun toStore ( instance : T ): Map < String , Any > open fun toStore ( property : String , value : Any ): Any","title":"To store"},{"location":"port_store/com.hexagonkt.store/-mapper/to-store/#tostore","text":"abstract fun toStore ( instance : T ): Map < String , Any > open fun toStore ( property : String , value : Any ): Any","title":"toStore"},{"location":"port_store/com.hexagonkt.store/-store/","text":"com.hexagonkt.store / Store Store \u00b6 interface Store < T : Any , K : Any > TODO All methods accepting maps rely on mapOf returning an insertion ordered map. Take care of this in the future to avoid possible bugs Properties \u00b6 Name Summary key abstract val key: KProperty1 < T , K > mapper abstract val mapper: Mapper < T > name abstract val name: String type abstract val type: KClass < T > Functions \u00b6 Name Summary count abstract fun count ( filter : Map < String , *> = emptyMap < String , Any > ()): Long createIndex abstract fun createIndex ( unique : Boolean , fields : Map < String , IndexOrder > ): String open fun createIndex ( unique : Boolean , vararg fields : Pair < String , IndexOrder > ): String deleteMany abstract fun deleteMany ( filter : Map < String , *> ): Long deleteOne abstract fun deleteOne ( id : K ): Boolean drop abstract fun drop (): Unit fields open fun fields ( updates : Map < KProperty1 < T , *> , *> ): Map < String , *> open fun fields ( vararg updates : Pair < KProperty1 < T , *> , *> ): Map < String , *> findAll open fun findAll ( limit : Int ? = null , skip : Int ? = null , sort : Map < String , Boolean > = emptyMap ()): List < T > open fun findAll ( fields : List < String > , limit : Int ? = null , skip : Int ? = null , sort : Map < String , Boolean > = emptyMap ()): List < Map < String , *>> findMany abstract fun findMany ( filter : Map < String , *> , limit : Int ? = null , skip : Int ? = null , sort : Map < String , Boolean > = emptyMap ()): List < T > abstract fun findMany ( filter : Map < String , *> , fields : List < String > , limit : Int ? = null , skip : Int ? = null , sort : Map < String , Boolean > = emptyMap ()): List < Map < String , *>> findOne abstract fun findOne ( key : K ): T ? abstract fun findOne ( key : K , fields : List < String > ): Map < String , *>? open fun findOne ( filter : Map < String , *> ): T ? open fun findOne ( filter : Map < String , *> , fields : List < String > ): Map < String , *>? insertMany abstract fun insertMany ( instances : List < T > ): List < K > open fun insertMany ( vararg instances : T ): List < K > insertOne abstract fun insertOne ( instance : T ): K replaceMany abstract fun replaceMany ( instances : List < T > ): List < T > open fun replaceMany ( vararg instances : T ): List < T > replaceOne abstract fun replaceOne ( instance : T ): Boolean saveMany abstract fun saveMany ( instances : List < T > ): List < K ?> saveOne abstract fun saveOne ( instance : T ): K ? updateMany abstract fun updateMany ( filter : Map < String , *> , updates : Map < String , *> ): Long updateOne abstract fun updateOne ( key : K , updates : Map < String , *> ): Boolean open fun updateOne ( key : K , vararg updates : Pair < KProperty1 < T , *> , *> ): Boolean","title":"Home"},{"location":"port_store/com.hexagonkt.store/-store/#store","text":"interface Store < T : Any , K : Any > TODO All methods accepting maps rely on mapOf returning an insertion ordered map. Take care of this in the future to avoid possible bugs","title":"Store"},{"location":"port_store/com.hexagonkt.store/-store/#properties","text":"Name Summary key abstract val key: KProperty1 < T , K > mapper abstract val mapper: Mapper < T > name abstract val name: String type abstract val type: KClass < T >","title":"Properties"},{"location":"port_store/com.hexagonkt.store/-store/#functions","text":"Name Summary count abstract fun count ( filter : Map < String , *> = emptyMap < String , Any > ()): Long createIndex abstract fun createIndex ( unique : Boolean , fields : Map < String , IndexOrder > ): String open fun createIndex ( unique : Boolean , vararg fields : Pair < String , IndexOrder > ): String deleteMany abstract fun deleteMany ( filter : Map < String , *> ): Long deleteOne abstract fun deleteOne ( id : K ): Boolean drop abstract fun drop (): Unit fields open fun fields ( updates : Map < KProperty1 < T , *> , *> ): Map < String , *> open fun fields ( vararg updates : Pair < KProperty1 < T , *> , *> ): Map < String , *> findAll open fun findAll ( limit : Int ? = null , skip : Int ? = null , sort : Map < String , Boolean > = emptyMap ()): List < T > open fun findAll ( fields : List < String > , limit : Int ? = null , skip : Int ? = null , sort : Map < String , Boolean > = emptyMap ()): List < Map < String , *>> findMany abstract fun findMany ( filter : Map < String , *> , limit : Int ? = null , skip : Int ? = null , sort : Map < String , Boolean > = emptyMap ()): List < T > abstract fun findMany ( filter : Map < String , *> , fields : List < String > , limit : Int ? = null , skip : Int ? = null , sort : Map < String , Boolean > = emptyMap ()): List < Map < String , *>> findOne abstract fun findOne ( key : K ): T ? abstract fun findOne ( key : K , fields : List < String > ): Map < String , *>? open fun findOne ( filter : Map < String , *> ): T ? open fun findOne ( filter : Map < String , *> , fields : List < String > ): Map < String , *>? insertMany abstract fun insertMany ( instances : List < T > ): List < K > open fun insertMany ( vararg instances : T ): List < K > insertOne abstract fun insertOne ( instance : T ): K replaceMany abstract fun replaceMany ( instances : List < T > ): List < T > open fun replaceMany ( vararg instances : T ): List < T > replaceOne abstract fun replaceOne ( instance : T ): Boolean saveMany abstract fun saveMany ( instances : List < T > ): List < K ?> saveOne abstract fun saveOne ( instance : T ): K ? updateMany abstract fun updateMany ( filter : Map < String , *> , updates : Map < String , *> ): Long updateOne abstract fun updateOne ( key : K , updates : Map < String , *> ): Boolean open fun updateOne ( key : K , vararg updates : Pair < KProperty1 < T , *> , *> ): Boolean","title":"Functions"},{"location":"port_store/com.hexagonkt.store/-store/count/","text":"com.hexagonkt.store / Store / count count \u00b6 abstract fun count ( filter : Map < String , *> = emptyMap < String , Any > ()): Long","title":"Count"},{"location":"port_store/com.hexagonkt.store/-store/count/#count","text":"abstract fun count ( filter : Map < String , *> = emptyMap < String , Any > ()): Long","title":"count"},{"location":"port_store/com.hexagonkt.store/-store/create-index/","text":"com.hexagonkt.store / Store / createIndex createIndex \u00b6 abstract fun createIndex ( unique : Boolean , fields : Map < String , IndexOrder > ): String open fun createIndex ( unique : Boolean , vararg fields : Pair < String , IndexOrder > ): String","title":"Create index"},{"location":"port_store/com.hexagonkt.store/-store/create-index/#createindex","text":"abstract fun createIndex ( unique : Boolean , fields : Map < String , IndexOrder > ): String open fun createIndex ( unique : Boolean , vararg fields : Pair < String , IndexOrder > ): String","title":"createIndex"},{"location":"port_store/com.hexagonkt.store/-store/delete-many/","text":"com.hexagonkt.store / Store / deleteMany deleteMany \u00b6 abstract fun deleteMany ( filter : Map < String , *> ): Long","title":"Delete many"},{"location":"port_store/com.hexagonkt.store/-store/delete-many/#deletemany","text":"abstract fun deleteMany ( filter : Map < String , *> ): Long","title":"deleteMany"},{"location":"port_store/com.hexagonkt.store/-store/delete-one/","text":"com.hexagonkt.store / Store / deleteOne deleteOne \u00b6 abstract fun deleteOne ( id : K ): Boolean","title":"Delete one"},{"location":"port_store/com.hexagonkt.store/-store/delete-one/#deleteone","text":"abstract fun deleteOne ( id : K ): Boolean","title":"deleteOne"},{"location":"port_store/com.hexagonkt.store/-store/drop/","text":"com.hexagonkt.store / Store / drop drop \u00b6 abstract fun drop (): Unit","title":"Drop"},{"location":"port_store/com.hexagonkt.store/-store/drop/#drop","text":"abstract fun drop (): Unit","title":"drop"},{"location":"port_store/com.hexagonkt.store/-store/fields/","text":"com.hexagonkt.store / Store / fields fields \u00b6 open fun fields ( updates : Map < KProperty1 < T , *> , *> ): Map < String , *> open fun fields ( vararg updates : Pair < KProperty1 < T , *> , *> ): Map < String , *>","title":"Fields"},{"location":"port_store/com.hexagonkt.store/-store/fields/#fields","text":"open fun fields ( updates : Map < KProperty1 < T , *> , *> ): Map < String , *> open fun fields ( vararg updates : Pair < KProperty1 < T , *> , *> ): Map < String , *>","title":"fields"},{"location":"port_store/com.hexagonkt.store/-store/find-all/","text":"com.hexagonkt.store / Store / findAll findAll \u00b6 open fun findAll ( limit : Int ? = null , skip : Int ? = null , sort : Map < String , Boolean > = emptyMap ()): List < T > open fun findAll ( fields : List < String > , limit : Int ? = null , skip : Int ? = null , sort : Map < String , Boolean > = emptyMap ()): List < Map < String , *>>","title":"Find all"},{"location":"port_store/com.hexagonkt.store/-store/find-all/#findall","text":"open fun findAll ( limit : Int ? = null , skip : Int ? = null , sort : Map < String , Boolean > = emptyMap ()): List < T > open fun findAll ( fields : List < String > , limit : Int ? = null , skip : Int ? = null , sort : Map < String , Boolean > = emptyMap ()): List < Map < String , *>>","title":"findAll"},{"location":"port_store/com.hexagonkt.store/-store/find-many/","text":"com.hexagonkt.store / Store / findMany findMany \u00b6 abstract fun findMany ( filter : Map < String , *> , limit : Int ? = null , skip : Int ? = null , sort : Map < String , Boolean > = emptyMap ()): List < T > abstract fun findMany ( filter : Map < String , *> , fields : List < String > , limit : Int ? = null , skip : Int ? = null , sort : Map < String , Boolean > = emptyMap ()): List < Map < String , *>>","title":"Find many"},{"location":"port_store/com.hexagonkt.store/-store/find-many/#findmany","text":"abstract fun findMany ( filter : Map < String , *> , limit : Int ? = null , skip : Int ? = null , sort : Map < String , Boolean > = emptyMap ()): List < T > abstract fun findMany ( filter : Map < String , *> , fields : List < String > , limit : Int ? = null , skip : Int ? = null , sort : Map < String , Boolean > = emptyMap ()): List < Map < String , *>>","title":"findMany"},{"location":"port_store/com.hexagonkt.store/-store/find-one/","text":"com.hexagonkt.store / Store / findOne findOne \u00b6 abstract fun findOne ( key : K ): T ? abstract fun findOne ( key : K , fields : List < String > ): Map < String , *>? open fun findOne ( filter : Map < String , *> ): T ? open fun findOne ( filter : Map < String , *> , fields : List < String > ): Map < String , *>?","title":"Find one"},{"location":"port_store/com.hexagonkt.store/-store/find-one/#findone","text":"abstract fun findOne ( key : K ): T ? abstract fun findOne ( key : K , fields : List < String > ): Map < String , *>? open fun findOne ( filter : Map < String , *> ): T ? open fun findOne ( filter : Map < String , *> , fields : List < String > ): Map < String , *>?","title":"findOne"},{"location":"port_store/com.hexagonkt.store/-store/insert-many/","text":"com.hexagonkt.store / Store / insertMany insertMany \u00b6 abstract fun insertMany ( instances : List < T > ): List < K > open fun insertMany ( vararg instances : T ): List < K >","title":"Insert many"},{"location":"port_store/com.hexagonkt.store/-store/insert-many/#insertmany","text":"abstract fun insertMany ( instances : List < T > ): List < K > open fun insertMany ( vararg instances : T ): List < K >","title":"insertMany"},{"location":"port_store/com.hexagonkt.store/-store/insert-one/","text":"com.hexagonkt.store / Store / insertOne insertOne \u00b6 abstract fun insertOne ( instance : T ): K","title":"Insert one"},{"location":"port_store/com.hexagonkt.store/-store/insert-one/#insertone","text":"abstract fun insertOne ( instance : T ): K","title":"insertOne"},{"location":"port_store/com.hexagonkt.store/-store/key/","text":"com.hexagonkt.store / Store / key key \u00b6 abstract val key: KProperty1 < T , K >","title":"Key"},{"location":"port_store/com.hexagonkt.store/-store/key/#key","text":"abstract val key: KProperty1 < T , K >","title":"key"},{"location":"port_store/com.hexagonkt.store/-store/mapper/","text":"com.hexagonkt.store / Store / mapper mapper \u00b6 abstract val mapper: Mapper < T >","title":"Mapper"},{"location":"port_store/com.hexagonkt.store/-store/mapper/#mapper","text":"abstract val mapper: Mapper < T >","title":"mapper"},{"location":"port_store/com.hexagonkt.store/-store/name/","text":"com.hexagonkt.store / Store / name name \u00b6 abstract val name: String","title":"Name"},{"location":"port_store/com.hexagonkt.store/-store/name/#name","text":"abstract val name: String","title":"name"},{"location":"port_store/com.hexagonkt.store/-store/replace-many/","text":"com.hexagonkt.store / Store / replaceMany replaceMany \u00b6 abstract fun replaceMany ( instances : List < T > ): List < T > open fun replaceMany ( vararg instances : T ): List < T >","title":"Replace many"},{"location":"port_store/com.hexagonkt.store/-store/replace-many/#replacemany","text":"abstract fun replaceMany ( instances : List < T > ): List < T > open fun replaceMany ( vararg instances : T ): List < T >","title":"replaceMany"},{"location":"port_store/com.hexagonkt.store/-store/replace-one/","text":"com.hexagonkt.store / Store / replaceOne replaceOne \u00b6 abstract fun replaceOne ( instance : T ): Boolean","title":"Replace one"},{"location":"port_store/com.hexagonkt.store/-store/replace-one/#replaceone","text":"abstract fun replaceOne ( instance : T ): Boolean","title":"replaceOne"},{"location":"port_store/com.hexagonkt.store/-store/save-many/","text":"com.hexagonkt.store / Store / saveMany saveMany \u00b6 abstract fun saveMany ( instances : List < T > ): List < K ?>","title":"Save many"},{"location":"port_store/com.hexagonkt.store/-store/save-many/#savemany","text":"abstract fun saveMany ( instances : List < T > ): List < K ?>","title":"saveMany"},{"location":"port_store/com.hexagonkt.store/-store/save-one/","text":"com.hexagonkt.store / Store / saveOne saveOne \u00b6 abstract fun saveOne ( instance : T ): K ?","title":"Save one"},{"location":"port_store/com.hexagonkt.store/-store/save-one/#saveone","text":"abstract fun saveOne ( instance : T ): K ?","title":"saveOne"},{"location":"port_store/com.hexagonkt.store/-store/type/","text":"com.hexagonkt.store / Store / type type \u00b6 abstract val type: KClass < T >","title":"Type"},{"location":"port_store/com.hexagonkt.store/-store/type/#type","text":"abstract val type: KClass < T >","title":"type"},{"location":"port_store/com.hexagonkt.store/-store/update-many/","text":"com.hexagonkt.store / Store / updateMany updateMany \u00b6 abstract fun updateMany ( filter : Map < String , *> , updates : Map < String , *> ): Long","title":"Update many"},{"location":"port_store/com.hexagonkt.store/-store/update-many/#updatemany","text":"abstract fun updateMany ( filter : Map < String , *> , updates : Map < String , *> ): Long","title":"updateMany"},{"location":"port_store/com.hexagonkt.store/-store/update-one/","text":"com.hexagonkt.store / Store / updateOne updateOne \u00b6 abstract fun updateOne ( key : K , updates : Map < String , *> ): Boolean open fun updateOne ( key : K , vararg updates : Pair < KProperty1 < T , *> , *> ): Boolean","title":"Update one"},{"location":"port_store/com.hexagonkt.store/-store/update-one/#updateone","text":"abstract fun updateOne ( key : K , updates : Map < String , *> ): Boolean open fun updateOne ( key : K , vararg updates : Pair < KProperty1 < T , *> , *> ): Boolean","title":"updateOne"},{"location":"port_templates/","text":"TODO Packages \u00b6 Name Summary com.hexagonkt.templates TODO Index \u00b6 All Types","title":"Templates"},{"location":"port_templates/#packages","text":"Name Summary com.hexagonkt.templates TODO","title":"Packages"},{"location":"port_templates/#index","text":"All Types","title":"Index"},{"location":"port_templates/alltypes/","text":"TODO All Types \u00b6 Name Summary com.hexagonkt.templates.TemplateManager com.hexagonkt.templates.TemplatePort","title":"Home"},{"location":"port_templates/alltypes/#all-types","text":"Name Summary com.hexagonkt.templates.TemplateManager com.hexagonkt.templates.TemplatePort","title":"All Types"},{"location":"port_templates/com.hexagonkt.templates/","text":"com.hexagonkt.templates Package com.hexagonkt.templates \u00b6 TODO Level 2 heading \u00b6 More docs Types \u00b6 Name Summary TemplateManager object TemplateManager TemplatePort interface TemplatePort","title":"Home"},{"location":"port_templates/com.hexagonkt.templates/#package-comhexagonkttemplates","text":"TODO","title":"Package com.hexagonkt.templates"},{"location":"port_templates/com.hexagonkt.templates/#level-2-heading","text":"More docs","title":"Level 2 heading"},{"location":"port_templates/com.hexagonkt.templates/#types","text":"Name Summary TemplateManager object TemplateManager TemplatePort interface TemplatePort","title":"Types"},{"location":"port_templates/com.hexagonkt.templates/-template-manager/","text":"com.hexagonkt.templates / TemplateManager TemplateManager \u00b6 object TemplateManager Functions \u00b6 Name Summary render fun render ( engine : TemplatePort , resource : String , locale : Locale , context : Map < String , *> ): String","title":"Home"},{"location":"port_templates/com.hexagonkt.templates/-template-manager/#templatemanager","text":"object TemplateManager","title":"TemplateManager"},{"location":"port_templates/com.hexagonkt.templates/-template-manager/#functions","text":"Name Summary render fun render ( engine : TemplatePort , resource : String , locale : Locale , context : Map < String , *> ): String","title":"Functions"},{"location":"port_templates/com.hexagonkt.templates/-template-manager/render/","text":"com.hexagonkt.templates / TemplateManager / render render \u00b6 fun render ( engine : TemplatePort , resource : String , locale : Locale , context : Map < String , *> ): String","title":"Render"},{"location":"port_templates/com.hexagonkt.templates/-template-manager/render/#render","text":"fun render ( engine : TemplatePort , resource : String , locale : Locale , context : Map < String , *> ): String","title":"render"},{"location":"port_templates/com.hexagonkt.templates/-template-port/","text":"com.hexagonkt.templates / TemplatePort TemplatePort \u00b6 interface TemplatePort Functions \u00b6 Name Summary render abstract fun render ( resource : String , locale : Locale , context : Map < String , *> ): String open fun render ( resource : String , locale : Locale , vararg context : Pair < String , *> ): String","title":"Home"},{"location":"port_templates/com.hexagonkt.templates/-template-port/#templateport","text":"interface TemplatePort","title":"TemplatePort"},{"location":"port_templates/com.hexagonkt.templates/-template-port/#functions","text":"Name Summary render abstract fun render ( resource : String , locale : Locale , context : Map < String , *> ): String open fun render ( resource : String , locale : Locale , vararg context : Pair < String , *> ): String","title":"Functions"},{"location":"port_templates/com.hexagonkt.templates/-template-port/render/","text":"com.hexagonkt.templates / TemplatePort / render render \u00b6 abstract fun render ( resource : String , locale : Locale , context : Map < String , *> ): String open fun render ( resource : String , locale : Locale , vararg context : Pair < String , *> ): String","title":"Render"},{"location":"port_templates/com.hexagonkt.templates/-template-port/render/#render","text":"abstract fun render ( resource : String , locale : Locale , context : Map < String , *> ): String open fun render ( resource : String , locale : Locale , vararg context : Pair < String , *> ): String","title":"render"},{"location":"store_mongodb/","text":"Hexagon's storage utilities for data classes. Packages \u00b6 Name Summary com.hexagonkt.store.mongodb TODO Index \u00b6 All Types","title":"MongoDB"},{"location":"store_mongodb/#packages","text":"Name Summary com.hexagonkt.store.mongodb TODO","title":"Packages"},{"location":"store_mongodb/#index","text":"All Types","title":"Index"},{"location":"store_mongodb/alltypes/","text":"Hexagon's storage utilities for data classes. All Types \u00b6 Name Summary com.hexagonkt.store.mongodb.MongoDbMapper com.hexagonkt.store.mongodb.MongoDbStore","title":"Home"},{"location":"store_mongodb/alltypes/#all-types","text":"Name Summary com.hexagonkt.store.mongodb.MongoDbMapper com.hexagonkt.store.mongodb.MongoDbStore","title":"All Types"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/","text":"com.hexagonkt.store.mongodb Package com.hexagonkt.store.mongodb \u00b6 TODO Types \u00b6 Name Summary MongoDbMapper class MongoDbMapper < T : Any , K : Any > : Mapper < T > MongoDbStore class MongoDbStore < T : Any , K : Any > : Store < T , K >","title":"Home"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/#package-comhexagonktstoremongodb","text":"TODO","title":"Package com.hexagonkt.store.mongodb"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/#types","text":"Name Summary MongoDbMapper class MongoDbMapper < T : Any , K : Any > : Mapper < T > MongoDbStore class MongoDbStore < T : Any , K : Any > : Store < T , K >","title":"Types"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-mapper/","text":"com.hexagonkt.store.mongodb / MongoDbMapper MongoDbMapper \u00b6 class MongoDbMapper < T : Any , K : Any > : Mapper < T > Constructors \u00b6 Name Summary <init> MongoDbMapper ( type : KClass < T > , key : KProperty1 < T , K > ) Properties \u00b6 Name Summary fields val fields: Map < String , KProperty1 <* , *>> Functions \u00b6 Name Summary fromStore fun fromStore ( map : Map < String , Any > ): T fun fromStore ( property : String , value : Any ): Any toStore fun toStore ( instance : T ): Map < String , Any > fun toStore ( property : String , value : Any ): Any","title":"Home"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-mapper/#mongodbmapper","text":"class MongoDbMapper < T : Any , K : Any > : Mapper < T >","title":"MongoDbMapper"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-mapper/#constructors","text":"Name Summary <init> MongoDbMapper ( type : KClass < T > , key : KProperty1 < T , K > )","title":"Constructors"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-mapper/#properties","text":"Name Summary fields val fields: Map < String , KProperty1 <* , *>>","title":"Properties"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-mapper/#functions","text":"Name Summary fromStore fun fromStore ( map : Map < String , Any > ): T fun fromStore ( property : String , value : Any ): Any toStore fun toStore ( instance : T ): Map < String , Any > fun toStore ( property : String , value : Any ): Any","title":"Functions"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-mapper/-init-/","text":"com.hexagonkt.store.mongodb / MongoDbMapper / <init> <init> \u00b6 MongoDbMapper ( type : KClass < T > , key : KProperty1 < T , K > )","title":" init "},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-mapper/-init-/#init","text":"MongoDbMapper ( type : KClass < T > , key : KProperty1 < T , K > )","title":"&lt;init&gt;"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-mapper/fields/","text":"com.hexagonkt.store.mongodb / MongoDbMapper / fields fields \u00b6 val fields: Map < String , KProperty1 <* , *>>","title":"Fields"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-mapper/fields/#fields","text":"val fields: Map < String , KProperty1 <* , *>>","title":"fields"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-mapper/from-store/","text":"com.hexagonkt.store.mongodb / MongoDbMapper / fromStore fromStore \u00b6 fun fromStore ( map : Map < String , Any > ): T fun fromStore ( property : String , value : Any ): Any","title":"From store"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-mapper/from-store/#fromstore","text":"fun fromStore ( map : Map < String , Any > ): T fun fromStore ( property : String , value : Any ): Any","title":"fromStore"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-mapper/to-store/","text":"com.hexagonkt.store.mongodb / MongoDbMapper / toStore toStore \u00b6 fun toStore ( instance : T ): Map < String , Any > fun toStore ( property : String , value : Any ): Any","title":"To store"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-mapper/to-store/#tostore","text":"fun toStore ( instance : T ): Map < String , Any > fun toStore ( property : String , value : Any ): Any","title":"toStore"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-store/","text":"com.hexagonkt.store.mongodb / MongoDbStore MongoDbStore \u00b6 class MongoDbStore < T : Any , K : Any > : Store < T , K > Constructors \u00b6 Name Summary <init> MongoDbStore ( type : KClass < T > , key : KProperty1 < T , K > , url : String , name : String = type . java . simpleName ) MongoDbStore ( type : KClass < T > , key : KProperty1 < T , K > , database : MongoDatabase , name : String = type . java . simpleName , mapper : Mapper < T > = MongoDbMapper ( type , key )) Properties \u00b6 Name Summary collection val collection: MongoCollection <Document> key val key: KProperty1 < T , K > mapper val mapper: Mapper < T > name val name: String type val type: KClass < T > Functions \u00b6 Name Summary count fun count ( filter : Map < String , *> ): Long createIndex fun createIndex ( unique : Boolean , fields : Map < String , IndexOrder > ): String deleteMany fun deleteMany ( filter : Map < String , *> ): Long deleteOne fun deleteOne ( id : K ): Boolean drop fun drop (): Unit findMany fun findMany ( filter : Map < String , *> , limit : Int ? , skip : Int ? , sort : Map < String , Boolean > ): List < T > fun findMany ( filter : Map < String , *> , fields : List < String > , limit : Int ? , skip : Int ? , sort : Map < String , Boolean > ): List < Map < String , *>> findOne fun findOne ( key : K ): T ? fun findOne ( key : K , fields : List < String > ): Map < String , *>? insertMany fun insertMany ( instances : List < T > ): List < K > insertOne fun insertOne ( instance : T ): K replaceMany fun replaceMany ( instances : List < T > ): List < T > replaceOne fun replaceOne ( instance : T ): Boolean saveMany fun saveMany ( instances : List < T > ): List < K ?> saveOne fun saveOne ( instance : T ): K ? updateMany fun updateMany ( filter : Map < String , *> , updates : Map < String , *> ): Long updateOne fun updateOne ( key : K , updates : Map < String , *> ): Boolean Companion Object Functions \u00b6 Name Summary database fun database ( url : String ): MongoDatabase","title":"Home"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-store/#mongodbstore","text":"class MongoDbStore < T : Any , K : Any > : Store < T , K >","title":"MongoDbStore"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-store/#constructors","text":"Name Summary <init> MongoDbStore ( type : KClass < T > , key : KProperty1 < T , K > , url : String , name : String = type . java . simpleName ) MongoDbStore ( type : KClass < T > , key : KProperty1 < T , K > , database : MongoDatabase , name : String = type . java . simpleName , mapper : Mapper < T > = MongoDbMapper ( type , key ))","title":"Constructors"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-store/#properties","text":"Name Summary collection val collection: MongoCollection <Document> key val key: KProperty1 < T , K > mapper val mapper: Mapper < T > name val name: String type val type: KClass < T >","title":"Properties"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-store/#functions","text":"Name Summary count fun count ( filter : Map < String , *> ): Long createIndex fun createIndex ( unique : Boolean , fields : Map < String , IndexOrder > ): String deleteMany fun deleteMany ( filter : Map < String , *> ): Long deleteOne fun deleteOne ( id : K ): Boolean drop fun drop (): Unit findMany fun findMany ( filter : Map < String , *> , limit : Int ? , skip : Int ? , sort : Map < String , Boolean > ): List < T > fun findMany ( filter : Map < String , *> , fields : List < String > , limit : Int ? , skip : Int ? , sort : Map < String , Boolean > ): List < Map < String , *>> findOne fun findOne ( key : K ): T ? fun findOne ( key : K , fields : List < String > ): Map < String , *>? insertMany fun insertMany ( instances : List < T > ): List < K > insertOne fun insertOne ( instance : T ): K replaceMany fun replaceMany ( instances : List < T > ): List < T > replaceOne fun replaceOne ( instance : T ): Boolean saveMany fun saveMany ( instances : List < T > ): List < K ?> saveOne fun saveOne ( instance : T ): K ? updateMany fun updateMany ( filter : Map < String , *> , updates : Map < String , *> ): Long updateOne fun updateOne ( key : K , updates : Map < String , *> ): Boolean","title":"Functions"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-store/#companion-object-functions","text":"Name Summary database fun database ( url : String ): MongoDatabase","title":"Companion Object Functions"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-store/-init-/","text":"com.hexagonkt.store.mongodb / MongoDbStore / <init> <init> \u00b6 MongoDbStore ( type : KClass < T > , key : KProperty1 < T , K > , url : String , name : String = type . java . simpleName ) MongoDbStore ( type : KClass < T > , key : KProperty1 < T , K > , database : MongoDatabase , name : String = type . java . simpleName , mapper : Mapper < T > = MongoDbMapper ( type , key ))","title":" init "},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-store/-init-/#init","text":"MongoDbStore ( type : KClass < T > , key : KProperty1 < T , K > , url : String , name : String = type . java . simpleName ) MongoDbStore ( type : KClass < T > , key : KProperty1 < T , K > , database : MongoDatabase , name : String = type . java . simpleName , mapper : Mapper < T > = MongoDbMapper ( type , key ))","title":"&lt;init&gt;"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-store/collection/","text":"com.hexagonkt.store.mongodb / MongoDbStore / collection collection \u00b6 val collection: MongoCollection <Document>","title":"Collection"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-store/collection/#collection","text":"val collection: MongoCollection <Document>","title":"collection"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-store/count/","text":"com.hexagonkt.store.mongodb / MongoDbStore / count count \u00b6 fun count ( filter : Map < String , *> ): Long","title":"Count"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-store/count/#count","text":"fun count ( filter : Map < String , *> ): Long","title":"count"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-store/create-index/","text":"com.hexagonkt.store.mongodb / MongoDbStore / createIndex createIndex \u00b6 fun createIndex ( unique : Boolean , fields : Map < String , IndexOrder > ): String","title":"Create index"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-store/create-index/#createindex","text":"fun createIndex ( unique : Boolean , fields : Map < String , IndexOrder > ): String","title":"createIndex"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-store/database/","text":"com.hexagonkt.store.mongodb / MongoDbStore / database database \u00b6 fun database ( url : String ): MongoDatabase","title":"Database"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-store/database/#database","text":"fun database ( url : String ): MongoDatabase","title":"database"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-store/delete-many/","text":"com.hexagonkt.store.mongodb / MongoDbStore / deleteMany deleteMany \u00b6 fun deleteMany ( filter : Map < String , *> ): Long","title":"Delete many"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-store/delete-many/#deletemany","text":"fun deleteMany ( filter : Map < String , *> ): Long","title":"deleteMany"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-store/delete-one/","text":"com.hexagonkt.store.mongodb / MongoDbStore / deleteOne deleteOne \u00b6 fun deleteOne ( id : K ): Boolean","title":"Delete one"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-store/delete-one/#deleteone","text":"fun deleteOne ( id : K ): Boolean","title":"deleteOne"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-store/drop/","text":"com.hexagonkt.store.mongodb / MongoDbStore / drop drop \u00b6 fun drop (): Unit","title":"Drop"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-store/drop/#drop","text":"fun drop (): Unit","title":"drop"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-store/find-many/","text":"com.hexagonkt.store.mongodb / MongoDbStore / findMany findMany \u00b6 fun findMany ( filter : Map < String , *> , limit : Int ? , skip : Int ? , sort : Map < String , Boolean > ): List < T > fun findMany ( filter : Map < String , *> , fields : List < String > , limit : Int ? , skip : Int ? , sort : Map < String , Boolean > ): List < Map < String , *>>","title":"Find many"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-store/find-many/#findmany","text":"fun findMany ( filter : Map < String , *> , limit : Int ? , skip : Int ? , sort : Map < String , Boolean > ): List < T > fun findMany ( filter : Map < String , *> , fields : List < String > , limit : Int ? , skip : Int ? , sort : Map < String , Boolean > ): List < Map < String , *>>","title":"findMany"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-store/find-one/","text":"com.hexagonkt.store.mongodb / MongoDbStore / findOne findOne \u00b6 fun findOne ( key : K ): T ? fun findOne ( key : K , fields : List < String > ): Map < String , *>?","title":"Find one"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-store/find-one/#findone","text":"fun findOne ( key : K ): T ? fun findOne ( key : K , fields : List < String > ): Map < String , *>?","title":"findOne"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-store/insert-many/","text":"com.hexagonkt.store.mongodb / MongoDbStore / insertMany insertMany \u00b6 fun insertMany ( instances : List < T > ): List < K >","title":"Insert many"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-store/insert-many/#insertmany","text":"fun insertMany ( instances : List < T > ): List < K >","title":"insertMany"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-store/insert-one/","text":"com.hexagonkt.store.mongodb / MongoDbStore / insertOne insertOne \u00b6 fun insertOne ( instance : T ): K","title":"Insert one"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-store/insert-one/#insertone","text":"fun insertOne ( instance : T ): K","title":"insertOne"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-store/key/","text":"com.hexagonkt.store.mongodb / MongoDbStore / key key \u00b6 val key: KProperty1 < T , K >","title":"Key"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-store/key/#key","text":"val key: KProperty1 < T , K >","title":"key"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-store/mapper/","text":"com.hexagonkt.store.mongodb / MongoDbStore / mapper mapper \u00b6 val mapper: Mapper < T >","title":"Mapper"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-store/mapper/#mapper","text":"val mapper: Mapper < T >","title":"mapper"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-store/name/","text":"com.hexagonkt.store.mongodb / MongoDbStore / name name \u00b6 val name: String","title":"Name"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-store/name/#name","text":"val name: String","title":"name"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-store/replace-many/","text":"com.hexagonkt.store.mongodb / MongoDbStore / replaceMany replaceMany \u00b6 fun replaceMany ( instances : List < T > ): List < T >","title":"Replace many"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-store/replace-many/#replacemany","text":"fun replaceMany ( instances : List < T > ): List < T >","title":"replaceMany"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-store/replace-one/","text":"com.hexagonkt.store.mongodb / MongoDbStore / replaceOne replaceOne \u00b6 fun replaceOne ( instance : T ): Boolean","title":"Replace one"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-store/replace-one/#replaceone","text":"fun replaceOne ( instance : T ): Boolean","title":"replaceOne"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-store/save-many/","text":"com.hexagonkt.store.mongodb / MongoDbStore / saveMany saveMany \u00b6 fun saveMany ( instances : List < T > ): List < K ?>","title":"Save many"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-store/save-many/#savemany","text":"fun saveMany ( instances : List < T > ): List < K ?>","title":"saveMany"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-store/save-one/","text":"com.hexagonkt.store.mongodb / MongoDbStore / saveOne saveOne \u00b6 fun saveOne ( instance : T ): K ?","title":"Save one"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-store/save-one/#saveone","text":"fun saveOne ( instance : T ): K ?","title":"saveOne"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-store/type/","text":"com.hexagonkt.store.mongodb / MongoDbStore / type type \u00b6 val type: KClass < T >","title":"Type"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-store/type/#type","text":"val type: KClass < T >","title":"type"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-store/update-many/","text":"com.hexagonkt.store.mongodb / MongoDbStore / updateMany updateMany \u00b6 fun updateMany ( filter : Map < String , *> , updates : Map < String , *> ): Long","title":"Update many"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-store/update-many/#updatemany","text":"fun updateMany ( filter : Map < String , *> , updates : Map < String , *> ): Long","title":"updateMany"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-store/update-one/","text":"com.hexagonkt.store.mongodb / MongoDbStore / updateOne updateOne \u00b6 fun updateOne ( key : K , updates : Map < String , *> ): Boolean","title":"Update one"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-store/update-one/#updateone","text":"fun updateOne ( key : K , updates : Map < String , *> ): Boolean","title":"updateOne"},{"location":"templates_pebble/","text":"Pebble template engine adapter for Hexagon. Packages \u00b6 Name Summary com.hexagonkt.templates.pebble TODO Index \u00b6 All Types","title":"Pebble"},{"location":"templates_pebble/#packages","text":"Name Summary com.hexagonkt.templates.pebble TODO","title":"Packages"},{"location":"templates_pebble/#index","text":"All Types","title":"Index"},{"location":"templates_pebble/alltypes/","text":"Pebble template engine adapter for Hexagon. All Types \u00b6 Name Summary com.hexagonkt.templates.pebble.PebbleAdapter TODO Support different engines by subdir. Ie: TODO Add code to test templates (check unresolved variables in bundles, multilanguage, etc.)","title":"Home"},{"location":"templates_pebble/alltypes/#all-types","text":"Name Summary com.hexagonkt.templates.pebble.PebbleAdapter TODO Support different engines by subdir. Ie: TODO Add code to test templates (check unresolved variables in bundles, multilanguage, etc.)","title":"All Types"},{"location":"templates_pebble/com.hexagonkt.templates.pebble/","text":"com.hexagonkt.templates.pebble Package com.hexagonkt.templates.pebble \u00b6 TODO Types \u00b6 Name Summary PebbleAdapter object PebbleAdapter : TemplatePort TODO Support different engines by subdir. Ie: TODO Add code to test templates (check unresolved variables in bundles, multilanguage, etc.)","title":"Home"},{"location":"templates_pebble/com.hexagonkt.templates.pebble/#package-comhexagonkttemplatespebble","text":"TODO","title":"Package com.hexagonkt.templates.pebble"},{"location":"templates_pebble/com.hexagonkt.templates.pebble/#types","text":"Name Summary PebbleAdapter object PebbleAdapter : TemplatePort TODO Support different engines by subdir. Ie: TODO Add code to test templates (check unresolved variables in bundles, multilanguage, etc.)","title":"Types"},{"location":"templates_pebble/com.hexagonkt.templates.pebble/-pebble-adapter/","text":"com.hexagonkt.templates.pebble / PebbleAdapter PebbleAdapter \u00b6 object PebbleAdapter : TemplatePort TODO Support different engines by subdir. Ie: TODO Add code to test templates (check unresolved variables in bundles, multilanguage, etc.) templates/pebble/file templates/freemarker/file ... Functions \u00b6 Name Summary render fun render ( resource : String , locale : Locale , context : Map < String , *> ): String","title":"Home"},{"location":"templates_pebble/com.hexagonkt.templates.pebble/-pebble-adapter/#pebbleadapter","text":"object PebbleAdapter : TemplatePort TODO Support different engines by subdir. Ie: TODO Add code to test templates (check unresolved variables in bundles, multilanguage, etc.) templates/pebble/file templates/freemarker/file ...","title":"PebbleAdapter"},{"location":"templates_pebble/com.hexagonkt.templates.pebble/-pebble-adapter/#functions","text":"Name Summary render fun render ( resource : String , locale : Locale , context : Map < String , *> ): String","title":"Functions"},{"location":"templates_pebble/com.hexagonkt.templates.pebble/-pebble-adapter/render/","text":"com.hexagonkt.templates.pebble / PebbleAdapter / render render \u00b6 fun render ( resource : String , locale : Locale , context : Map < String , *> ): String","title":"Render"},{"location":"templates_pebble/com.hexagonkt.templates.pebble/-pebble-adapter/render/#render","text":"fun render ( resource : String , locale : Locale , context : Map < String , *> ): String","title":"render"}]}